
Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d90  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08005ed0  08005ed0  00015ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800627c  0800627c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006284  08006284  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006288  08006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800628c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  08006460  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08006460  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008793  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000181f  00000000  00000000  000289d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000600  00000000  00000000  0002a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016adb  00000000  00000000  0002afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000997a  00000000  00000000  00041ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cac8  00000000  00000000  0004b42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fe0  00000000  00000000  000d7ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000daed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08005eb8 	.word	0x08005eb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08005eb8 	.word	0x08005eb8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_fmul>:
 8000190:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000194:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000198:	bf1e      	ittt	ne
 800019a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800019e:	ea92 0f0c 	teqne	r2, ip
 80001a2:	ea93 0f0c 	teqne	r3, ip
 80001a6:	d06f      	beq.n	8000288 <__aeabi_fmul+0xf8>
 80001a8:	441a      	add	r2, r3
 80001aa:	ea80 0c01 	eor.w	ip, r0, r1
 80001ae:	0240      	lsls	r0, r0, #9
 80001b0:	bf18      	it	ne
 80001b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001b6:	d01e      	beq.n	80001f6 <__aeabi_fmul+0x66>
 80001b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001c4:	fba0 3101 	umull	r3, r1, r0, r1
 80001c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001d0:	bf3e      	ittt	cc
 80001d2:	0049      	lslcc	r1, r1, #1
 80001d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d8:	005b      	lslcc	r3, r3, #1
 80001da:	ea40 0001 	orr.w	r0, r0, r1
 80001de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001e2:	2afd      	cmp	r2, #253	; 0xfd
 80001e4:	d81d      	bhi.n	8000222 <__aeabi_fmul+0x92>
 80001e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ee:	bf08      	it	eq
 80001f0:	f020 0001 	biceq.w	r0, r0, #1
 80001f4:	4770      	bx	lr
 80001f6:	f090 0f00 	teq	r0, #0
 80001fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001fe:	bf08      	it	eq
 8000200:	0249      	lsleq	r1, r1, #9
 8000202:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000206:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800020a:	3a7f      	subs	r2, #127	; 0x7f
 800020c:	bfc2      	ittt	gt
 800020e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000212:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000216:	4770      	bxgt	lr
 8000218:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	3a01      	subs	r2, #1
 8000222:	dc5d      	bgt.n	80002e0 <__aeabi_fmul+0x150>
 8000224:	f112 0f19 	cmn.w	r2, #25
 8000228:	bfdc      	itt	le
 800022a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800022e:	4770      	bxle	lr
 8000230:	f1c2 0200 	rsb	r2, r2, #0
 8000234:	0041      	lsls	r1, r0, #1
 8000236:	fa21 f102 	lsr.w	r1, r1, r2
 800023a:	f1c2 0220 	rsb	r2, r2, #32
 800023e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000242:	ea5f 0031 	movs.w	r0, r1, rrx
 8000246:	f140 0000 	adc.w	r0, r0, #0
 800024a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800024e:	bf08      	it	eq
 8000250:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000254:	4770      	bx	lr
 8000256:	f092 0f00 	teq	r2, #0
 800025a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800025e:	bf02      	ittt	eq
 8000260:	0040      	lsleq	r0, r0, #1
 8000262:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000266:	3a01      	subeq	r2, #1
 8000268:	d0f9      	beq.n	800025e <__aeabi_fmul+0xce>
 800026a:	ea40 000c 	orr.w	r0, r0, ip
 800026e:	f093 0f00 	teq	r3, #0
 8000272:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000276:	bf02      	ittt	eq
 8000278:	0049      	lsleq	r1, r1, #1
 800027a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800027e:	3b01      	subeq	r3, #1
 8000280:	d0f9      	beq.n	8000276 <__aeabi_fmul+0xe6>
 8000282:	ea41 010c 	orr.w	r1, r1, ip
 8000286:	e78f      	b.n	80001a8 <__aeabi_fmul+0x18>
 8000288:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800028c:	ea92 0f0c 	teq	r2, ip
 8000290:	bf18      	it	ne
 8000292:	ea93 0f0c 	teqne	r3, ip
 8000296:	d00a      	beq.n	80002ae <__aeabi_fmul+0x11e>
 8000298:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800029c:	bf18      	it	ne
 800029e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002a2:	d1d8      	bne.n	8000256 <__aeabi_fmul+0xc6>
 80002a4:	ea80 0001 	eor.w	r0, r0, r1
 80002a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f090 0f00 	teq	r0, #0
 80002b2:	bf17      	itett	ne
 80002b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002b8:	4608      	moveq	r0, r1
 80002ba:	f091 0f00 	teqne	r1, #0
 80002be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002c2:	d014      	beq.n	80002ee <__aeabi_fmul+0x15e>
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	d101      	bne.n	80002ce <__aeabi_fmul+0x13e>
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	d10f      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002ce:	ea93 0f0c 	teq	r3, ip
 80002d2:	d103      	bne.n	80002dc <__aeabi_fmul+0x14c>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	bf18      	it	ne
 80002d8:	4608      	movne	r0, r1
 80002da:	d108      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ec:	4770      	bx	lr
 80002ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_drsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	e002      	b.n	8000304 <__adddf3>
 80002fe:	bf00      	nop

08000300 <__aeabi_dsub>:
 8000300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000304 <__adddf3>:
 8000304:	b530      	push	{r4, r5, lr}
 8000306:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800030a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030e:	ea94 0f05 	teq	r4, r5
 8000312:	bf08      	it	eq
 8000314:	ea90 0f02 	teqeq	r0, r2
 8000318:	bf1f      	itttt	ne
 800031a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000322:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000326:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032a:	f000 80e2 	beq.w	80004f2 <__adddf3+0x1ee>
 800032e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000332:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000336:	bfb8      	it	lt
 8000338:	426d      	neglt	r5, r5
 800033a:	dd0c      	ble.n	8000356 <__adddf3+0x52>
 800033c:	442c      	add	r4, r5
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	ea82 0000 	eor.w	r0, r2, r0
 800034a:	ea83 0101 	eor.w	r1, r3, r1
 800034e:	ea80 0202 	eor.w	r2, r0, r2
 8000352:	ea81 0303 	eor.w	r3, r1, r3
 8000356:	2d36      	cmp	r5, #54	; 0x36
 8000358:	bf88      	it	hi
 800035a:	bd30      	pophi	{r4, r5, pc}
 800035c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000360:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000364:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000368:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x70>
 800036e:	4240      	negs	r0, r0
 8000370:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000374:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000378:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800037c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x84>
 8000382:	4252      	negs	r2, r2
 8000384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000388:	ea94 0f05 	teq	r4, r5
 800038c:	f000 80a7 	beq.w	80004de <__adddf3+0x1da>
 8000390:	f1a4 0401 	sub.w	r4, r4, #1
 8000394:	f1d5 0e20 	rsbs	lr, r5, #32
 8000398:	db0d      	blt.n	80003b6 <__adddf3+0xb2>
 800039a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039e:	fa22 f205 	lsr.w	r2, r2, r5
 80003a2:	1880      	adds	r0, r0, r2
 80003a4:	f141 0100 	adc.w	r1, r1, #0
 80003a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ac:	1880      	adds	r0, r0, r2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	4159      	adcs	r1, r3
 80003b4:	e00e      	b.n	80003d4 <__adddf3+0xd0>
 80003b6:	f1a5 0520 	sub.w	r5, r5, #32
 80003ba:	f10e 0e20 	add.w	lr, lr, #32
 80003be:	2a01      	cmp	r2, #1
 80003c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c4:	bf28      	it	cs
 80003c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ca:	fa43 f305 	asr.w	r3, r3, r5
 80003ce:	18c0      	adds	r0, r0, r3
 80003d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d8:	d507      	bpl.n	80003ea <__adddf3+0xe6>
 80003da:	f04f 0e00 	mov.w	lr, #0
 80003de:	f1dc 0c00 	rsbs	ip, ip, #0
 80003e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ee:	d31b      	bcc.n	8000428 <__adddf3+0x124>
 80003f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003f4:	d30c      	bcc.n	8000410 <__adddf3+0x10c>
 80003f6:	0849      	lsrs	r1, r1, #1
 80003f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000400:	f104 0401 	add.w	r4, r4, #1
 8000404:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000408:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800040c:	f080 809a 	bcs.w	8000544 <__adddf3+0x240>
 8000410:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000414:	bf08      	it	eq
 8000416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800041a:	f150 0000 	adcs.w	r0, r0, #0
 800041e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000422:	ea41 0105 	orr.w	r1, r1, r5
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800042c:	4140      	adcs	r0, r0
 800042e:	eb41 0101 	adc.w	r1, r1, r1
 8000432:	3c01      	subs	r4, #1
 8000434:	bf28      	it	cs
 8000436:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800043a:	d2e9      	bcs.n	8000410 <__adddf3+0x10c>
 800043c:	f091 0f00 	teq	r1, #0
 8000440:	bf04      	itt	eq
 8000442:	4601      	moveq	r1, r0
 8000444:	2000      	moveq	r0, #0
 8000446:	fab1 f381 	clz	r3, r1
 800044a:	bf08      	it	eq
 800044c:	3320      	addeq	r3, #32
 800044e:	f1a3 030b 	sub.w	r3, r3, #11
 8000452:	f1b3 0220 	subs.w	r2, r3, #32
 8000456:	da0c      	bge.n	8000472 <__adddf3+0x16e>
 8000458:	320c      	adds	r2, #12
 800045a:	dd08      	ble.n	800046e <__adddf3+0x16a>
 800045c:	f102 0c14 	add.w	ip, r2, #20
 8000460:	f1c2 020c 	rsb	r2, r2, #12
 8000464:	fa01 f00c 	lsl.w	r0, r1, ip
 8000468:	fa21 f102 	lsr.w	r1, r1, r2
 800046c:	e00c      	b.n	8000488 <__adddf3+0x184>
 800046e:	f102 0214 	add.w	r2, r2, #20
 8000472:	bfd8      	it	le
 8000474:	f1c2 0c20 	rsble	ip, r2, #32
 8000478:	fa01 f102 	lsl.w	r1, r1, r2
 800047c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000480:	bfdc      	itt	le
 8000482:	ea41 010c 	orrle.w	r1, r1, ip
 8000486:	4090      	lslle	r0, r2
 8000488:	1ae4      	subs	r4, r4, r3
 800048a:	bfa2      	ittt	ge
 800048c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000490:	4329      	orrge	r1, r5
 8000492:	bd30      	popge	{r4, r5, pc}
 8000494:	ea6f 0404 	mvn.w	r4, r4
 8000498:	3c1f      	subs	r4, #31
 800049a:	da1c      	bge.n	80004d6 <__adddf3+0x1d2>
 800049c:	340c      	adds	r4, #12
 800049e:	dc0e      	bgt.n	80004be <__adddf3+0x1ba>
 80004a0:	f104 0414 	add.w	r4, r4, #20
 80004a4:	f1c4 0220 	rsb	r2, r4, #32
 80004a8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ac:	fa01 f302 	lsl.w	r3, r1, r2
 80004b0:	ea40 0003 	orr.w	r0, r0, r3
 80004b4:	fa21 f304 	lsr.w	r3, r1, r4
 80004b8:	ea45 0103 	orr.w	r1, r5, r3
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f1c4 040c 	rsb	r4, r4, #12
 80004c2:	f1c4 0220 	rsb	r2, r4, #32
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 f304 	lsl.w	r3, r1, r4
 80004ce:	ea40 0003 	orr.w	r0, r0, r3
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	fa21 f004 	lsr.w	r0, r1, r4
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	f094 0f00 	teq	r4, #0
 80004e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004e6:	bf06      	itte	eq
 80004e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ec:	3401      	addeq	r4, #1
 80004ee:	3d01      	subne	r5, #1
 80004f0:	e74e      	b.n	8000390 <__adddf3+0x8c>
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf18      	it	ne
 80004f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fc:	d029      	beq.n	8000552 <__adddf3+0x24e>
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	d005      	beq.n	8000516 <__adddf3+0x212>
 800050a:	ea54 0c00 	orrs.w	ip, r4, r0
 800050e:	bf04      	itt	eq
 8000510:	4619      	moveq	r1, r3
 8000512:	4610      	moveq	r0, r2
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea91 0f03 	teq	r1, r3
 800051a:	bf1e      	ittt	ne
 800051c:	2100      	movne	r1, #0
 800051e:	2000      	movne	r0, #0
 8000520:	bd30      	popne	{r4, r5, pc}
 8000522:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000526:	d105      	bne.n	8000534 <__adddf3+0x230>
 8000528:	0040      	lsls	r0, r0, #1
 800052a:	4149      	adcs	r1, r1
 800052c:	bf28      	it	cs
 800052e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000532:	bd30      	pop	{r4, r5, pc}
 8000534:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000538:	bf3c      	itt	cc
 800053a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800053e:	bd30      	popcc	{r4, r5, pc}
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000548:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800054c:	f04f 0000 	mov.w	r0, #0
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000556:	bf1a      	itte	ne
 8000558:	4619      	movne	r1, r3
 800055a:	4610      	movne	r0, r2
 800055c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000560:	bf1c      	itt	ne
 8000562:	460b      	movne	r3, r1
 8000564:	4602      	movne	r2, r0
 8000566:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800056a:	bf06      	itte	eq
 800056c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000570:	ea91 0f03 	teqeq	r1, r3
 8000574:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	bf00      	nop

0800057c <__aeabi_ui2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f04f 0500 	mov.w	r5, #0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e750      	b.n	800043c <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_i2d>:
 800059c:	f090 0f00 	teq	r0, #0
 80005a0:	bf04      	itt	eq
 80005a2:	2100      	moveq	r1, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005b4:	bf48      	it	mi
 80005b6:	4240      	negmi	r0, r0
 80005b8:	f04f 0100 	mov.w	r1, #0
 80005bc:	e73e      	b.n	800043c <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_f2d>:
 80005c0:	0042      	lsls	r2, r0, #1
 80005c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ce:	bf1f      	itttt	ne
 80005d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005dc:	4770      	bxne	lr
 80005de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005e2:	bf08      	it	eq
 80005e4:	4770      	bxeq	lr
 80005e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ea:	bf04      	itt	eq
 80005ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	e71c      	b.n	800043c <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aed8 	beq.w	80003ea <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6bd      	b.n	80003ea <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__aeabi_dmul>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800067a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067e:	bf1d      	ittte	ne
 8000680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000684:	ea94 0f0c 	teqne	r4, ip
 8000688:	ea95 0f0c 	teqne	r5, ip
 800068c:	f000 f8de 	bleq	800084c <__aeabi_dmul+0x1dc>
 8000690:	442c      	add	r4, r5
 8000692:	ea81 0603 	eor.w	r6, r1, r3
 8000696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a2:	bf18      	it	ne
 80006a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b0:	d038      	beq.n	8000724 <__aeabi_dmul+0xb4>
 80006b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c6:	f04f 0600 	mov.w	r6, #0
 80006ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ce:	f09c 0f00 	teq	ip, #0
 80006d2:	bf18      	it	ne
 80006d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e4:	d204      	bcs.n	80006f0 <__aeabi_dmul+0x80>
 80006e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ea:	416d      	adcs	r5, r5
 80006ec:	eb46 0606 	adc.w	r6, r6, r6
 80006f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000704:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000708:	bf88      	it	hi
 800070a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070e:	d81e      	bhi.n	800074e <__aeabi_dmul+0xde>
 8000710:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000714:	bf08      	it	eq
 8000716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071a:	f150 0000 	adcs.w	r0, r0, #0
 800071e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000728:	ea46 0101 	orr.w	r1, r6, r1
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000738:	bfc2      	ittt	gt
 800073a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000742:	bd70      	popgt	{r4, r5, r6, pc}
 8000744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000748:	f04f 0e00 	mov.w	lr, #0
 800074c:	3c01      	subs	r4, #1
 800074e:	f300 80ab 	bgt.w	80008a8 <__aeabi_dmul+0x238>
 8000752:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000756:	bfde      	ittt	le
 8000758:	2000      	movle	r0, #0
 800075a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd70      	pople	{r4, r5, r6, pc}
 8000760:	f1c4 0400 	rsb	r4, r4, #0
 8000764:	3c20      	subs	r4, #32
 8000766:	da35      	bge.n	80007d4 <__aeabi_dmul+0x164>
 8000768:	340c      	adds	r4, #12
 800076a:	dc1b      	bgt.n	80007a4 <__aeabi_dmul+0x134>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f305 	lsl.w	r3, r0, r5
 8000778:	fa20 f004 	lsr.w	r0, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	fa21 f604 	lsr.w	r6, r1, r4
 8000794:	eb42 0106 	adc.w	r1, r2, r6
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 040c 	rsb	r4, r4, #12
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f304 	lsl.w	r3, r0, r4
 80007b0:	fa20 f005 	lsr.w	r0, r0, r5
 80007b4:	fa01 f204 	lsl.w	r2, r1, r4
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c4:	f141 0100 	adc.w	r1, r1, #0
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f205 	lsl.w	r2, r0, r5
 80007dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e0:	fa20 f304 	lsr.w	r3, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea43 0302 	orr.w	r3, r3, r2
 80007ec:	fa21 f004 	lsr.w	r0, r1, r4
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	fa21 f204 	lsr.w	r2, r1, r4
 80007f8:	ea20 0002 	bic.w	r0, r0, r2
 80007fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f094 0f00 	teq	r4, #0
 8000810:	d10f      	bne.n	8000832 <__aeabi_dmul+0x1c2>
 8000812:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	eb41 0101 	adc.w	r1, r1, r1
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3c01      	subeq	r4, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1a6>
 8000826:	ea41 0106 	orr.w	r1, r1, r6
 800082a:	f095 0f00 	teq	r5, #0
 800082e:	bf18      	it	ne
 8000830:	4770      	bxne	lr
 8000832:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	eb43 0303 	adc.w	r3, r3, r3
 800083c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000840:	bf08      	it	eq
 8000842:	3d01      	subeq	r5, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1c6>
 8000846:	ea43 0306 	orr.w	r3, r3, r6
 800084a:	4770      	bx	lr
 800084c:	ea94 0f0c 	teq	r4, ip
 8000850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000854:	bf18      	it	ne
 8000856:	ea95 0f0c 	teqne	r5, ip
 800085a:	d00c      	beq.n	8000876 <__aeabi_dmul+0x206>
 800085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000866:	d1d1      	bne.n	800080c <__aeabi_dmul+0x19c>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087a:	bf06      	itte	eq
 800087c:	4610      	moveq	r0, r2
 800087e:	4619      	moveq	r1, r3
 8000880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x24a>
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	d102      	bne.n	8000892 <__aeabi_dmul+0x222>
 800088c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000890:	d113      	bne.n	80008ba <__aeabi_dmul+0x24a>
 8000892:	ea95 0f0c 	teq	r5, ip
 8000896:	d105      	bne.n	80008a4 <__aeabi_dmul+0x234>
 8000898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800089c:	bf1c      	itt	ne
 800089e:	4610      	movne	r0, r2
 80008a0:	4619      	movne	r1, r3
 80008a2:	d10a      	bne.n	80008ba <__aeabi_dmul+0x24a>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008c2:	bd70      	pop	{r4, r5, r6, pc}

080008c4 <__aeabi_ddiv>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d2:	bf1d      	ittte	ne
 80008d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d8:	ea94 0f0c 	teqne	r4, ip
 80008dc:	ea95 0f0c 	teqne	r5, ip
 80008e0:	f000 f8a7 	bleq	8000a32 <__aeabi_ddiv+0x16e>
 80008e4:	eba4 0405 	sub.w	r4, r4, r5
 80008e8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f4:	f000 8088 	beq.w	8000a08 <__aeabi_ddiv+0x144>
 80008f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000908:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800090c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000914:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000918:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800091c:	429d      	cmp	r5, r3
 800091e:	bf08      	it	eq
 8000920:	4296      	cmpeq	r6, r2
 8000922:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000926:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800092a:	d202      	bcs.n	8000932 <__aeabi_ddiv+0x6e>
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	1ab6      	subs	r6, r6, r2
 8000934:	eb65 0503 	sbc.w	r5, r5, r3
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000942:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 000c 	orrcs.w	r0, r0, ip
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a4:	d018      	beq.n	80009d8 <__aeabi_ddiv+0x114>
 80009a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c2:	d1c0      	bne.n	8000946 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_ddiv+0x11e>
 80009ca:	ea41 0100 	orr.w	r1, r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d6:	e7b6      	b.n	8000946 <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009dc:	bf04      	itt	eq
 80009de:	4301      	orreq	r1, r0
 80009e0:	2000      	moveq	r0, #0
 80009e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e6:	bf88      	it	hi
 80009e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ec:	f63f aeaf 	bhi.w	800074e <__aeabi_dmul+0xde>
 80009f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f4:	bf04      	itt	eq
 80009f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a14:	bfc2      	ittt	gt
 8000a16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a24:	f04f 0e00 	mov.w	lr, #0
 8000a28:	3c01      	subs	r4, #1
 8000a2a:	e690      	b.n	800074e <__aeabi_dmul+0xde>
 8000a2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a30:	e68d      	b.n	800074e <__aeabi_dmul+0xde>
 8000a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a36:	ea94 0f0c 	teq	r4, ip
 8000a3a:	bf08      	it	eq
 8000a3c:	ea95 0f0c 	teqeq	r5, ip
 8000a40:	f43f af3b 	beq.w	80008ba <__aeabi_dmul+0x24a>
 8000a44:	ea94 0f0c 	teq	r4, ip
 8000a48:	d10a      	bne.n	8000a60 <__aeabi_ddiv+0x19c>
 8000a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4e:	f47f af34 	bne.w	80008ba <__aeabi_dmul+0x24a>
 8000a52:	ea95 0f0c 	teq	r5, ip
 8000a56:	f47f af25 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e72c      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a60:	ea95 0f0c 	teq	r5, ip
 8000a64:	d106      	bne.n	8000a74 <__aeabi_ddiv+0x1b0>
 8000a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6a:	f43f aefd 	beq.w	8000868 <__aeabi_dmul+0x1f8>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e722      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	f47f aec5 	bne.w	800080c <__aeabi_dmul+0x19c>
 8000a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a86:	f47f af0d 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8e:	f47f aeeb 	bne.w	8000868 <__aeabi_dmul+0x1f8>
 8000a92:	e712      	b.n	80008ba <__aeabi_dmul+0x24a>

08000a94 <__gedf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295
 8000a98:	e006      	b.n	8000aa8 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__ledf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpdf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000abe:	d01b      	beq.n	8000af8 <__cmpdf2+0x54>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ac6:	bf0c      	ite	eq
 8000ac8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000acc:	ea91 0f03 	teqne	r1, r3
 8000ad0:	bf02      	ittt	eq
 8000ad2:	ea90 0f02 	teqeq	r0, r2
 8000ad6:	2000      	moveq	r0, #0
 8000ad8:	4770      	bxeq	lr
 8000ada:	f110 0f00 	cmn.w	r0, #0
 8000ade:	ea91 0f03 	teq	r1, r3
 8000ae2:	bf58      	it	pl
 8000ae4:	4299      	cmppl	r1, r3
 8000ae6:	bf08      	it	eq
 8000ae8:	4290      	cmpeq	r0, r2
 8000aea:	bf2c      	ite	cs
 8000aec:	17d8      	asrcs	r0, r3, #31
 8000aee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000af2:	f040 0001 	orr.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__cmpdf2+0x64>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d107      	bne.n	8000b18 <__cmpdf2+0x74>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d1d6      	bne.n	8000ac0 <__cmpdf2+0x1c>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d0d3      	beq.n	8000ac0 <__cmpdf2+0x1c>
 8000b18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_cdrcmple>:
 8000b20:	4684      	mov	ip, r0
 8000b22:	4610      	mov	r0, r2
 8000b24:	4662      	mov	r2, ip
 8000b26:	468c      	mov	ip, r1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	e000      	b.n	8000b30 <__aeabi_cdcmpeq>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_cdcmpeq>:
 8000b30:	b501      	push	{r0, lr}
 8000b32:	f7ff ffb7 	bl	8000aa4 <__cmpdf2>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	bf48      	it	mi
 8000b3a:	f110 0f00 	cmnmi.w	r0, #0
 8000b3e:	bd01      	pop	{r0, pc}

08000b40 <__aeabi_dcmpeq>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff fff4 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b48:	bf0c      	ite	eq
 8000b4a:	2001      	moveq	r0, #1
 8000b4c:	2000      	movne	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmplt>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffea 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b5c:	bf34      	ite	cc
 8000b5e:	2001      	movcc	r0, #1
 8000b60:	2000      	movcs	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmple>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffe0 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpge>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffce 	bl	8000b20 <__aeabi_cdrcmple>
 8000b84:	bf94      	ite	ls
 8000b86:	2001      	movls	r0, #1
 8000b88:	2000      	movhi	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpgt>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffc4 	bl	8000b20 <__aeabi_cdrcmple>
 8000b98:	bf34      	ite	cc
 8000b9a:	2001      	movcc	r0, #1
 8000b9c:	2000      	movcs	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpun>:
 8000ba4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_dcmpun+0x10>
 8000bae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bb2:	d10a      	bne.n	8000bca <__aeabi_dcmpun+0x26>
 8000bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	d102      	bne.n	8000bc4 <__aeabi_dcmpun+0x20>
 8000bbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bc2:	d102      	bne.n	8000bca <__aeabi_dcmpun+0x26>
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0001 	mov.w	r0, #1
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2iz>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d215      	bcs.n	8000c06 <__aeabi_d2iz+0x36>
 8000bda:	d511      	bpl.n	8000c00 <__aeabi_d2iz+0x30>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d912      	bls.n	8000c0c <__aeabi_d2iz+0x3c>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d105      	bne.n	8000c18 <__aeabi_d2iz+0x48>
 8000c0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	bf08      	it	eq
 8000c12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_d2f>:
 8000c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c28:	bf24      	itt	cs
 8000c2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_d2f+0x30>
 8000c34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c54:	d121      	bne.n	8000c9a <__aeabi_d2f+0x7a>
 8000c56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c5a:	bfbc      	itt	lt
 8000c5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	4770      	bxlt	lr
 8000c62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6a:	f1c2 0218 	rsb	r2, r2, #24
 8000c6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c76:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	f040 0001 	orrne.w	r0, r0, #1
 8000c80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c8c:	ea40 000c 	orr.w	r0, r0, ip
 8000c90:	fa23 f302 	lsr.w	r3, r3, r2
 8000c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c98:	e7cc      	b.n	8000c34 <__aeabi_d2f+0x14>
 8000c9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9e:	d107      	bne.n	8000cb0 <__aeabi_d2f+0x90>
 8000ca0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bxne	lr
 8000cb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_uldivmod>:
 8000cc0:	b953      	cbnz	r3, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc2:	b94a      	cbnz	r2, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	2800      	cmpeq	r0, #0
 8000cca:	bf1c      	itt	ne
 8000ccc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd4:	f000 b972 	b.w	8000fbc <__aeabi_idiv0>
 8000cd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce0:	f000 f806 	bl	8000cf0 <__udivmoddi4>
 8000ce4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cec:	b004      	add	sp, #16
 8000cee:	4770      	bx	lr

08000cf0 <__udivmoddi4>:
 8000cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf4:	9e08      	ldr	r6, [sp, #32]
 8000cf6:	460d      	mov	r5, r1
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	468e      	mov	lr, r1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d14c      	bne.n	8000d9a <__udivmoddi4+0xaa>
 8000d00:	428a      	cmp	r2, r1
 8000d02:	4694      	mov	ip, r2
 8000d04:	d967      	bls.n	8000dd6 <__udivmoddi4+0xe6>
 8000d06:	fab2 f382 	clz	r3, r2
 8000d0a:	b153      	cbz	r3, 8000d22 <__udivmoddi4+0x32>
 8000d0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d10:	f1c3 0220 	rsb	r2, r3, #32
 8000d14:	fa01 fe03 	lsl.w	lr, r1, r3
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fbbe f1f7 	udiv	r1, lr, r7
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fb07 ee11 	mls	lr, r7, r1, lr
 8000d32:	fb01 f005 	mul.w	r0, r1, r5
 8000d36:	0c22      	lsrs	r2, r4, #16
 8000d38:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x66>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 3eff 	add.w	lr, r1, #4294967295
 8000d48:	f080 8119 	bcs.w	8000f7e <__udivmoddi4+0x28e>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8116 	bls.w	8000f7e <__udivmoddi4+0x28e>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d60:	fb00 f505 	mul.w	r5, r0, r5
 8000d64:	b2a4      	uxth	r4, r4
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x94>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8104 	bcs.w	8000f82 <__udivmoddi4+0x292>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8101 	bls.w	8000f82 <__udivmoddi4+0x292>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	2100      	movs	r1, #0
 8000d8a:	1b64      	subs	r4, r4, r5
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa6>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xc0>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ea 	beq.w	8000f78 <__udivmoddi4+0x288>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d148      	bne.n	8000e4a <__udivmoddi4+0x15a>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xd2>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2c2>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4696      	mov	lr, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa6>
 8000dd0:	e9c6 4e00 	strd	r4, lr, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa6>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xea>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 808e 	bne.w	8000f00 <__udivmoddi4+0x210>
 8000de4:	1a88      	subs	r0, r1, r2
 8000de6:	2101      	movs	r1, #1
 8000de8:	0c17      	lsrs	r7, r2, #16
 8000dea:	fa1f fe82 	uxth.w	lr, r2
 8000dee:	fbb0 f5f7 	udiv	r5, r0, r7
 8000df2:	fb07 0015 	mls	r0, r7, r5, r0
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfc:	fb0e f005 	mul.w	r0, lr, r5
 8000e00:	4290      	cmp	r0, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x126>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x124>
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	f200 80cc 	bhi.w	8000fac <__udivmoddi4+0x2bc>
 8000e14:	4645      	mov	r5, r8
 8000e16:	1a12      	subs	r2, r2, r0
 8000e18:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e1c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e20:	fb0e fe00 	mul.w	lr, lr, r0
 8000e24:	b2a4      	uxth	r4, r4
 8000e26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x150>
 8000e2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e32:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x14e>
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	f200 80b4 	bhi.w	8000fa6 <__udivmoddi4+0x2b6>
 8000e3e:	4610      	mov	r0, r2
 8000e40:	eba4 040e 	sub.w	r4, r4, lr
 8000e44:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e48:	e7a0      	b.n	8000d8c <__udivmoddi4+0x9c>
 8000e4a:	f1c1 0720 	rsb	r7, r1, #32
 8000e4e:	408b      	lsls	r3, r1
 8000e50:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e54:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e58:	fa25 fa07 	lsr.w	sl, r5, r7
 8000e5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e60:	fbba f8f9 	udiv	r8, sl, r9
 8000e64:	408d      	lsls	r5, r1
 8000e66:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6a:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	432b      	orrs	r3, r5
 8000e74:	fa00 f501 	lsl.w	r5, r0, r1
 8000e78:	fb08 f00e 	mul.w	r0, r8, lr
 8000e7c:	0c1c      	lsrs	r4, r3, #16
 8000e7e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e82:	42a0      	cmp	r0, r4
 8000e84:	fa02 f201 	lsl.w	r2, r2, r1
 8000e88:	d90b      	bls.n	8000ea2 <__udivmoddi4+0x1b2>
 8000e8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e92:	f080 8086 	bcs.w	8000fa2 <__udivmoddi4+0x2b2>
 8000e96:	42a0      	cmp	r0, r4
 8000e98:	f240 8083 	bls.w	8000fa2 <__udivmoddi4+0x2b2>
 8000e9c:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	1a24      	subs	r4, r4, r0
 8000ea4:	b298      	uxth	r0, r3
 8000ea6:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eaa:	fb09 4413 	mls	r4, r9, r3, r4
 8000eae:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb2:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x1dc>
 8000eba:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebe:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec2:	d26a      	bcs.n	8000f9a <__udivmoddi4+0x2aa>
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d968      	bls.n	8000f9a <__udivmoddi4+0x2aa>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4464      	add	r4, ip
 8000ecc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000ed0:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	429c      	cmp	r4, r3
 8000eda:	46c8      	mov	r8, r9
 8000edc:	469e      	mov	lr, r3
 8000ede:	d354      	bcc.n	8000f8a <__udivmoddi4+0x29a>
 8000ee0:	d051      	beq.n	8000f86 <__udivmoddi4+0x296>
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	d067      	beq.n	8000fb6 <__udivmoddi4+0x2c6>
 8000ee6:	ebb5 0308 	subs.w	r3, r5, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	40cc      	lsrs	r4, r1
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	2100      	movs	r1, #0
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0xa6>
 8000f00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f04:	f1c3 0020 	rsb	r0, r3, #32
 8000f08:	40c1      	lsrs	r1, r0
 8000f0a:	409d      	lsls	r5, r3
 8000f0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f14:	4328      	orrs	r0, r5
 8000f16:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f1a:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1e:	fa1f fe8c 	uxth.w	lr, ip
 8000f22:	0c02      	lsrs	r2, r0, #16
 8000f24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f28:	fb05 f10e 	mul.w	r1, r5, lr
 8000f2c:	4291      	cmp	r1, r2
 8000f2e:	fa04 f403 	lsl.w	r4, r4, r3
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x256>
 8000f34:	eb1c 0202 	adds.w	r2, ip, r2
 8000f38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f3c:	d22f      	bcs.n	8000f9e <__udivmoddi4+0x2ae>
 8000f3e:	4291      	cmp	r1, r2
 8000f40:	d92d      	bls.n	8000f9e <__udivmoddi4+0x2ae>
 8000f42:	3d02      	subs	r5, #2
 8000f44:	4462      	add	r2, ip
 8000f46:	1a52      	subs	r2, r2, r1
 8000f48:	fbb2 f1f7 	udiv	r1, r2, r7
 8000f4c:	fb07 2211 	mls	r2, r7, r1, r2
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000f56:	fb01 f20e 	mul.w	r2, r1, lr
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x280>
 8000f5e:	eb1c 0000 	adds.w	r0, ip, r0
 8000f62:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f66:	d216      	bcs.n	8000f96 <__udivmoddi4+0x2a6>
 8000f68:	4282      	cmp	r2, r0
 8000f6a:	d914      	bls.n	8000f96 <__udivmoddi4+0x2a6>
 8000f6c:	3902      	subs	r1, #2
 8000f6e:	4460      	add	r0, ip
 8000f70:	1a80      	subs	r0, r0, r2
 8000f72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f76:	e73a      	b.n	8000dee <__udivmoddi4+0xfe>
 8000f78:	4631      	mov	r1, r6
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	e70b      	b.n	8000d96 <__udivmoddi4+0xa6>
 8000f7e:	4671      	mov	r1, lr
 8000f80:	e6e9      	b.n	8000d56 <__udivmoddi4+0x66>
 8000f82:	4610      	mov	r0, r2
 8000f84:	e6fe      	b.n	8000d84 <__udivmoddi4+0x94>
 8000f86:	454d      	cmp	r5, r9
 8000f88:	d2ab      	bcs.n	8000ee2 <__udivmoddi4+0x1f2>
 8000f8a:	ebb9 0802 	subs.w	r8, r9, r2
 8000f8e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000f92:	3801      	subs	r0, #1
 8000f94:	e7a5      	b.n	8000ee2 <__udivmoddi4+0x1f2>
 8000f96:	4641      	mov	r1, r8
 8000f98:	e7ea      	b.n	8000f70 <__udivmoddi4+0x280>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	e796      	b.n	8000ecc <__udivmoddi4+0x1dc>
 8000f9e:	4645      	mov	r5, r8
 8000fa0:	e7d1      	b.n	8000f46 <__udivmoddi4+0x256>
 8000fa2:	46d0      	mov	r8, sl
 8000fa4:	e77d      	b.n	8000ea2 <__udivmoddi4+0x1b2>
 8000fa6:	4464      	add	r4, ip
 8000fa8:	3802      	subs	r0, #2
 8000faa:	e749      	b.n	8000e40 <__udivmoddi4+0x150>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e731      	b.n	8000e16 <__udivmoddi4+0x126>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xdc>
 8000fb6:	4631      	mov	r1, r6
 8000fb8:	e6ed      	b.n	8000d96 <__udivmoddi4+0xa6>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <_write+0x28>)
 8000fd8:	f002 f8de 	bl	8003198 <HAL_UART_Transmit>
	return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000244 	.word	0x20000244
 8000fec:	00000000 	.word	0x00000000

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fb36 	bl	8001666 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f84d 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 f91b 	bl	8001238 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001002:	f000 f8ef 	bl	80011e4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001006:	f000 f895 	bl	8001134 <MX_ADC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc);
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <main+0x98>)
 800100c:	f000 fd02 	bl	8001a14 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 100);
 8001010:	2164      	movs	r1, #100	; 0x64
 8001012:	481d      	ldr	r0, [pc, #116]	; (8001088 <main+0x98>)
 8001014:	f000 fd8a 	bl	8001b2c <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc);
 8001018:	481b      	ldr	r0, [pc, #108]	; (8001088 <main+0x98>)
 800101a:	f000 fe17 	bl	8001c4c <HAL_ADC_GetValue>
 800101e:	4603      	mov	r3, r0
 8001020:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_Stop(&hadc);
 8001022:	4819      	ldr	r0, [pc, #100]	; (8001088 <main+0x98>)
 8001024:	f000 fd56 	bl	8001ad4 <HAL_ADC_Stop>
	  voltage = (adc_value*3.3)/4096;
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff fab7 	bl	800059c <__aeabi_i2d>
 800102e:	a314      	add	r3, pc, #80	; (adr r3, 8001080 <main+0x90>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fb1c 	bl	8000670 <__aeabi_dmul>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <main+0x9c>)
 8001046:	f7ff fc3d 	bl	80008c4 <__aeabi_ddiv>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fde5 	bl	8000c20 <__aeabi_d2f>
 8001056:	4603      	mov	r3, r0
 8001058:	60bb      	str	r3, [r7, #8]
	  temp = voltage*100;
 800105a:	490d      	ldr	r1, [pc, #52]	; (8001090 <main+0xa0>)
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f7ff f897 	bl	8000190 <__aeabi_fmul>
 8001062:	4603      	mov	r3, r0
 8001064:	607b      	str	r3, [r7, #4]
	  printf("Temperature is: %f\r\n", temp);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff faaa 	bl	80005c0 <__aeabi_f2d>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <main+0xa4>)
 8001072:	f002 ff87 	bl	8003f84 <iprintf>
	  HAL_Delay(500);
 8001076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800107a:	f000 fb63 	bl	8001744 <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 800107e:	e7c4      	b.n	800100a <main+0x1a>
 8001080:	66666666 	.word	0x66666666
 8001084:	400a6666 	.word	0x400a6666
 8001088:	200001f0 	.word	0x200001f0
 800108c:	40b00000 	.word	0x40b00000
 8001090:	42c80000 	.word	0x42c80000
 8001094:	08005ed0 	.word	0x08005ed0

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b092      	sub	sp, #72	; 0x48
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2234      	movs	r2, #52	; 0x34
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 ffc1 	bl	800402e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <SystemClock_Config+0x98>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <SystemClock_Config+0x98>)
 80010c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ca:	2302      	movs	r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d2:	2310      	movs	r3, #16
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010da:	2300      	movs	r3, #0
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80010de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80010e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fa4e 	bl	8002590 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010fa:	f000 f903 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2303      	movs	r3, #3
 8001104:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	2101      	movs	r1, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fd6a 	bl	8002bf0 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001122:	f000 f8ef 	bl	8001304 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3748      	adds	r7, #72	; 0x48
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40007000 	.word	0x40007000

08001134 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_ADC_Init+0xa8>)
 8001146:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <MX_ADC_Init+0xac>)
 8001148:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_ADC_Init+0xa8>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <MX_ADC_Init+0xa8>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC_Init+0xa8>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC_Init+0xa8>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_ADC_Init+0xa8>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_ADC_Init+0xa8>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_ADC_Init+0xa8>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_ADC_Init+0xa8>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_ADC_Init+0xa8>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_ADC_Init+0xa8>)
 8001184:	2201      	movs	r2, #1
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_ADC_Init+0xa8>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_ADC_Init+0xa8>)
 8001192:	2210      	movs	r2, #16
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_ADC_Init+0xa8>)
 8001198:	2200      	movs	r2, #0
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_ADC_Init+0xa8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_ADC_Init+0xa8>)
 80011a6:	f000 faef 	bl	8001788 <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80011b0:	f000 f8a8 	bl	8001304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC_Init+0xa8>)
 80011c6:	f000 fd4d 	bl	8001c64 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80011d0:	f000 f898 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200001f0 	.word	0x200001f0
 80011e0:	40012400 	.word	0x40012400

080011e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f001 ff6c 	bl	80030f8 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 f86d 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000244 	.word	0x20000244
 8001234:	40004400 	.word	0x40004400

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_GPIO_Init+0xc0>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <MX_GPIO_Init+0xc0>)
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_GPIO_Init+0xc0>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <MX_GPIO_Init+0xc0>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_GPIO_Init+0xc0>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <MX_GPIO_Init+0xc4>)
 80012b4:	f001 f954 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_GPIO_Init+0xc8>)
 80012d0:	f000 ffb6 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d4:	2320      	movs	r3, #32
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_GPIO_Init+0xc4>)
 80012ec:	f000 ffa8 	bl	8002240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020800 	.word	0x40020800

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_MspInit+0x5c>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <HAL_MspInit+0x5c>)
 800131c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001320:	6253      	str	r3, [r2, #36]	; 0x24
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_MspInit+0x5c>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_MspInit+0x5c>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_MspInit+0x5c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_MspInit+0x5c>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_MspInit+0x5c>)
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_MspInit+0x5c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6253      	str	r3, [r2, #36]	; 0x24
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_MspInit+0x5c>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 ff3a 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_ADC_MspInit+0x74>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d123      	bne.n	80013da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 8001398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_ADC_MspInit+0x7c>)
 80013d6:	f000 ff33 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40012400 	.word	0x40012400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a17      	ldr	r2, [pc, #92]	; (800146c <HAL_UART_MspInit+0x7c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d127      	bne.n	8001462 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_UART_MspInit+0x80>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	4a16      	ldr	r2, [pc, #88]	; (8001470 <HAL_UART_MspInit+0x80>)
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	6253      	str	r3, [r2, #36]	; 0x24
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_UART_MspInit+0x80>)
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_UART_MspInit+0x80>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_UART_MspInit+0x80>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_UART_MspInit+0x80>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001442:	230c      	movs	r3, #12
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001452:	2307      	movs	r3, #7
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_UART_MspInit+0x84>)
 800145e:	f000 feef 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40004400 	.word	0x40004400
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014be:	f000 f925 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  return 1;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <_kill>:

int _kill(int pid, int sig)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014de:	f002 fdf9 	bl	80040d4 <__errno>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2216      	movs	r2, #22
 80014e6:	601a      	str	r2, [r3, #0]
  return -1;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_exit>:

void _exit (int status)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ffe7 	bl	80014d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001506:	e7fe      	b.n	8001506 <_exit+0x12>

08001508 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e00a      	b.n	8001530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800151a:	f3af 8000 	nop.w
 800151e:	4601      	mov	r1, r0
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	b2ca      	uxtb	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf0      	blt.n	800151a <_read+0x12>
  }

  return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001568:	605a      	str	r2, [r3, #4]
  return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <_isatty>:

int _isatty(int file)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f002 fd7e 	bl	80040d4 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20014000 	.word	0x20014000
 8001604:	00000400 	.word	0x00000400
 8001608:	2000028c 	.word	0x2000028c
 800160c:	200003e0 	.word	0x200003e0

08001610 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800161c:	f7ff fff8 	bl	8001610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001622:	490c      	ldr	r1, [pc, #48]	; (8001654 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001624:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001638:	4c09      	ldr	r4, [pc, #36]	; (8001660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001646:	f002 fd4b 	bl	80040e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800164a:	f7ff fcd1 	bl	8000ff0 <main>
  bx lr
 800164e:	4770      	bx	lr
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001658:	0800628c 	.word	0x0800628c
  ldr r2, =_sbss
 800165c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001660:	200003e0 	.word	0x200003e0

08001664 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC1_IRQHandler>

08001666 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 fdb1 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f80e 	bl	8001698 <HAL_InitTick>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	e001      	b.n	800168c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001688:	f7ff fe42 	bl	8001310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800168c:	79fb      	ldrb	r3, [r7, #7]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_InitTick+0x68>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d022      	beq.n	80016f2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_InitTick+0x6c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_InitTick+0x68>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 fdb0 	bl	8002226 <HAL_SYSTICK_Config>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	d809      	bhi.n	80016e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d2:	2200      	movs	r2, #0
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	f04f 30ff 	mov.w	r0, #4294967295
 80016da:	f000 fd88 	bl	80021ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_InitTick+0x70>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e007      	b.n	80016f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e004      	b.n	80016f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e001      	b.n	80016f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000008 	.word	0x20000008
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_IncTick+0x1c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_IncTick+0x20>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4413      	add	r3, r2
 800171a:	4a03      	ldr	r2, [pc, #12]	; (8001728 <HAL_IncTick+0x1c>)
 800171c:	6013      	str	r3, [r2, #0]
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000290 	.word	0x20000290
 800172c:	20000008 	.word	0x20000008

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <HAL_GetTick+0x10>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000290 	.word	0x20000290

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff fff0 	bl	8001730 <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d004      	beq.n	8001768 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_Delay+0x40>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001768:	bf00      	nop
 800176a:	f7ff ffe1 	bl	8001730 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	429a      	cmp	r2, r3
 8001778:	d8f7      	bhi.n	800176a <HAL_Delay+0x26>
  {
  }
}
 800177a:	bf00      	nop
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e127      	b.n	80019f8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d115      	bne.n	80017e2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <HAL_ADC_Init+0x278>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a8d      	ldr	r2, [pc, #564]	; (8001a00 <HAL_ADC_Init+0x278>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <HAL_ADC_Init+0x278>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fdc7 	bl	8001370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 80ff 	bne.w	80019ee <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017f8:	f023 0302 	bic.w	r3, r3, #2
 80017fc:	f043 0202 	orr.w	r2, r3, #2
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001804:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_ADC_Init+0x27c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	497c      	ldr	r1, [pc, #496]	; (8001a04 <HAL_ADC_Init+0x27c>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800181e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001826:	4619      	mov	r1, r3
 8001828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001842:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001848:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800186a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800186c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186e:	4313      	orrs	r3, r2
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001876:	2b10      	cmp	r3, #16
 8001878:	d007      	beq.n	800188a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001882:	4313      	orrs	r3, r2
 8001884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001886:	4313      	orrs	r3, r2
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001894:	2b40      	cmp	r3, #64	; 0x40
 8001896:	d04f      	beq.n	8001938 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	4313      	orrs	r3, r2
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018aa:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6912      	ldr	r2, [r2, #16]
 80018b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80018b4:	d003      	beq.n	80018be <HAL_ADC_Init+0x136>
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6912      	ldr	r2, [r2, #16]
 80018ba:	2a01      	cmp	r2, #1
 80018bc:	d102      	bne.n	80018c4 <HAL_ADC_Init+0x13c>
 80018be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c2:	e000      	b.n	80018c6 <HAL_ADC_Init+0x13e>
 80018c4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80018c6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ca:	4313      	orrs	r3, r2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d125      	bne.n	8001924 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d114      	bne.n	800190c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80018ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	fa92 f2a2 	rbit	r2, r2
 80018f4:	617a      	str	r2, [r7, #20]
  return result;
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	fab2 f282 	clz	r2, r2
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	4093      	lsls	r3, r2
 8001900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001906:	4313      	orrs	r3, r2
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
 800190a:	e00b      	b.n	8001924 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	f043 0220 	orr.w	r2, r3, #32
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191c:	f043 0201 	orr.w	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_ADC_Init+0x280>)
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001934:	430b      	orrs	r3, r1
 8001936:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_ADC_Init+0x284>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001948:	430b      	orrs	r3, r1
 800194a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001954:	d003      	beq.n	800195e <HAL_ADC_Init+0x1d6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d119      	bne.n	8001992 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001972:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	fa92 f2a2 	rbit	r2, r2
 800197a:	60fa      	str	r2, [r7, #12]
  return result;
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	fab2 f282 	clz	r2, r2
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	fa03 f202 	lsl.w	r2, r3, r2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
 8001990:	e007      	b.n	80019a2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_ADC_Init+0x288>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d10b      	bne.n	80019ca <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019bc:	f023 0303 	bic.w	r3, r3, #3
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80019c8:	e014      	b.n	80019f4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f023 0312 	bic.w	r3, r3, #18
 80019d2:	f043 0210 	orr.w	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3738      	adds	r7, #56	; 0x38
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40012700 	.word	0x40012700
 8001a08:	fcfc16ff 	.word	0xfcfc16ff
 8001a0c:	c0fff189 	.word	0xc0fff189
 8001a10:	bf80fffe 	.word	0xbf80fffe

08001a14 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_Start+0x1a>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e04e      	b.n	8001acc <HAL_ADC_Start+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fa80 	bl	8001f3c <ADC_Enable>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d141      	bne.n	8001aca <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a84:	d106      	bne.n	8001a94 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8a:	f023 0206 	bic.w	r2, r3, #6
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	651a      	str	r2, [r3, #80]	; 0x50
 8001a92:	e002      	b.n	8001a9a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aaa:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d107      	bne.n	8001aca <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ac8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Stop+0x1a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e01a      	b.n	8001b24 <HAL_ADC_Stop+0x50>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fa7c 	bl	8001ff4 <ADC_ConversionStop_Disable>
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b48:	d113      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b58:	d10b      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f043 0220 	orr.w	r2, r3, #32
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e068      	b.n	8001c44 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b72:	f7ff fddd 	bl	8001730 <HAL_GetTick>
 8001b76:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b78:	e021      	b.n	8001bbe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d01d      	beq.n	8001bbe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_ADC_PollForConversion+0x6c>
 8001b88:	f7ff fdd2 	bl	8001730 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d212      	bcs.n	8001bbe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10b      	bne.n	8001bbe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f043 0204 	orr.w	r2, r3, #4
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e042      	b.n	8001c44 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0d6      	beq.n	8001b7a <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0212 	mvn.w	r2, #18
 8001bdc:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d124      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11f      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d111      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x20>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e14f      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x2c0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d81c      	bhi.n	8001cce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b05      	subs	r3, #5
 8001ca6:	221f      	movs	r2, #31
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4019      	ands	r1, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b05      	subs	r3, #5
 8001cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
 8001ccc:	e07e      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d81c      	bhi.n	8001d10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b23      	subs	r3, #35	; 0x23
 8001ce8:	221f      	movs	r2, #31
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	4019      	ands	r1, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b23      	subs	r3, #35	; 0x23
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d0e:	e05d      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b12      	cmp	r3, #18
 8001d16:	d81c      	bhi.n	8001d52 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	3b41      	subs	r3, #65	; 0x41
 8001d2a:	221f      	movs	r2, #31
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4019      	ands	r1, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b41      	subs	r3, #65	; 0x41
 8001d44:	fa00 f203 	lsl.w	r2, r0, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001d50:	e03c      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b18      	cmp	r3, #24
 8001d58:	d81c      	bhi.n	8001d94 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b5f      	subs	r3, #95	; 0x5f
 8001d6c:	221f      	movs	r2, #31
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4019      	ands	r1, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b5f      	subs	r3, #95	; 0x5f
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34
 8001d92:	e01b      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b7d      	subs	r3, #125	; 0x7d
 8001da6:	221f      	movs	r2, #31
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4019      	ands	r1, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b7d      	subs	r3, #125	; 0x7d
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b09      	cmp	r3, #9
 8001dd2:	d81a      	bhi.n	8001e0a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6959      	ldr	r1, [r3, #20]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	2207      	movs	r2, #7
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	4019      	ands	r1, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6898      	ldr	r0, [r3, #8]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	e05d      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b13      	cmp	r3, #19
 8001e10:	d81c      	bhi.n	8001e4c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6919      	ldr	r1, [r3, #16]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	3b1e      	subs	r3, #30
 8001e24:	2207      	movs	r2, #7
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4019      	ands	r1, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6898      	ldr	r0, [r3, #8]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b1e      	subs	r3, #30
 8001e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	e03c      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b1d      	cmp	r3, #29
 8001e52:	d81c      	bhi.n	8001e8e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68d9      	ldr	r1, [r3, #12]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	3b3c      	subs	r3, #60	; 0x3c
 8001e66:	2207      	movs	r2, #7
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4019      	ands	r1, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	6898      	ldr	r0, [r3, #8]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b3c      	subs	r3, #60	; 0x3c
 8001e80:	fa00 f203 	lsl.w	r2, r0, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	e01b      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b5a      	subs	r3, #90	; 0x5a
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4019      	ands	r1, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6898      	ldr	r0, [r3, #8]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b5a      	subs	r3, #90	; 0x5a
 8001eba:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d003      	beq.n	8001ed6 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ed2:	2b11      	cmp	r3, #17
 8001ed4:	d121      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_ADC_ConfigChannel+0x2cc>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11b      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_ADC_ConfigChannel+0x2cc>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <HAL_ADC_ConfigChannel+0x2cc>)
 8001ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eec:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d111      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_ADC_ConfigChannel+0x2d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_ADC_ConfigChannel+0x2d4>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	0c9a      	lsrs	r2, r3, #18
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40012700 	.word	0x40012700
 8001f34:	20000000 	.word	0x20000000
 8001f38:	431bde83 	.word	0x431bde83

08001f3c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d043      	beq.n	8001fe2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <ADC_Enable+0xb0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <ADC_Enable+0xb4>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9a      	lsrs	r2, r3, #18
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001f7e:	e002      	b.n	8001f86 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f9      	bne.n	8001f80 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001f8c:	f7ff fbd0 	bl	8001730 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f92:	e01f      	b.n	8001fd4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001f94:	f7ff fbcc 	bl	8001730 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d918      	bls.n	8001fd4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d011      	beq.n	8001fd4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	f043 0210 	orr.w	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e007      	b.n	8001fe4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	d1d8      	bne.n	8001f94 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	431bde83 	.word	0x431bde83

08001ff4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d12e      	bne.n	800206c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800201e:	f7ff fb87 	bl	8001730 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002024:	e01b      	b.n	800205e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002026:	f7ff fb83 	bl	8001730 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d914      	bls.n	800205e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d10d      	bne.n	800205e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e007      	b.n	800206e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d0dc      	beq.n	8002026 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f7ff ff90 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff49 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff5e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff90 	bl	8002130 <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5f 	bl	80020dc <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffb0 	bl	8002194 <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002256:	e160      	b.n	800251a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8152 	beq.w	8002514 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d005      	beq.n	8002288 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002284:	2b02      	cmp	r3, #2
 8002286:	d130      	bne.n	80022ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80022be:	2201      	movs	r2, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 0201 	and.w	r2, r3, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d017      	beq.n	8002326 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d123      	bne.n	800237a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	08da      	lsrs	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3208      	adds	r2, #8
 8002374:	6939      	ldr	r1, [r7, #16]
 8002376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0203 	and.w	r2, r3, #3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80ac 	beq.w	8002514 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023bc:	4b5e      	ldr	r3, [pc, #376]	; (8002538 <HAL_GPIO_Init+0x2f8>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_GPIO_Init+0x2f8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	4b5b      	ldr	r3, [pc, #364]	; (8002538 <HAL_GPIO_Init+0x2f8>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80023d4:	4a59      	ldr	r2, [pc, #356]	; (800253c <HAL_GPIO_Init+0x2fc>)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a51      	ldr	r2, [pc, #324]	; (8002540 <HAL_GPIO_Init+0x300>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d025      	beq.n	800244c <HAL_GPIO_Init+0x20c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_GPIO_Init+0x304>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d01f      	beq.n	8002448 <HAL_GPIO_Init+0x208>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a4f      	ldr	r2, [pc, #316]	; (8002548 <HAL_GPIO_Init+0x308>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d019      	beq.n	8002444 <HAL_GPIO_Init+0x204>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a4e      	ldr	r2, [pc, #312]	; (800254c <HAL_GPIO_Init+0x30c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d013      	beq.n	8002440 <HAL_GPIO_Init+0x200>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a4d      	ldr	r2, [pc, #308]	; (8002550 <HAL_GPIO_Init+0x310>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00d      	beq.n	800243c <HAL_GPIO_Init+0x1fc>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a4c      	ldr	r2, [pc, #304]	; (8002554 <HAL_GPIO_Init+0x314>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <HAL_GPIO_Init+0x1f8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a4b      	ldr	r2, [pc, #300]	; (8002558 <HAL_GPIO_Init+0x318>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_GPIO_Init+0x1f4>
 8002430:	2306      	movs	r3, #6
 8002432:	e00c      	b.n	800244e <HAL_GPIO_Init+0x20e>
 8002434:	2307      	movs	r3, #7
 8002436:	e00a      	b.n	800244e <HAL_GPIO_Init+0x20e>
 8002438:	2305      	movs	r3, #5
 800243a:	e008      	b.n	800244e <HAL_GPIO_Init+0x20e>
 800243c:	2304      	movs	r3, #4
 800243e:	e006      	b.n	800244e <HAL_GPIO_Init+0x20e>
 8002440:	2303      	movs	r3, #3
 8002442:	e004      	b.n	800244e <HAL_GPIO_Init+0x20e>
 8002444:	2302      	movs	r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x20e>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_GPIO_Init+0x20e>
 800244c:	2300      	movs	r3, #0
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800245e:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_GPIO_Init+0x2fc>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_GPIO_Init+0x31c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002490:	4a32      	ldr	r2, [pc, #200]	; (800255c <HAL_GPIO_Init+0x31c>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002496:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_GPIO_Init+0x31c>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024ba:	4a28      	ldr	r2, [pc, #160]	; (800255c <HAL_GPIO_Init+0x31c>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c0:	4b26      	ldr	r3, [pc, #152]	; (800255c <HAL_GPIO_Init+0x31c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_GPIO_Init+0x31c>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_GPIO_Init+0x31c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800250e:	4a13      	ldr	r2, [pc, #76]	; (800255c <HAL_GPIO_Init+0x31c>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f ae97 	bne.w	8002258 <HAL_GPIO_Init+0x18>
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40010000 	.word	0x40010000
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e31d      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a2:	4b94      	ldr	r3, [pc, #592]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ac:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d07b      	beq.n	80026ba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d006      	beq.n	80025d6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d10f      	bne.n	80025ee <HAL_RCC_OscConfig+0x5e>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d10b      	bne.n	80025ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	4b87      	ldr	r3, [pc, #540]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d06a      	beq.n	80026b8 <HAL_RCC_OscConfig+0x128>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d166      	bne.n	80026b8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e2f7      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x74>
 80025f6:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7e      	ldr	r2, [pc, #504]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e02d      	b.n	8002660 <HAL_RCC_OscConfig+0xd0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0x96>
 800260c:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a78      	ldr	r2, [pc, #480]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b76      	ldr	r3, [pc, #472]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a75      	ldr	r2, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0xd0>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b05      	cmp	r3, #5
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0xb8>
 800262e:	4b71      	ldr	r3, [pc, #452]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a70      	ldr	r2, [pc, #448]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b6e      	ldr	r3, [pc, #440]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6d      	ldr	r2, [pc, #436]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0xd0>
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff f862 	bl	8001730 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f85e 	bl	8001730 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e2ad      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002682:	4b5c      	ldr	r3, [pc, #368]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0xe0>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff f84e 	bl	8001730 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff f84a 	bl	8001730 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e299      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026aa:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x108>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d05a      	beq.n	800277c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_OscConfig+0x176>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x160>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e276      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	493d      	ldr	r1, [pc, #244]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002704:	e03a      	b.n	800277c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270e:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <HAL_RCC_OscConfig+0x268>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff f80c 	bl	8001730 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff f808 	bl	8001730 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e257      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	492a      	ldr	r1, [pc, #168]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
 800274e:	e015      	b.n	800277c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_RCC_OscConfig+0x268>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe ffeb 	bl	8001730 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7fe ffe7 	bl	8001730 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e236      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80b8 	beq.w	80028fa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d170      	bne.n	8002872 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x218>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e21a      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d921      	bls.n	80027fc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fc3b 	bl	8003038 <RCC_SetFlashLatencyFromMSIRange>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e208      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4906      	ldr	r1, [pc, #24]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	061b      	lsls	r3, r3, #24
 80027ec:	4901      	ldr	r1, [pc, #4]	; (80027f4 <HAL_RCC_OscConfig+0x264>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
 80027f2:	e020      	b.n	8002836 <HAL_RCC_OscConfig+0x2a6>
 80027f4:	40023800 	.word	0x40023800
 80027f8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027fc:	4b99      	ldr	r3, [pc, #612]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4996      	ldr	r1, [pc, #600]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800280e:	4b95      	ldr	r3, [pc, #596]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	4991      	ldr	r1, [pc, #580]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fc06 	bl	8003038 <RCC_SetFlashLatencyFromMSIRange>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1d3      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	0b5b      	lsrs	r3, r3, #13
 800283c:	3301      	adds	r3, #1
 800283e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	0912      	lsrs	r2, r2, #4
 800284c:	f002 020f 	and.w	r2, r2, #15
 8002850:	4985      	ldr	r1, [pc, #532]	; (8002a68 <HAL_RCC_OscConfig+0x4d8>)
 8002852:	5c8a      	ldrb	r2, [r1, r2]
 8002854:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002856:	4a85      	ldr	r2, [pc, #532]	; (8002a6c <HAL_RCC_OscConfig+0x4dc>)
 8002858:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800285a:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <HAL_RCC_OscConfig+0x4e0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe ff1a 	bl	8001698 <HAL_InitTick>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d045      	beq.n	80028fa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	e1b5      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d029      	beq.n	80028ce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800287a:	4b7e      	ldr	r3, [pc, #504]	; (8002a74 <HAL_RCC_OscConfig+0x4e4>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe ff56 	bl	8001730 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002888:	f7fe ff52 	bl	8001730 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1a1      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800289a:	4b72      	ldr	r3, [pc, #456]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a6:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	496c      	ldr	r1, [pc, #432]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b8:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	4967      	ldr	r1, [pc, #412]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ce:	4b69      	ldr	r3, [pc, #420]	; (8002a74 <HAL_RCC_OscConfig+0x4e4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe ff2c 	bl	8001730 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028dc:	f7fe ff28 	bl	8001730 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e177      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028ee:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d030      	beq.n	8002968 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290e:	4b5a      	ldr	r3, [pc, #360]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002914:	f7fe ff0c 	bl	8001730 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe ff08 	bl	8001730 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e157      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800292e:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x38c>
 800293a:	e015      	b.n	8002968 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293c:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <HAL_RCC_OscConfig+0x4e8>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fef5 	bl	8001730 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe fef1 	bl	8001730 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e140      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800295c:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b5 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10d      	bne.n	80029a2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	4a36      	ldr	r2, [pc, #216]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6253      	str	r3, [r2, #36]	; 0x24
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d118      	bne.n	80029e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a32      	ldr	r2, [pc, #200]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7fe feb9 	bl	8001730 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7fe feb5 	bl	8001730 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	; 0x64
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e104      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x466>
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6353      	str	r3, [r2, #52]	; 0x34
 80029f4:	e02d      	b.n	8002a52 <HAL_RCC_OscConfig+0x4c2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x488>
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a08:	6353      	str	r3, [r2, #52]	; 0x34
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a14:	6353      	str	r3, [r2, #52]	; 0x34
 8002a16:	e01c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4c2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4aa>
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a24:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2a:	6353      	str	r3, [r2, #52]	; 0x34
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a36:	6353      	str	r3, [r2, #52]	; 0x34
 8002a38:	e00b      	b.n	8002a52 <HAL_RCC_OscConfig+0x4c2>
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a44:	6353      	str	r3, [r2, #52]	; 0x34
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <HAL_RCC_OscConfig+0x4d4>)
 8002a4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a50:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d024      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fe69 	bl	8001730 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a60:	e019      	b.n	8002a96 <HAL_RCC_OscConfig+0x506>
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08005ef4 	.word	0x08005ef4
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004
 8002a74:	42470020 	.word	0x42470020
 8002a78:	42470680 	.word	0x42470680
 8002a7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fe56 	bl	8001730 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0a3      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a96:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ee      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4f0>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fe44 	bl	8001730 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe fe40 	bl	8001730 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e08d      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac2:	4b49      	ldr	r3, [pc, #292]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ee      	bne.n	8002aac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	4a43      	ldr	r2, [pc, #268]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d079      	beq.n	8002bdc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d056      	beq.n	8002b9c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d13b      	bne.n	8002b6e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_RCC_OscConfig+0x65c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe fe18 	bl	8001730 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fe14 	bl	8001730 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e063      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b16:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	4319      	orrs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	492b      	ldr	r1, [pc, #172]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b40:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <HAL_RCC_OscConfig+0x65c>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fe fdf3 	bl	8001730 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fe fdef 	bl	8001730 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e03e      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x5be>
 8002b6c:	e036      	b.n	8002bdc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_RCC_OscConfig+0x65c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fddc 	bl	8001730 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fdd8 	bl	8001730 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e027      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5ec>
 8002b9a:	e01f      	b.n	8002bdc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e01a      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_OscConfig+0x658>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	42470060 	.word	0x42470060

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e11a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b8f      	ldr	r3, [pc, #572]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d919      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x34>
 8002c18:	4b8a      	ldr	r3, [pc, #552]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a89      	ldr	r2, [pc, #548]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b87      	ldr	r3, [pc, #540]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 0201 	bic.w	r2, r3, #1
 8002c2c:	4985      	ldr	r1, [pc, #532]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c34:	4b83      	ldr	r3, [pc, #524]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0f9      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c52:	4b7d      	ldr	r3, [pc, #500]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	497a      	ldr	r1, [pc, #488]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 808e 	beq.w	8002d8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c7a:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0d7      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c92:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0cb      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002caa:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0bf      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0b7      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b5f      	ldr	r3, [pc, #380]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	495c      	ldr	r1, [pc, #368]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7fe fd28 	bl	8001730 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d112      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fe fd20 	bl	8001730 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e09b      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d02:	4b51      	ldr	r3, [pc, #324]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d1ee      	bne.n	8002cec <HAL_RCC_ClockConfig+0xfc>
 8002d0e:	e03e      	b.n	8002d8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d112      	bne.n	8002d3e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7fe fd09 	bl	8001730 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e084      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d30:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	d1ee      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x12a>
 8002d3c:	e027      	b.n	8002d8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d11d      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fe fcf2 	bl	8001730 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e06d      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d5e:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d1ee      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x158>
 8002d6a:	e010      	b.n	8002d8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fe fce0 	bl	8001730 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e05b      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ee      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d219      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_ClockConfig+0x1be>
 8002da2:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0201 	bic.w	r2, r3, #1
 8002db6:	4923      	ldr	r1, [pc, #140]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e034      	b.n	8002e3a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4917      	ldr	r1, [pc, #92]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490f      	ldr	r1, [pc, #60]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f823 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_RCC_ClockConfig+0x258>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490b      	ldr	r1, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_ClockConfig+0x264>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fc32 	bl	8001698 <HAL_InitTick>
 8002e34:	4603      	mov	r3, r0
 8002e36:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e38:	7afb      	ldrb	r3, [r7, #11]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023c00 	.word	0x40023c00
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08005ef4 	.word	0x08005ef4
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e5c:	b08e      	sub	sp, #56	; 0x38
 8002e5e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e60:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d00d      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x34>
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	f200 8092 	bhi.w	8002f9a <HAL_RCC_GetSysClockFreq+0x142>
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d002      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x28>
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d003      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x2e>
 8002e7e:	e08c      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e80:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x170>)
 8002e82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e84:	e097      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e86:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x174>)
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e8a:	e094      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	4b4e      	ldr	r3, [pc, #312]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x178>)
 8002e96:	5c9b      	ldrb	r3, [r3, r2]
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	0d9b      	lsrs	r3, r3, #22
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d021      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	61fa      	str	r2, [r7, #28]
 8002eba:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x174>)
 8002ebc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002ec0:	464a      	mov	r2, r9
 8002ec2:	fb03 f202 	mul.w	r2, r3, r2
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	4644      	mov	r4, r8
 8002eca:	fb04 f303 	mul.w	r3, r4, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a3e      	ldr	r2, [pc, #248]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x174>)
 8002ed2:	4644      	mov	r4, r8
 8002ed4:	fba4 0102 	umull	r0, r1, r4, r2
 8002ed8:	440b      	add	r3, r1
 8002eda:	4619      	mov	r1, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	2200      	movs	r2, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	617a      	str	r2, [r7, #20]
 8002ee4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ee8:	f7fd feea 	bl	8000cc0 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef4:	e04e      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	469a      	mov	sl, r3
 8002efc:	4693      	mov	fp, r2
 8002efe:	4652      	mov	r2, sl
 8002f00:	465b      	mov	r3, fp
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	ebb2 080a 	subs.w	r8, r2, sl
 8002f1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f32:	ebb2 0408 	subs.w	r4, r2, r8
 8002f36:	eb63 0509 	sbc.w	r5, r3, r9
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	00eb      	lsls	r3, r5, #3
 8002f44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f48:	00e2      	lsls	r2, r4, #3
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	eb14 030a 	adds.w	r3, r4, sl
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	eb45 030b 	adc.w	r3, r5, fp
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f66:	4629      	mov	r1, r5
 8002f68:	028b      	lsls	r3, r1, #10
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4604      	mov	r4, r0
 8002f70:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002f74:	4601      	mov	r1, r0
 8002f76:	028a      	lsls	r2, r1, #10
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	60fa      	str	r2, [r7, #12]
 8002f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f88:	f7fd fe9a 	bl	8000cc0 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f98:	e00d      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	0b5b      	lsrs	r3, r3, #13
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3738      	adds	r7, #56	; 0x38
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	00f42400 	.word	0x00f42400
 8002fcc:	016e3600 	.word	0x016e3600
 8002fd0:	08005ee8 	.word	0x08005ee8

08002fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b02      	ldr	r3, [pc, #8]	; (8002fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	20000000 	.word	0x20000000

08002fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fec:	f7ff fff2 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	; (800300c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800
 800300c:	08005f04 	.word	0x08005f04

08003010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003014:	f7ff ffde 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0adb      	lsrs	r3, r3, #11
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	; (8003034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	08005f04 	.word	0x08005f04

08003038 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003044:	4b29      	ldr	r3, [pc, #164]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d12c      	bne.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e016      	b.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b20      	ldr	r3, [pc, #128]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6253      	str	r3, [r2, #36]	; 0x24
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003088:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800308a:	4b18      	ldr	r3, [pc, #96]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	4a17      	ldr	r2, [pc, #92]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003094:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800309c:	d105      	bne.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x72>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030a4:	d101      	bne.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80030a6:	2301      	movs	r3, #1
 80030a8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 0201 	bic.w	r2, r3, #1
 80030c4:	490b      	ldr	r1, [pc, #44]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40007000 	.word	0x40007000
 80030f4:	40023c00 	.word	0x40023c00

080030f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e042      	b.n	8003190 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe f966 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	; 0x24
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800313a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f91d 	bl	800337c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	; 0x28
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d16d      	bne.n	8003294 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Transmit+0x2c>
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e066      	b.n	8003296 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2221      	movs	r2, #33	; 0x21
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031d6:	f7fe faab 	bl	8001730 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	88fa      	ldrh	r2, [r7, #6]
 80031e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f0:	d108      	bne.n	8003204 <HAL_UART_Transmit+0x6c>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	e003      	b.n	800320c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003208:	2300      	movs	r3, #0
 800320a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800320c:	e02a      	b.n	8003264 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	2180      	movs	r1, #128	; 0x80
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f840 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e036      	b.n	8003296 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800323c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	3302      	adds	r3, #2
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e007      	b.n	8003256 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	3301      	adds	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1cf      	bne.n	800320e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f810 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e006      	b.n	8003296 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b090      	sub	sp, #64	; 0x40
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ae:	e050      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d04c      	beq.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <UART_WaitOnFlagUntilTimeout+0x30>
 80032be:	f7fe fa37 	bl	8001730 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d241      	bcs.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ee:	637a      	str	r2, [r7, #52]	; 0x34
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3314      	adds	r3, #20
 8003308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	613b      	str	r3, [r7, #16]
   return(result);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3314      	adds	r3, #20
 8003320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003322:	623a      	str	r2, [r7, #32]
 8003324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	69f9      	ldr	r1, [r7, #28]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e5      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e00f      	b.n	8003372 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4013      	ands	r3, r2
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	429a      	cmp	r2, r3
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	429a      	cmp	r2, r3
 800336e:	d09f      	beq.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3740      	adds	r7, #64	; 0x40
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033bc:	f023 030c 	bic.w	r3, r3, #12
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	430b      	orrs	r3, r1
 80033c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699a      	ldr	r2, [r3, #24]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a55      	ldr	r2, [pc, #340]	; (800353c <UART_SetConfig+0x1c0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d103      	bne.n	80033f2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033ea:	f7ff fe11 	bl	8003010 <HAL_RCC_GetPCLK2Freq>
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	e002      	b.n	80033f8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033f2:	f7ff fdf9 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 80033f6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003400:	d14c      	bne.n	800349c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009a      	lsls	r2, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	4a49      	ldr	r2, [pc, #292]	; (8003540 <UART_SetConfig+0x1c4>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	0119      	lsls	r1, r3, #4
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fbb2 f2f3 	udiv	r2, r2, r3
 8003438:	4b41      	ldr	r3, [pc, #260]	; (8003540 <UART_SetConfig+0x1c4>)
 800343a:	fba3 0302 	umull	r0, r3, r3, r2
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2064      	movs	r0, #100	; 0x64
 8003442:	fb00 f303 	mul.w	r3, r0, r3
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	3332      	adds	r3, #50	; 0x32
 800344c:	4a3c      	ldr	r2, [pc, #240]	; (8003540 <UART_SetConfig+0x1c4>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800345a:	4419      	add	r1, r3
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	009a      	lsls	r2, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003472:	4b33      	ldr	r3, [pc, #204]	; (8003540 <UART_SetConfig+0x1c4>)
 8003474:	fba3 0302 	umull	r0, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	2064      	movs	r0, #100	; 0x64
 800347c:	fb00 f303 	mul.w	r3, r0, r3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	3332      	adds	r3, #50	; 0x32
 8003486:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <UART_SetConfig+0x1c4>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f003 0207 	and.w	r2, r3, #7
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	440a      	add	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800349a:	e04a      	b.n	8003532 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009a      	lsls	r2, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4a23      	ldr	r2, [pc, #140]	; (8003540 <UART_SetConfig+0x1c4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	0119      	lsls	r1, r3, #4
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009a      	lsls	r2, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d2:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <UART_SetConfig+0x1c4>)
 80034d4:	fba3 0302 	umull	r0, r3, r3, r2
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	2064      	movs	r0, #100	; 0x64
 80034dc:	fb00 f303 	mul.w	r3, r0, r3
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	3332      	adds	r3, #50	; 0x32
 80034e6:	4a16      	ldr	r2, [pc, #88]	; (8003540 <UART_SetConfig+0x1c4>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f2:	4419      	add	r1, r3
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009a      	lsls	r2, r3, #2
 80034fe:	441a      	add	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	fbb2 f2f3 	udiv	r2, r2, r3
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <UART_SetConfig+0x1c4>)
 800350c:	fba3 0302 	umull	r0, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2064      	movs	r0, #100	; 0x64
 8003514:	fb00 f303 	mul.w	r3, r0, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	3332      	adds	r3, #50	; 0x32
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <UART_SetConfig+0x1c4>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	440a      	add	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40013800 	.word	0x40013800
 8003540:	51eb851f 	.word	0x51eb851f

08003544 <__cvt>:
 8003544:	2b00      	cmp	r3, #0
 8003546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354a:	461f      	mov	r7, r3
 800354c:	bfbb      	ittet	lt
 800354e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003552:	461f      	movlt	r7, r3
 8003554:	2300      	movge	r3, #0
 8003556:	232d      	movlt	r3, #45	; 0x2d
 8003558:	b088      	sub	sp, #32
 800355a:	4614      	mov	r4, r2
 800355c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800355e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003560:	7013      	strb	r3, [r2, #0]
 8003562:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003564:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003568:	f023 0820 	bic.w	r8, r3, #32
 800356c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003570:	d005      	beq.n	800357e <__cvt+0x3a>
 8003572:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003576:	d100      	bne.n	800357a <__cvt+0x36>
 8003578:	3501      	adds	r5, #1
 800357a:	2302      	movs	r3, #2
 800357c:	e000      	b.n	8003580 <__cvt+0x3c>
 800357e:	2303      	movs	r3, #3
 8003580:	aa07      	add	r2, sp, #28
 8003582:	9204      	str	r2, [sp, #16]
 8003584:	aa06      	add	r2, sp, #24
 8003586:	e9cd a202 	strd	sl, r2, [sp, #8]
 800358a:	e9cd 3500 	strd	r3, r5, [sp]
 800358e:	4622      	mov	r2, r4
 8003590:	463b      	mov	r3, r7
 8003592:	f000 fe65 	bl	8004260 <_dtoa_r>
 8003596:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800359a:	4606      	mov	r6, r0
 800359c:	d102      	bne.n	80035a4 <__cvt+0x60>
 800359e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035a0:	07db      	lsls	r3, r3, #31
 80035a2:	d522      	bpl.n	80035ea <__cvt+0xa6>
 80035a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035a8:	eb06 0905 	add.w	r9, r6, r5
 80035ac:	d110      	bne.n	80035d0 <__cvt+0x8c>
 80035ae:	7833      	ldrb	r3, [r6, #0]
 80035b0:	2b30      	cmp	r3, #48	; 0x30
 80035b2:	d10a      	bne.n	80035ca <__cvt+0x86>
 80035b4:	2200      	movs	r2, #0
 80035b6:	2300      	movs	r3, #0
 80035b8:	4620      	mov	r0, r4
 80035ba:	4639      	mov	r1, r7
 80035bc:	f7fd fac0 	bl	8000b40 <__aeabi_dcmpeq>
 80035c0:	b918      	cbnz	r0, 80035ca <__cvt+0x86>
 80035c2:	f1c5 0501 	rsb	r5, r5, #1
 80035c6:	f8ca 5000 	str.w	r5, [sl]
 80035ca:	f8da 3000 	ldr.w	r3, [sl]
 80035ce:	4499      	add	r9, r3
 80035d0:	2200      	movs	r2, #0
 80035d2:	2300      	movs	r3, #0
 80035d4:	4620      	mov	r0, r4
 80035d6:	4639      	mov	r1, r7
 80035d8:	f7fd fab2 	bl	8000b40 <__aeabi_dcmpeq>
 80035dc:	b108      	cbz	r0, 80035e2 <__cvt+0x9e>
 80035de:	f8cd 901c 	str.w	r9, [sp, #28]
 80035e2:	2230      	movs	r2, #48	; 0x30
 80035e4:	9b07      	ldr	r3, [sp, #28]
 80035e6:	454b      	cmp	r3, r9
 80035e8:	d307      	bcc.n	80035fa <__cvt+0xb6>
 80035ea:	4630      	mov	r0, r6
 80035ec:	9b07      	ldr	r3, [sp, #28]
 80035ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80035f0:	1b9b      	subs	r3, r3, r6
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	b008      	add	sp, #32
 80035f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	9107      	str	r1, [sp, #28]
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e7f0      	b.n	80035e4 <__cvt+0xa0>

08003602 <__exponent>:
 8003602:	4603      	mov	r3, r0
 8003604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003606:	2900      	cmp	r1, #0
 8003608:	f803 2b02 	strb.w	r2, [r3], #2
 800360c:	bfb6      	itet	lt
 800360e:	222d      	movlt	r2, #45	; 0x2d
 8003610:	222b      	movge	r2, #43	; 0x2b
 8003612:	4249      	neglt	r1, r1
 8003614:	2909      	cmp	r1, #9
 8003616:	7042      	strb	r2, [r0, #1]
 8003618:	dd2a      	ble.n	8003670 <__exponent+0x6e>
 800361a:	f10d 0207 	add.w	r2, sp, #7
 800361e:	4617      	mov	r7, r2
 8003620:	260a      	movs	r6, #10
 8003622:	fb91 f5f6 	sdiv	r5, r1, r6
 8003626:	4694      	mov	ip, r2
 8003628:	fb06 1415 	mls	r4, r6, r5, r1
 800362c:	3430      	adds	r4, #48	; 0x30
 800362e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003632:	460c      	mov	r4, r1
 8003634:	2c63      	cmp	r4, #99	; 0x63
 8003636:	4629      	mov	r1, r5
 8003638:	f102 32ff 	add.w	r2, r2, #4294967295
 800363c:	dcf1      	bgt.n	8003622 <__exponent+0x20>
 800363e:	3130      	adds	r1, #48	; 0x30
 8003640:	f1ac 0402 	sub.w	r4, ip, #2
 8003644:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003648:	4622      	mov	r2, r4
 800364a:	1c41      	adds	r1, r0, #1
 800364c:	42ba      	cmp	r2, r7
 800364e:	d30a      	bcc.n	8003666 <__exponent+0x64>
 8003650:	f10d 0209 	add.w	r2, sp, #9
 8003654:	eba2 020c 	sub.w	r2, r2, ip
 8003658:	42bc      	cmp	r4, r7
 800365a:	bf88      	it	hi
 800365c:	2200      	movhi	r2, #0
 800365e:	4413      	add	r3, r2
 8003660:	1a18      	subs	r0, r3, r0
 8003662:	b003      	add	sp, #12
 8003664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003666:	f812 5b01 	ldrb.w	r5, [r2], #1
 800366a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800366e:	e7ed      	b.n	800364c <__exponent+0x4a>
 8003670:	2330      	movs	r3, #48	; 0x30
 8003672:	3130      	adds	r1, #48	; 0x30
 8003674:	7083      	strb	r3, [r0, #2]
 8003676:	70c1      	strb	r1, [r0, #3]
 8003678:	1d03      	adds	r3, r0, #4
 800367a:	e7f1      	b.n	8003660 <__exponent+0x5e>

0800367c <_printf_float>:
 800367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003680:	b091      	sub	sp, #68	; 0x44
 8003682:	460c      	mov	r4, r1
 8003684:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003688:	4616      	mov	r6, r2
 800368a:	461f      	mov	r7, r3
 800368c:	4605      	mov	r5, r0
 800368e:	f000 fcd7 	bl	8004040 <_localeconv_r>
 8003692:	6803      	ldr	r3, [r0, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	9309      	str	r3, [sp, #36]	; 0x24
 8003698:	f7fc fd72 	bl	8000180 <strlen>
 800369c:	2300      	movs	r3, #0
 800369e:	930e      	str	r3, [sp, #56]	; 0x38
 80036a0:	f8d8 3000 	ldr.w	r3, [r8]
 80036a4:	900a      	str	r0, [sp, #40]	; 0x28
 80036a6:	3307      	adds	r3, #7
 80036a8:	f023 0307 	bic.w	r3, r3, #7
 80036ac:	f103 0208 	add.w	r2, r3, #8
 80036b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80036b4:	f8d4 b000 	ldr.w	fp, [r4]
 80036b8:	f8c8 2000 	str.w	r2, [r8]
 80036bc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80036c0:	4652      	mov	r2, sl
 80036c2:	4643      	mov	r3, r8
 80036c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80036c8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80036cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295
 80036d2:	4650      	mov	r0, sl
 80036d4:	4b9c      	ldr	r3, [pc, #624]	; (8003948 <_printf_float+0x2cc>)
 80036d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036d8:	f7fd fa64 	bl	8000ba4 <__aeabi_dcmpun>
 80036dc:	bb70      	cbnz	r0, 800373c <_printf_float+0xc0>
 80036de:	f04f 32ff 	mov.w	r2, #4294967295
 80036e2:	4650      	mov	r0, sl
 80036e4:	4b98      	ldr	r3, [pc, #608]	; (8003948 <_printf_float+0x2cc>)
 80036e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036e8:	f7fd fa3e 	bl	8000b68 <__aeabi_dcmple>
 80036ec:	bb30      	cbnz	r0, 800373c <_printf_float+0xc0>
 80036ee:	2200      	movs	r2, #0
 80036f0:	2300      	movs	r3, #0
 80036f2:	4650      	mov	r0, sl
 80036f4:	4641      	mov	r1, r8
 80036f6:	f7fd fa2d 	bl	8000b54 <__aeabi_dcmplt>
 80036fa:	b110      	cbz	r0, 8003702 <_printf_float+0x86>
 80036fc:	232d      	movs	r3, #45	; 0x2d
 80036fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003702:	4a92      	ldr	r2, [pc, #584]	; (800394c <_printf_float+0x2d0>)
 8003704:	4b92      	ldr	r3, [pc, #584]	; (8003950 <_printf_float+0x2d4>)
 8003706:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800370a:	bf94      	ite	ls
 800370c:	4690      	movls	r8, r2
 800370e:	4698      	movhi	r8, r3
 8003710:	2303      	movs	r3, #3
 8003712:	f04f 0a00 	mov.w	sl, #0
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	f02b 0304 	bic.w	r3, fp, #4
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	4633      	mov	r3, r6
 8003720:	4621      	mov	r1, r4
 8003722:	4628      	mov	r0, r5
 8003724:	9700      	str	r7, [sp, #0]
 8003726:	aa0f      	add	r2, sp, #60	; 0x3c
 8003728:	f000 f9d6 	bl	8003ad8 <_printf_common>
 800372c:	3001      	adds	r0, #1
 800372e:	f040 8090 	bne.w	8003852 <_printf_float+0x1d6>
 8003732:	f04f 30ff 	mov.w	r0, #4294967295
 8003736:	b011      	add	sp, #68	; 0x44
 8003738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800373c:	4652      	mov	r2, sl
 800373e:	4643      	mov	r3, r8
 8003740:	4650      	mov	r0, sl
 8003742:	4641      	mov	r1, r8
 8003744:	f7fd fa2e 	bl	8000ba4 <__aeabi_dcmpun>
 8003748:	b148      	cbz	r0, 800375e <_printf_float+0xe2>
 800374a:	f1b8 0f00 	cmp.w	r8, #0
 800374e:	bfb8      	it	lt
 8003750:	232d      	movlt	r3, #45	; 0x2d
 8003752:	4a80      	ldr	r2, [pc, #512]	; (8003954 <_printf_float+0x2d8>)
 8003754:	bfb8      	it	lt
 8003756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800375a:	4b7f      	ldr	r3, [pc, #508]	; (8003958 <_printf_float+0x2dc>)
 800375c:	e7d3      	b.n	8003706 <_printf_float+0x8a>
 800375e:	6863      	ldr	r3, [r4, #4]
 8003760:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	d142      	bne.n	80037ee <_printf_float+0x172>
 8003768:	2306      	movs	r3, #6
 800376a:	6063      	str	r3, [r4, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	9206      	str	r2, [sp, #24]
 8003770:	aa0e      	add	r2, sp, #56	; 0x38
 8003772:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003776:	aa0d      	add	r2, sp, #52	; 0x34
 8003778:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800377c:	9203      	str	r2, [sp, #12]
 800377e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003782:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	6863      	ldr	r3, [r4, #4]
 800378a:	4652      	mov	r2, sl
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4628      	mov	r0, r5
 8003790:	4643      	mov	r3, r8
 8003792:	910b      	str	r1, [sp, #44]	; 0x2c
 8003794:	f7ff fed6 	bl	8003544 <__cvt>
 8003798:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800379a:	4680      	mov	r8, r0
 800379c:	2947      	cmp	r1, #71	; 0x47
 800379e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80037a0:	d108      	bne.n	80037b4 <_printf_float+0x138>
 80037a2:	1cc8      	adds	r0, r1, #3
 80037a4:	db02      	blt.n	80037ac <_printf_float+0x130>
 80037a6:	6863      	ldr	r3, [r4, #4]
 80037a8:	4299      	cmp	r1, r3
 80037aa:	dd40      	ble.n	800382e <_printf_float+0x1b2>
 80037ac:	f1a9 0902 	sub.w	r9, r9, #2
 80037b0:	fa5f f989 	uxtb.w	r9, r9
 80037b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80037b8:	d81f      	bhi.n	80037fa <_printf_float+0x17e>
 80037ba:	464a      	mov	r2, r9
 80037bc:	3901      	subs	r1, #1
 80037be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80037c2:	910d      	str	r1, [sp, #52]	; 0x34
 80037c4:	f7ff ff1d 	bl	8003602 <__exponent>
 80037c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037ca:	4682      	mov	sl, r0
 80037cc:	1813      	adds	r3, r2, r0
 80037ce:	2a01      	cmp	r2, #1
 80037d0:	6123      	str	r3, [r4, #16]
 80037d2:	dc02      	bgt.n	80037da <_printf_float+0x15e>
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	07d2      	lsls	r2, r2, #31
 80037d8:	d501      	bpl.n	80037de <_printf_float+0x162>
 80037da:	3301      	adds	r3, #1
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d09b      	beq.n	800371e <_printf_float+0xa2>
 80037e6:	232d      	movs	r3, #45	; 0x2d
 80037e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ec:	e797      	b.n	800371e <_printf_float+0xa2>
 80037ee:	2947      	cmp	r1, #71	; 0x47
 80037f0:	d1bc      	bne.n	800376c <_printf_float+0xf0>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ba      	bne.n	800376c <_printf_float+0xf0>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e7b7      	b.n	800376a <_printf_float+0xee>
 80037fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80037fe:	d118      	bne.n	8003832 <_printf_float+0x1b6>
 8003800:	2900      	cmp	r1, #0
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	dd0b      	ble.n	800381e <_printf_float+0x1a2>
 8003806:	6121      	str	r1, [r4, #16]
 8003808:	b913      	cbnz	r3, 8003810 <_printf_float+0x194>
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	07d0      	lsls	r0, r2, #31
 800380e:	d502      	bpl.n	8003816 <_printf_float+0x19a>
 8003810:	3301      	adds	r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	f04f 0a00 	mov.w	sl, #0
 800381a:	65a1      	str	r1, [r4, #88]	; 0x58
 800381c:	e7df      	b.n	80037de <_printf_float+0x162>
 800381e:	b913      	cbnz	r3, 8003826 <_printf_float+0x1aa>
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	07d2      	lsls	r2, r2, #31
 8003824:	d501      	bpl.n	800382a <_printf_float+0x1ae>
 8003826:	3302      	adds	r3, #2
 8003828:	e7f4      	b.n	8003814 <_printf_float+0x198>
 800382a:	2301      	movs	r3, #1
 800382c:	e7f2      	b.n	8003814 <_printf_float+0x198>
 800382e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003834:	4299      	cmp	r1, r3
 8003836:	db05      	blt.n	8003844 <_printf_float+0x1c8>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	6121      	str	r1, [r4, #16]
 800383c:	07d8      	lsls	r0, r3, #31
 800383e:	d5ea      	bpl.n	8003816 <_printf_float+0x19a>
 8003840:	1c4b      	adds	r3, r1, #1
 8003842:	e7e7      	b.n	8003814 <_printf_float+0x198>
 8003844:	2900      	cmp	r1, #0
 8003846:	bfcc      	ite	gt
 8003848:	2201      	movgt	r2, #1
 800384a:	f1c1 0202 	rsble	r2, r1, #2
 800384e:	4413      	add	r3, r2
 8003850:	e7e0      	b.n	8003814 <_printf_float+0x198>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	055a      	lsls	r2, r3, #21
 8003856:	d407      	bmi.n	8003868 <_printf_float+0x1ec>
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	4642      	mov	r2, r8
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	d12b      	bne.n	80038be <_printf_float+0x242>
 8003866:	e764      	b.n	8003732 <_printf_float+0xb6>
 8003868:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800386c:	f240 80dd 	bls.w	8003a2a <_printf_float+0x3ae>
 8003870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003874:	2200      	movs	r2, #0
 8003876:	2300      	movs	r3, #0
 8003878:	f7fd f962 	bl	8000b40 <__aeabi_dcmpeq>
 800387c:	2800      	cmp	r0, #0
 800387e:	d033      	beq.n	80038e8 <_printf_float+0x26c>
 8003880:	2301      	movs	r3, #1
 8003882:	4631      	mov	r1, r6
 8003884:	4628      	mov	r0, r5
 8003886:	4a35      	ldr	r2, [pc, #212]	; (800395c <_printf_float+0x2e0>)
 8003888:	47b8      	blx	r7
 800388a:	3001      	adds	r0, #1
 800388c:	f43f af51 	beq.w	8003732 <_printf_float+0xb6>
 8003890:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003894:	429a      	cmp	r2, r3
 8003896:	db02      	blt.n	800389e <_printf_float+0x222>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	07d8      	lsls	r0, r3, #31
 800389c:	d50f      	bpl.n	80038be <_printf_float+0x242>
 800389e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038a2:	4631      	mov	r1, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	47b8      	blx	r7
 80038a8:	3001      	adds	r0, #1
 80038aa:	f43f af42 	beq.w	8003732 <_printf_float+0xb6>
 80038ae:	f04f 0800 	mov.w	r8, #0
 80038b2:	f104 091a 	add.w	r9, r4, #26
 80038b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038b8:	3b01      	subs	r3, #1
 80038ba:	4543      	cmp	r3, r8
 80038bc:	dc09      	bgt.n	80038d2 <_printf_float+0x256>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	079b      	lsls	r3, r3, #30
 80038c2:	f100 8104 	bmi.w	8003ace <_printf_float+0x452>
 80038c6:	68e0      	ldr	r0, [r4, #12]
 80038c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038ca:	4298      	cmp	r0, r3
 80038cc:	bfb8      	it	lt
 80038ce:	4618      	movlt	r0, r3
 80038d0:	e731      	b.n	8003736 <_printf_float+0xba>
 80038d2:	2301      	movs	r3, #1
 80038d4:	464a      	mov	r2, r9
 80038d6:	4631      	mov	r1, r6
 80038d8:	4628      	mov	r0, r5
 80038da:	47b8      	blx	r7
 80038dc:	3001      	adds	r0, #1
 80038de:	f43f af28 	beq.w	8003732 <_printf_float+0xb6>
 80038e2:	f108 0801 	add.w	r8, r8, #1
 80038e6:	e7e6      	b.n	80038b6 <_printf_float+0x23a>
 80038e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	dc38      	bgt.n	8003960 <_printf_float+0x2e4>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4631      	mov	r1, r6
 80038f2:	4628      	mov	r0, r5
 80038f4:	4a19      	ldr	r2, [pc, #100]	; (800395c <_printf_float+0x2e0>)
 80038f6:	47b8      	blx	r7
 80038f8:	3001      	adds	r0, #1
 80038fa:	f43f af1a 	beq.w	8003732 <_printf_float+0xb6>
 80038fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003902:	4313      	orrs	r3, r2
 8003904:	d102      	bne.n	800390c <_printf_float+0x290>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	07d9      	lsls	r1, r3, #31
 800390a:	d5d8      	bpl.n	80038be <_printf_float+0x242>
 800390c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003910:	4631      	mov	r1, r6
 8003912:	4628      	mov	r0, r5
 8003914:	47b8      	blx	r7
 8003916:	3001      	adds	r0, #1
 8003918:	f43f af0b 	beq.w	8003732 <_printf_float+0xb6>
 800391c:	f04f 0900 	mov.w	r9, #0
 8003920:	f104 0a1a 	add.w	sl, r4, #26
 8003924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003926:	425b      	negs	r3, r3
 8003928:	454b      	cmp	r3, r9
 800392a:	dc01      	bgt.n	8003930 <_printf_float+0x2b4>
 800392c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800392e:	e794      	b.n	800385a <_printf_float+0x1de>
 8003930:	2301      	movs	r3, #1
 8003932:	4652      	mov	r2, sl
 8003934:	4631      	mov	r1, r6
 8003936:	4628      	mov	r0, r5
 8003938:	47b8      	blx	r7
 800393a:	3001      	adds	r0, #1
 800393c:	f43f aef9 	beq.w	8003732 <_printf_float+0xb6>
 8003940:	f109 0901 	add.w	r9, r9, #1
 8003944:	e7ee      	b.n	8003924 <_printf_float+0x2a8>
 8003946:	bf00      	nop
 8003948:	7fefffff 	.word	0x7fefffff
 800394c:	08005f0c 	.word	0x08005f0c
 8003950:	08005f10 	.word	0x08005f10
 8003954:	08005f14 	.word	0x08005f14
 8003958:	08005f18 	.word	0x08005f18
 800395c:	08005f1c 	.word	0x08005f1c
 8003960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003964:	429a      	cmp	r2, r3
 8003966:	bfa8      	it	ge
 8003968:	461a      	movge	r2, r3
 800396a:	2a00      	cmp	r2, #0
 800396c:	4691      	mov	r9, r2
 800396e:	dc37      	bgt.n	80039e0 <_printf_float+0x364>
 8003970:	f04f 0b00 	mov.w	fp, #0
 8003974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003978:	f104 021a 	add.w	r2, r4, #26
 800397c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003980:	ebaa 0309 	sub.w	r3, sl, r9
 8003984:	455b      	cmp	r3, fp
 8003986:	dc33      	bgt.n	80039f0 <_printf_float+0x374>
 8003988:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800398c:	429a      	cmp	r2, r3
 800398e:	db3b      	blt.n	8003a08 <_printf_float+0x38c>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	07da      	lsls	r2, r3, #31
 8003994:	d438      	bmi.n	8003a08 <_printf_float+0x38c>
 8003996:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800399a:	eba2 0903 	sub.w	r9, r2, r3
 800399e:	eba2 020a 	sub.w	r2, r2, sl
 80039a2:	4591      	cmp	r9, r2
 80039a4:	bfa8      	it	ge
 80039a6:	4691      	movge	r9, r2
 80039a8:	f1b9 0f00 	cmp.w	r9, #0
 80039ac:	dc34      	bgt.n	8003a18 <_printf_float+0x39c>
 80039ae:	f04f 0800 	mov.w	r8, #0
 80039b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039b6:	f104 0a1a 	add.w	sl, r4, #26
 80039ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	eba3 0309 	sub.w	r3, r3, r9
 80039c4:	4543      	cmp	r3, r8
 80039c6:	f77f af7a 	ble.w	80038be <_printf_float+0x242>
 80039ca:	2301      	movs	r3, #1
 80039cc:	4652      	mov	r2, sl
 80039ce:	4631      	mov	r1, r6
 80039d0:	4628      	mov	r0, r5
 80039d2:	47b8      	blx	r7
 80039d4:	3001      	adds	r0, #1
 80039d6:	f43f aeac 	beq.w	8003732 <_printf_float+0xb6>
 80039da:	f108 0801 	add.w	r8, r8, #1
 80039de:	e7ec      	b.n	80039ba <_printf_float+0x33e>
 80039e0:	4613      	mov	r3, r2
 80039e2:	4631      	mov	r1, r6
 80039e4:	4642      	mov	r2, r8
 80039e6:	4628      	mov	r0, r5
 80039e8:	47b8      	blx	r7
 80039ea:	3001      	adds	r0, #1
 80039ec:	d1c0      	bne.n	8003970 <_printf_float+0x2f4>
 80039ee:	e6a0      	b.n	8003732 <_printf_float+0xb6>
 80039f0:	2301      	movs	r3, #1
 80039f2:	4631      	mov	r1, r6
 80039f4:	4628      	mov	r0, r5
 80039f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80039f8:	47b8      	blx	r7
 80039fa:	3001      	adds	r0, #1
 80039fc:	f43f ae99 	beq.w	8003732 <_printf_float+0xb6>
 8003a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a02:	f10b 0b01 	add.w	fp, fp, #1
 8003a06:	e7b9      	b.n	800397c <_printf_float+0x300>
 8003a08:	4631      	mov	r1, r6
 8003a0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a0e:	4628      	mov	r0, r5
 8003a10:	47b8      	blx	r7
 8003a12:	3001      	adds	r0, #1
 8003a14:	d1bf      	bne.n	8003996 <_printf_float+0x31a>
 8003a16:	e68c      	b.n	8003732 <_printf_float+0xb6>
 8003a18:	464b      	mov	r3, r9
 8003a1a:	4631      	mov	r1, r6
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	eb08 020a 	add.w	r2, r8, sl
 8003a22:	47b8      	blx	r7
 8003a24:	3001      	adds	r0, #1
 8003a26:	d1c2      	bne.n	80039ae <_printf_float+0x332>
 8003a28:	e683      	b.n	8003732 <_printf_float+0xb6>
 8003a2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a2c:	2a01      	cmp	r2, #1
 8003a2e:	dc01      	bgt.n	8003a34 <_printf_float+0x3b8>
 8003a30:	07db      	lsls	r3, r3, #31
 8003a32:	d539      	bpl.n	8003aa8 <_printf_float+0x42c>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4642      	mov	r2, r8
 8003a38:	4631      	mov	r1, r6
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	47b8      	blx	r7
 8003a3e:	3001      	adds	r0, #1
 8003a40:	f43f ae77 	beq.w	8003732 <_printf_float+0xb6>
 8003a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a48:	4631      	mov	r1, r6
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	47b8      	blx	r7
 8003a4e:	3001      	adds	r0, #1
 8003a50:	f43f ae6f 	beq.w	8003732 <_printf_float+0xb6>
 8003a54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003a60:	f7fd f86e 	bl	8000b40 <__aeabi_dcmpeq>
 8003a64:	b9d8      	cbnz	r0, 8003a9e <_printf_float+0x422>
 8003a66:	f109 33ff 	add.w	r3, r9, #4294967295
 8003a6a:	f108 0201 	add.w	r2, r8, #1
 8003a6e:	4631      	mov	r1, r6
 8003a70:	4628      	mov	r0, r5
 8003a72:	47b8      	blx	r7
 8003a74:	3001      	adds	r0, #1
 8003a76:	d10e      	bne.n	8003a96 <_printf_float+0x41a>
 8003a78:	e65b      	b.n	8003732 <_printf_float+0xb6>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	464a      	mov	r2, r9
 8003a7e:	4631      	mov	r1, r6
 8003a80:	4628      	mov	r0, r5
 8003a82:	47b8      	blx	r7
 8003a84:	3001      	adds	r0, #1
 8003a86:	f43f ae54 	beq.w	8003732 <_printf_float+0xb6>
 8003a8a:	f108 0801 	add.w	r8, r8, #1
 8003a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a90:	3b01      	subs	r3, #1
 8003a92:	4543      	cmp	r3, r8
 8003a94:	dcf1      	bgt.n	8003a7a <_printf_float+0x3fe>
 8003a96:	4653      	mov	r3, sl
 8003a98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a9c:	e6de      	b.n	800385c <_printf_float+0x1e0>
 8003a9e:	f04f 0800 	mov.w	r8, #0
 8003aa2:	f104 091a 	add.w	r9, r4, #26
 8003aa6:	e7f2      	b.n	8003a8e <_printf_float+0x412>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	4642      	mov	r2, r8
 8003aac:	e7df      	b.n	8003a6e <_printf_float+0x3f2>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	464a      	mov	r2, r9
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	47b8      	blx	r7
 8003ab8:	3001      	adds	r0, #1
 8003aba:	f43f ae3a 	beq.w	8003732 <_printf_float+0xb6>
 8003abe:	f108 0801 	add.w	r8, r8, #1
 8003ac2:	68e3      	ldr	r3, [r4, #12]
 8003ac4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ac6:	1a5b      	subs	r3, r3, r1
 8003ac8:	4543      	cmp	r3, r8
 8003aca:	dcf0      	bgt.n	8003aae <_printf_float+0x432>
 8003acc:	e6fb      	b.n	80038c6 <_printf_float+0x24a>
 8003ace:	f04f 0800 	mov.w	r8, #0
 8003ad2:	f104 0919 	add.w	r9, r4, #25
 8003ad6:	e7f4      	b.n	8003ac2 <_printf_float+0x446>

08003ad8 <_printf_common>:
 8003ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003adc:	4616      	mov	r6, r2
 8003ade:	4699      	mov	r9, r3
 8003ae0:	688a      	ldr	r2, [r1, #8]
 8003ae2:	690b      	ldr	r3, [r1, #16]
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	bfb8      	it	lt
 8003aea:	4613      	movlt	r3, r2
 8003aec:	6033      	str	r3, [r6, #0]
 8003aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af2:	460c      	mov	r4, r1
 8003af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af8:	b10a      	cbz	r2, 8003afe <_printf_common+0x26>
 8003afa:	3301      	adds	r3, #1
 8003afc:	6033      	str	r3, [r6, #0]
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	0699      	lsls	r1, r3, #26
 8003b02:	bf42      	ittt	mi
 8003b04:	6833      	ldrmi	r3, [r6, #0]
 8003b06:	3302      	addmi	r3, #2
 8003b08:	6033      	strmi	r3, [r6, #0]
 8003b0a:	6825      	ldr	r5, [r4, #0]
 8003b0c:	f015 0506 	ands.w	r5, r5, #6
 8003b10:	d106      	bne.n	8003b20 <_printf_common+0x48>
 8003b12:	f104 0a19 	add.w	sl, r4, #25
 8003b16:	68e3      	ldr	r3, [r4, #12]
 8003b18:	6832      	ldr	r2, [r6, #0]
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	42ab      	cmp	r3, r5
 8003b1e:	dc2b      	bgt.n	8003b78 <_printf_common+0xa0>
 8003b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b24:	1e13      	subs	r3, r2, #0
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	bf18      	it	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	0692      	lsls	r2, r2, #26
 8003b2e:	d430      	bmi.n	8003b92 <_printf_common+0xba>
 8003b30:	4649      	mov	r1, r9
 8003b32:	4638      	mov	r0, r7
 8003b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b38:	47c0      	blx	r8
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d023      	beq.n	8003b86 <_printf_common+0xae>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	6922      	ldr	r2, [r4, #16]
 8003b42:	f003 0306 	and.w	r3, r3, #6
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	bf14      	ite	ne
 8003b4a:	2500      	movne	r5, #0
 8003b4c:	6833      	ldreq	r3, [r6, #0]
 8003b4e:	f04f 0600 	mov.w	r6, #0
 8003b52:	bf08      	it	eq
 8003b54:	68e5      	ldreq	r5, [r4, #12]
 8003b56:	f104 041a 	add.w	r4, r4, #26
 8003b5a:	bf08      	it	eq
 8003b5c:	1aed      	subeq	r5, r5, r3
 8003b5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b62:	bf08      	it	eq
 8003b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	bfc4      	itt	gt
 8003b6c:	1a9b      	subgt	r3, r3, r2
 8003b6e:	18ed      	addgt	r5, r5, r3
 8003b70:	42b5      	cmp	r5, r6
 8003b72:	d11a      	bne.n	8003baa <_printf_common+0xd2>
 8003b74:	2000      	movs	r0, #0
 8003b76:	e008      	b.n	8003b8a <_printf_common+0xb2>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4652      	mov	r2, sl
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4638      	mov	r0, r7
 8003b80:	47c0      	blx	r8
 8003b82:	3001      	adds	r0, #1
 8003b84:	d103      	bne.n	8003b8e <_printf_common+0xb6>
 8003b86:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8e:	3501      	adds	r5, #1
 8003b90:	e7c1      	b.n	8003b16 <_printf_common+0x3e>
 8003b92:	2030      	movs	r0, #48	; 0x30
 8003b94:	18e1      	adds	r1, r4, r3
 8003b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ba0:	4422      	add	r2, r4
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba8:	e7c2      	b.n	8003b30 <_printf_common+0x58>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4622      	mov	r2, r4
 8003bae:	4649      	mov	r1, r9
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	47c0      	blx	r8
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d0e6      	beq.n	8003b86 <_printf_common+0xae>
 8003bb8:	3601      	adds	r6, #1
 8003bba:	e7d9      	b.n	8003b70 <_printf_common+0x98>

08003bbc <_printf_i>:
 8003bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	7e0f      	ldrb	r7, [r1, #24]
 8003bc2:	4691      	mov	r9, r2
 8003bc4:	2f78      	cmp	r7, #120	; 0x78
 8003bc6:	4680      	mov	r8, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	469a      	mov	sl, r3
 8003bcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bd2:	d807      	bhi.n	8003be4 <_printf_i+0x28>
 8003bd4:	2f62      	cmp	r7, #98	; 0x62
 8003bd6:	d80a      	bhi.n	8003bee <_printf_i+0x32>
 8003bd8:	2f00      	cmp	r7, #0
 8003bda:	f000 80d5 	beq.w	8003d88 <_printf_i+0x1cc>
 8003bde:	2f58      	cmp	r7, #88	; 0x58
 8003be0:	f000 80c1 	beq.w	8003d66 <_printf_i+0x1aa>
 8003be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bec:	e03a      	b.n	8003c64 <_printf_i+0xa8>
 8003bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bf2:	2b15      	cmp	r3, #21
 8003bf4:	d8f6      	bhi.n	8003be4 <_printf_i+0x28>
 8003bf6:	a101      	add	r1, pc, #4	; (adr r1, 8003bfc <_printf_i+0x40>)
 8003bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003be5 	.word	0x08003be5
 8003c08:	08003be5 	.word	0x08003be5
 8003c0c:	08003be5 	.word	0x08003be5
 8003c10:	08003be5 	.word	0x08003be5
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003be5 	.word	0x08003be5
 8003c1c:	08003be5 	.word	0x08003be5
 8003c20:	08003be5 	.word	0x08003be5
 8003c24:	08003be5 	.word	0x08003be5
 8003c28:	08003d6f 	.word	0x08003d6f
 8003c2c:	08003c95 	.word	0x08003c95
 8003c30:	08003d29 	.word	0x08003d29
 8003c34:	08003be5 	.word	0x08003be5
 8003c38:	08003be5 	.word	0x08003be5
 8003c3c:	08003d91 	.word	0x08003d91
 8003c40:	08003be5 	.word	0x08003be5
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003be5 	.word	0x08003be5
 8003c4c:	08003be5 	.word	0x08003be5
 8003c50:	08003d31 	.word	0x08003d31
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	602a      	str	r2, [r5, #0]
 8003c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0a0      	b.n	8003daa <_printf_i+0x1ee>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	0607      	lsls	r7, r0, #24
 8003c6e:	f103 0104 	add.w	r1, r3, #4
 8003c72:	6029      	str	r1, [r5, #0]
 8003c74:	d501      	bpl.n	8003c7a <_printf_i+0xbe>
 8003c76:	681e      	ldr	r6, [r3, #0]
 8003c78:	e003      	b.n	8003c82 <_printf_i+0xc6>
 8003c7a:	0646      	lsls	r6, r0, #25
 8003c7c:	d5fb      	bpl.n	8003c76 <_printf_i+0xba>
 8003c7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	da03      	bge.n	8003c8e <_printf_i+0xd2>
 8003c86:	232d      	movs	r3, #45	; 0x2d
 8003c88:	4276      	negs	r6, r6
 8003c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c8e:	230a      	movs	r3, #10
 8003c90:	4859      	ldr	r0, [pc, #356]	; (8003df8 <_printf_i+0x23c>)
 8003c92:	e012      	b.n	8003cba <_printf_i+0xfe>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	1d19      	adds	r1, r3, #4
 8003c9a:	6029      	str	r1, [r5, #0]
 8003c9c:	0605      	lsls	r5, r0, #24
 8003c9e:	d501      	bpl.n	8003ca4 <_printf_i+0xe8>
 8003ca0:	681e      	ldr	r6, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <_printf_i+0xee>
 8003ca4:	0641      	lsls	r1, r0, #25
 8003ca6:	d5fb      	bpl.n	8003ca0 <_printf_i+0xe4>
 8003ca8:	881e      	ldrh	r6, [r3, #0]
 8003caa:	2f6f      	cmp	r7, #111	; 0x6f
 8003cac:	bf0c      	ite	eq
 8003cae:	2308      	moveq	r3, #8
 8003cb0:	230a      	movne	r3, #10
 8003cb2:	4851      	ldr	r0, [pc, #324]	; (8003df8 <_printf_i+0x23c>)
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cba:	6865      	ldr	r5, [r4, #4]
 8003cbc:	2d00      	cmp	r5, #0
 8003cbe:	bfa8      	it	ge
 8003cc0:	6821      	ldrge	r1, [r4, #0]
 8003cc2:	60a5      	str	r5, [r4, #8]
 8003cc4:	bfa4      	itt	ge
 8003cc6:	f021 0104 	bicge.w	r1, r1, #4
 8003cca:	6021      	strge	r1, [r4, #0]
 8003ccc:	b90e      	cbnz	r6, 8003cd2 <_printf_i+0x116>
 8003cce:	2d00      	cmp	r5, #0
 8003cd0:	d04b      	beq.n	8003d6a <_printf_i+0x1ae>
 8003cd2:	4615      	mov	r5, r2
 8003cd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cd8:	fb03 6711 	mls	r7, r3, r1, r6
 8003cdc:	5dc7      	ldrb	r7, [r0, r7]
 8003cde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ce2:	4637      	mov	r7, r6
 8003ce4:	42bb      	cmp	r3, r7
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	d9f4      	bls.n	8003cd4 <_printf_i+0x118>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d10b      	bne.n	8003d06 <_printf_i+0x14a>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	07de      	lsls	r6, r3, #31
 8003cf2:	d508      	bpl.n	8003d06 <_printf_i+0x14a>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	6861      	ldr	r1, [r4, #4]
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	bfde      	ittt	le
 8003cfc:	2330      	movle	r3, #48	; 0x30
 8003cfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d06:	1b52      	subs	r2, r2, r5
 8003d08:	6122      	str	r2, [r4, #16]
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	4640      	mov	r0, r8
 8003d10:	f8cd a000 	str.w	sl, [sp]
 8003d14:	aa03      	add	r2, sp, #12
 8003d16:	f7ff fedf 	bl	8003ad8 <_printf_common>
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d14a      	bne.n	8003db4 <_printf_i+0x1f8>
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	b004      	add	sp, #16
 8003d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	f043 0320 	orr.w	r3, r3, #32
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	2778      	movs	r7, #120	; 0x78
 8003d32:	4832      	ldr	r0, [pc, #200]	; (8003dfc <_printf_i+0x240>)
 8003d34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	6829      	ldr	r1, [r5, #0]
 8003d3c:	061f      	lsls	r7, r3, #24
 8003d3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d42:	d402      	bmi.n	8003d4a <_printf_i+0x18e>
 8003d44:	065f      	lsls	r7, r3, #25
 8003d46:	bf48      	it	mi
 8003d48:	b2b6      	uxthmi	r6, r6
 8003d4a:	07df      	lsls	r7, r3, #31
 8003d4c:	bf48      	it	mi
 8003d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d52:	6029      	str	r1, [r5, #0]
 8003d54:	bf48      	it	mi
 8003d56:	6023      	strmi	r3, [r4, #0]
 8003d58:	b91e      	cbnz	r6, 8003d62 <_printf_i+0x1a6>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	f023 0320 	bic.w	r3, r3, #32
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	2310      	movs	r3, #16
 8003d64:	e7a6      	b.n	8003cb4 <_printf_i+0xf8>
 8003d66:	4824      	ldr	r0, [pc, #144]	; (8003df8 <_printf_i+0x23c>)
 8003d68:	e7e4      	b.n	8003d34 <_printf_i+0x178>
 8003d6a:	4615      	mov	r5, r2
 8003d6c:	e7bd      	b.n	8003cea <_printf_i+0x12e>
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	6826      	ldr	r6, [r4, #0]
 8003d72:	1d18      	adds	r0, r3, #4
 8003d74:	6961      	ldr	r1, [r4, #20]
 8003d76:	6028      	str	r0, [r5, #0]
 8003d78:	0635      	lsls	r5, r6, #24
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	d501      	bpl.n	8003d82 <_printf_i+0x1c6>
 8003d7e:	6019      	str	r1, [r3, #0]
 8003d80:	e002      	b.n	8003d88 <_printf_i+0x1cc>
 8003d82:	0670      	lsls	r0, r6, #25
 8003d84:	d5fb      	bpl.n	8003d7e <_printf_i+0x1c2>
 8003d86:	8019      	strh	r1, [r3, #0]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4615      	mov	r5, r2
 8003d8c:	6123      	str	r3, [r4, #16]
 8003d8e:	e7bc      	b.n	8003d0a <_printf_i+0x14e>
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	2100      	movs	r1, #0
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	602a      	str	r2, [r5, #0]
 8003d98:	681d      	ldr	r5, [r3, #0]
 8003d9a:	6862      	ldr	r2, [r4, #4]
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f000 f9c6 	bl	800412e <memchr>
 8003da2:	b108      	cbz	r0, 8003da8 <_printf_i+0x1ec>
 8003da4:	1b40      	subs	r0, r0, r5
 8003da6:	6060      	str	r0, [r4, #4]
 8003da8:	6863      	ldr	r3, [r4, #4]
 8003daa:	6123      	str	r3, [r4, #16]
 8003dac:	2300      	movs	r3, #0
 8003dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db2:	e7aa      	b.n	8003d0a <_printf_i+0x14e>
 8003db4:	462a      	mov	r2, r5
 8003db6:	4649      	mov	r1, r9
 8003db8:	4640      	mov	r0, r8
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	47d0      	blx	sl
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d0ad      	beq.n	8003d1e <_printf_i+0x162>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	079b      	lsls	r3, r3, #30
 8003dc6:	d413      	bmi.n	8003df0 <_printf_i+0x234>
 8003dc8:	68e0      	ldr	r0, [r4, #12]
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	4298      	cmp	r0, r3
 8003dce:	bfb8      	it	lt
 8003dd0:	4618      	movlt	r0, r3
 8003dd2:	e7a6      	b.n	8003d22 <_printf_i+0x166>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	4649      	mov	r1, r9
 8003dda:	4640      	mov	r0, r8
 8003ddc:	47d0      	blx	sl
 8003dde:	3001      	adds	r0, #1
 8003de0:	d09d      	beq.n	8003d1e <_printf_i+0x162>
 8003de2:	3501      	adds	r5, #1
 8003de4:	68e3      	ldr	r3, [r4, #12]
 8003de6:	9903      	ldr	r1, [sp, #12]
 8003de8:	1a5b      	subs	r3, r3, r1
 8003dea:	42ab      	cmp	r3, r5
 8003dec:	dcf2      	bgt.n	8003dd4 <_printf_i+0x218>
 8003dee:	e7eb      	b.n	8003dc8 <_printf_i+0x20c>
 8003df0:	2500      	movs	r5, #0
 8003df2:	f104 0619 	add.w	r6, r4, #25
 8003df6:	e7f5      	b.n	8003de4 <_printf_i+0x228>
 8003df8:	08005f1e 	.word	0x08005f1e
 8003dfc:	08005f2f 	.word	0x08005f2f

08003e00 <std>:
 8003e00:	2300      	movs	r3, #0
 8003e02:	b510      	push	{r4, lr}
 8003e04:	4604      	mov	r4, r0
 8003e06:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e0e:	6083      	str	r3, [r0, #8]
 8003e10:	8181      	strh	r1, [r0, #12]
 8003e12:	6643      	str	r3, [r0, #100]	; 0x64
 8003e14:	81c2      	strh	r2, [r0, #14]
 8003e16:	6183      	str	r3, [r0, #24]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	305c      	adds	r0, #92	; 0x5c
 8003e1e:	f000 f906 	bl	800402e <memset>
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <std+0x58>)
 8003e24:	6224      	str	r4, [r4, #32]
 8003e26:	6263      	str	r3, [r4, #36]	; 0x24
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <std+0x5c>)
 8003e2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <std+0x60>)
 8003e2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <std+0x64>)
 8003e32:	6323      	str	r3, [r4, #48]	; 0x30
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <std+0x68>)
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d006      	beq.n	8003e48 <std+0x48>
 8003e3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e3e:	4294      	cmp	r4, r2
 8003e40:	d002      	beq.n	8003e48 <std+0x48>
 8003e42:	33d0      	adds	r3, #208	; 0xd0
 8003e44:	429c      	cmp	r4, r3
 8003e46:	d105      	bne.n	8003e54 <std+0x54>
 8003e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e50:	f000 b96a 	b.w	8004128 <__retarget_lock_init_recursive>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	bf00      	nop
 8003e58:	08003fa9 	.word	0x08003fa9
 8003e5c:	08003fcb 	.word	0x08003fcb
 8003e60:	08004003 	.word	0x08004003
 8003e64:	08004027 	.word	0x08004027
 8003e68:	20000294 	.word	0x20000294

08003e6c <stdio_exit_handler>:
 8003e6c:	4a02      	ldr	r2, [pc, #8]	; (8003e78 <stdio_exit_handler+0xc>)
 8003e6e:	4903      	ldr	r1, [pc, #12]	; (8003e7c <stdio_exit_handler+0x10>)
 8003e70:	4803      	ldr	r0, [pc, #12]	; (8003e80 <stdio_exit_handler+0x14>)
 8003e72:	f000 b869 	b.w	8003f48 <_fwalk_sglue>
 8003e76:	bf00      	nop
 8003e78:	2000000c 	.word	0x2000000c
 8003e7c:	08005a99 	.word	0x08005a99
 8003e80:	20000018 	.word	0x20000018

08003e84 <cleanup_stdio>:
 8003e84:	6841      	ldr	r1, [r0, #4]
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <cleanup_stdio+0x34>)
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4299      	cmp	r1, r3
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	d001      	beq.n	8003e94 <cleanup_stdio+0x10>
 8003e90:	f001 fe02 	bl	8005a98 <_fflush_r>
 8003e94:	68a1      	ldr	r1, [r4, #8]
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <cleanup_stdio+0x38>)
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d002      	beq.n	8003ea2 <cleanup_stdio+0x1e>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f001 fdfb 	bl	8005a98 <_fflush_r>
 8003ea2:	68e1      	ldr	r1, [r4, #12]
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <cleanup_stdio+0x3c>)
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d004      	beq.n	8003eb4 <cleanup_stdio+0x30>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f001 bdf2 	b.w	8005a98 <_fflush_r>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000294 	.word	0x20000294
 8003ebc:	200002fc 	.word	0x200002fc
 8003ec0:	20000364 	.word	0x20000364

08003ec4 <global_stdio_init.part.0>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <global_stdio_init.part.0+0x30>)
 8003ec8:	4c0b      	ldr	r4, [pc, #44]	; (8003ef8 <global_stdio_init.part.0+0x34>)
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <global_stdio_init.part.0+0x38>)
 8003ecc:	4620      	mov	r0, r4
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	2104      	movs	r1, #4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f7ff ff94 	bl	8003e00 <std>
 8003ed8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003edc:	2201      	movs	r2, #1
 8003ede:	2109      	movs	r1, #9
 8003ee0:	f7ff ff8e 	bl	8003e00 <std>
 8003ee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ee8:	2202      	movs	r2, #2
 8003eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eee:	2112      	movs	r1, #18
 8003ef0:	f7ff bf86 	b.w	8003e00 <std>
 8003ef4:	200003cc 	.word	0x200003cc
 8003ef8:	20000294 	.word	0x20000294
 8003efc:	08003e6d 	.word	0x08003e6d

08003f00 <__sfp_lock_acquire>:
 8003f00:	4801      	ldr	r0, [pc, #4]	; (8003f08 <__sfp_lock_acquire+0x8>)
 8003f02:	f000 b912 	b.w	800412a <__retarget_lock_acquire_recursive>
 8003f06:	bf00      	nop
 8003f08:	200003d5 	.word	0x200003d5

08003f0c <__sfp_lock_release>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__sfp_lock_release+0x8>)
 8003f0e:	f000 b90d 	b.w	800412c <__retarget_lock_release_recursive>
 8003f12:	bf00      	nop
 8003f14:	200003d5 	.word	0x200003d5

08003f18 <__sinit>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	f7ff fff0 	bl	8003f00 <__sfp_lock_acquire>
 8003f20:	6a23      	ldr	r3, [r4, #32]
 8003f22:	b11b      	cbz	r3, 8003f2c <__sinit+0x14>
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f7ff bff0 	b.w	8003f0c <__sfp_lock_release>
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <__sinit+0x28>)
 8003f2e:	6223      	str	r3, [r4, #32]
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <__sinit+0x2c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f5      	bne.n	8003f24 <__sinit+0xc>
 8003f38:	f7ff ffc4 	bl	8003ec4 <global_stdio_init.part.0>
 8003f3c:	e7f2      	b.n	8003f24 <__sinit+0xc>
 8003f3e:	bf00      	nop
 8003f40:	08003e85 	.word	0x08003e85
 8003f44:	200003cc 	.word	0x200003cc

08003f48 <_fwalk_sglue>:
 8003f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	4688      	mov	r8, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	2600      	movs	r6, #0
 8003f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f58:	f1b9 0901 	subs.w	r9, r9, #1
 8003f5c:	d505      	bpl.n	8003f6a <_fwalk_sglue+0x22>
 8003f5e:	6824      	ldr	r4, [r4, #0]
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d1f7      	bne.n	8003f54 <_fwalk_sglue+0xc>
 8003f64:	4630      	mov	r0, r6
 8003f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d907      	bls.n	8003f80 <_fwalk_sglue+0x38>
 8003f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f74:	3301      	adds	r3, #1
 8003f76:	d003      	beq.n	8003f80 <_fwalk_sglue+0x38>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	4306      	orrs	r6, r0
 8003f80:	3568      	adds	r5, #104	; 0x68
 8003f82:	e7e9      	b.n	8003f58 <_fwalk_sglue+0x10>

08003f84 <iprintf>:
 8003f84:	b40f      	push	{r0, r1, r2, r3}
 8003f86:	b507      	push	{r0, r1, r2, lr}
 8003f88:	4906      	ldr	r1, [pc, #24]	; (8003fa4 <iprintf+0x20>)
 8003f8a:	ab04      	add	r3, sp, #16
 8003f8c:	6808      	ldr	r0, [r1, #0]
 8003f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f92:	6881      	ldr	r1, [r0, #8]
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	f001 fbe3 	bl	8005760 <_vfiprintf_r>
 8003f9a:	b003      	add	sp, #12
 8003f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa0:	b004      	add	sp, #16
 8003fa2:	4770      	bx	lr
 8003fa4:	20000064 	.word	0x20000064

08003fa8 <__sread>:
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	460c      	mov	r4, r1
 8003fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb0:	f000 f86c 	bl	800408c <_read_r>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	bfab      	itete	ge
 8003fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fba:	89a3      	ldrhlt	r3, [r4, #12]
 8003fbc:	181b      	addge	r3, r3, r0
 8003fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fc2:	bfac      	ite	ge
 8003fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fc6:	81a3      	strhlt	r3, [r4, #12]
 8003fc8:	bd10      	pop	{r4, pc}

08003fca <__swrite>:
 8003fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fce:	461f      	mov	r7, r3
 8003fd0:	898b      	ldrh	r3, [r1, #12]
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	05db      	lsls	r3, r3, #23
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	4616      	mov	r6, r2
 8003fda:	d505      	bpl.n	8003fe8 <__swrite+0x1e>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe4:	f000 f840 	bl	8004068 <_lseek_r>
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	4632      	mov	r2, r6
 8003fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff0:	81a3      	strh	r3, [r4, #12]
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffe:	f000 b857 	b.w	80040b0 <_write_r>

08004002 <__sseek>:
 8004002:	b510      	push	{r4, lr}
 8004004:	460c      	mov	r4, r1
 8004006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400a:	f000 f82d 	bl	8004068 <_lseek_r>
 800400e:	1c43      	adds	r3, r0, #1
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	bf15      	itete	ne
 8004014:	6560      	strne	r0, [r4, #84]	; 0x54
 8004016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800401a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800401e:	81a3      	strheq	r3, [r4, #12]
 8004020:	bf18      	it	ne
 8004022:	81a3      	strhne	r3, [r4, #12]
 8004024:	bd10      	pop	{r4, pc}

08004026 <__sclose>:
 8004026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800402a:	f000 b80d 	b.w	8004048 <_close_r>

0800402e <memset>:
 800402e:	4603      	mov	r3, r0
 8004030:	4402      	add	r2, r0
 8004032:	4293      	cmp	r3, r2
 8004034:	d100      	bne.n	8004038 <memset+0xa>
 8004036:	4770      	bx	lr
 8004038:	f803 1b01 	strb.w	r1, [r3], #1
 800403c:	e7f9      	b.n	8004032 <memset+0x4>
	...

08004040 <_localeconv_r>:
 8004040:	4800      	ldr	r0, [pc, #0]	; (8004044 <_localeconv_r+0x4>)
 8004042:	4770      	bx	lr
 8004044:	20000158 	.word	0x20000158

08004048 <_close_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	2300      	movs	r3, #0
 800404c:	4d05      	ldr	r5, [pc, #20]	; (8004064 <_close_r+0x1c>)
 800404e:	4604      	mov	r4, r0
 8004050:	4608      	mov	r0, r1
 8004052:	602b      	str	r3, [r5, #0]
 8004054:	f7fd fa75 	bl	8001542 <_close>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_close_r+0x1a>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_close_r+0x1a>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	200003d0 	.word	0x200003d0

08004068 <_lseek_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	2200      	movs	r2, #0
 8004072:	4d05      	ldr	r5, [pc, #20]	; (8004088 <_lseek_r+0x20>)
 8004074:	602a      	str	r2, [r5, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	f7fd fa87 	bl	800158a <_lseek>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_lseek_r+0x1e>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_lseek_r+0x1e>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	200003d0 	.word	0x200003d0

0800408c <_read_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4604      	mov	r4, r0
 8004090:	4608      	mov	r0, r1
 8004092:	4611      	mov	r1, r2
 8004094:	2200      	movs	r2, #0
 8004096:	4d05      	ldr	r5, [pc, #20]	; (80040ac <_read_r+0x20>)
 8004098:	602a      	str	r2, [r5, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f7fd fa34 	bl	8001508 <_read>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_read_r+0x1e>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_read_r+0x1e>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	200003d0 	.word	0x200003d0

080040b0 <_write_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4604      	mov	r4, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	2200      	movs	r2, #0
 80040ba:	4d05      	ldr	r5, [pc, #20]	; (80040d0 <_write_r+0x20>)
 80040bc:	602a      	str	r2, [r5, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	f7fc ff7e 	bl	8000fc0 <_write>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d102      	bne.n	80040ce <_write_r+0x1e>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b103      	cbz	r3, 80040ce <_write_r+0x1e>
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	200003d0 	.word	0x200003d0

080040d4 <__errno>:
 80040d4:	4b01      	ldr	r3, [pc, #4]	; (80040dc <__errno+0x8>)
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000064 	.word	0x20000064

080040e0 <__libc_init_array>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	2600      	movs	r6, #0
 80040e4:	4d0c      	ldr	r5, [pc, #48]	; (8004118 <__libc_init_array+0x38>)
 80040e6:	4c0d      	ldr	r4, [pc, #52]	; (800411c <__libc_init_array+0x3c>)
 80040e8:	1b64      	subs	r4, r4, r5
 80040ea:	10a4      	asrs	r4, r4, #2
 80040ec:	42a6      	cmp	r6, r4
 80040ee:	d109      	bne.n	8004104 <__libc_init_array+0x24>
 80040f0:	f001 fee2 	bl	8005eb8 <_init>
 80040f4:	2600      	movs	r6, #0
 80040f6:	4d0a      	ldr	r5, [pc, #40]	; (8004120 <__libc_init_array+0x40>)
 80040f8:	4c0a      	ldr	r4, [pc, #40]	; (8004124 <__libc_init_array+0x44>)
 80040fa:	1b64      	subs	r4, r4, r5
 80040fc:	10a4      	asrs	r4, r4, #2
 80040fe:	42a6      	cmp	r6, r4
 8004100:	d105      	bne.n	800410e <__libc_init_array+0x2e>
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	f855 3b04 	ldr.w	r3, [r5], #4
 8004108:	4798      	blx	r3
 800410a:	3601      	adds	r6, #1
 800410c:	e7ee      	b.n	80040ec <__libc_init_array+0xc>
 800410e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004112:	4798      	blx	r3
 8004114:	3601      	adds	r6, #1
 8004116:	e7f2      	b.n	80040fe <__libc_init_array+0x1e>
 8004118:	08006284 	.word	0x08006284
 800411c:	08006284 	.word	0x08006284
 8004120:	08006284 	.word	0x08006284
 8004124:	08006288 	.word	0x08006288

08004128 <__retarget_lock_init_recursive>:
 8004128:	4770      	bx	lr

0800412a <__retarget_lock_acquire_recursive>:
 800412a:	4770      	bx	lr

0800412c <__retarget_lock_release_recursive>:
 800412c:	4770      	bx	lr

0800412e <memchr>:
 800412e:	4603      	mov	r3, r0
 8004130:	b510      	push	{r4, lr}
 8004132:	b2c9      	uxtb	r1, r1
 8004134:	4402      	add	r2, r0
 8004136:	4293      	cmp	r3, r2
 8004138:	4618      	mov	r0, r3
 800413a:	d101      	bne.n	8004140 <memchr+0x12>
 800413c:	2000      	movs	r0, #0
 800413e:	e003      	b.n	8004148 <memchr+0x1a>
 8004140:	7804      	ldrb	r4, [r0, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	428c      	cmp	r4, r1
 8004146:	d1f6      	bne.n	8004136 <memchr+0x8>
 8004148:	bd10      	pop	{r4, pc}

0800414a <quorem>:
 800414a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414e:	6903      	ldr	r3, [r0, #16]
 8004150:	690c      	ldr	r4, [r1, #16]
 8004152:	4607      	mov	r7, r0
 8004154:	42a3      	cmp	r3, r4
 8004156:	db7f      	blt.n	8004258 <quorem+0x10e>
 8004158:	3c01      	subs	r4, #1
 800415a:	f100 0514 	add.w	r5, r0, #20
 800415e:	f101 0814 	add.w	r8, r1, #20
 8004162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800416c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004170:	3301      	adds	r3, #1
 8004172:	429a      	cmp	r2, r3
 8004174:	fbb2 f6f3 	udiv	r6, r2, r3
 8004178:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800417c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004180:	d331      	bcc.n	80041e6 <quorem+0x9c>
 8004182:	f04f 0e00 	mov.w	lr, #0
 8004186:	4640      	mov	r0, r8
 8004188:	46ac      	mov	ip, r5
 800418a:	46f2      	mov	sl, lr
 800418c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004190:	b293      	uxth	r3, r2
 8004192:	fb06 e303 	mla	r3, r6, r3, lr
 8004196:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800419a:	0c1a      	lsrs	r2, r3, #16
 800419c:	b29b      	uxth	r3, r3
 800419e:	fb06 220e 	mla	r2, r6, lr, r2
 80041a2:	ebaa 0303 	sub.w	r3, sl, r3
 80041a6:	f8dc a000 	ldr.w	sl, [ip]
 80041aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041ae:	fa1f fa8a 	uxth.w	sl, sl
 80041b2:	4453      	add	r3, sl
 80041b4:	f8dc a000 	ldr.w	sl, [ip]
 80041b8:	b292      	uxth	r2, r2
 80041ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80041be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041c8:	4581      	cmp	r9, r0
 80041ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041ce:	f84c 3b04 	str.w	r3, [ip], #4
 80041d2:	d2db      	bcs.n	800418c <quorem+0x42>
 80041d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80041d8:	b92b      	cbnz	r3, 80041e6 <quorem+0x9c>
 80041da:	9b01      	ldr	r3, [sp, #4]
 80041dc:	3b04      	subs	r3, #4
 80041de:	429d      	cmp	r5, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	d32d      	bcc.n	8004240 <quorem+0xf6>
 80041e4:	613c      	str	r4, [r7, #16]
 80041e6:	4638      	mov	r0, r7
 80041e8:	f001 f994 	bl	8005514 <__mcmp>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	db23      	blt.n	8004238 <quorem+0xee>
 80041f0:	4629      	mov	r1, r5
 80041f2:	2000      	movs	r0, #0
 80041f4:	3601      	adds	r6, #1
 80041f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80041fa:	f8d1 c000 	ldr.w	ip, [r1]
 80041fe:	b293      	uxth	r3, r2
 8004200:	1ac3      	subs	r3, r0, r3
 8004202:	0c12      	lsrs	r2, r2, #16
 8004204:	fa1f f08c 	uxth.w	r0, ip
 8004208:	4403      	add	r3, r0
 800420a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800420e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004212:	b29b      	uxth	r3, r3
 8004214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004218:	45c1      	cmp	r9, r8
 800421a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800421e:	f841 3b04 	str.w	r3, [r1], #4
 8004222:	d2e8      	bcs.n	80041f6 <quorem+0xac>
 8004224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004228:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800422c:	b922      	cbnz	r2, 8004238 <quorem+0xee>
 800422e:	3b04      	subs	r3, #4
 8004230:	429d      	cmp	r5, r3
 8004232:	461a      	mov	r2, r3
 8004234:	d30a      	bcc.n	800424c <quorem+0x102>
 8004236:	613c      	str	r4, [r7, #16]
 8004238:	4630      	mov	r0, r6
 800423a:	b003      	add	sp, #12
 800423c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	3b04      	subs	r3, #4
 8004244:	2a00      	cmp	r2, #0
 8004246:	d1cd      	bne.n	80041e4 <quorem+0x9a>
 8004248:	3c01      	subs	r4, #1
 800424a:	e7c8      	b.n	80041de <quorem+0x94>
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	3b04      	subs	r3, #4
 8004250:	2a00      	cmp	r2, #0
 8004252:	d1f0      	bne.n	8004236 <quorem+0xec>
 8004254:	3c01      	subs	r4, #1
 8004256:	e7eb      	b.n	8004230 <quorem+0xe6>
 8004258:	2000      	movs	r0, #0
 800425a:	e7ee      	b.n	800423a <quorem+0xf0>
 800425c:	0000      	movs	r0, r0
	...

08004260 <_dtoa_r>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	4616      	mov	r6, r2
 8004266:	461f      	mov	r7, r3
 8004268:	69c4      	ldr	r4, [r0, #28]
 800426a:	b099      	sub	sp, #100	; 0x64
 800426c:	4605      	mov	r5, r0
 800426e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004272:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004276:	b974      	cbnz	r4, 8004296 <_dtoa_r+0x36>
 8004278:	2010      	movs	r0, #16
 800427a:	f000 fe1d 	bl	8004eb8 <malloc>
 800427e:	4602      	mov	r2, r0
 8004280:	61e8      	str	r0, [r5, #28]
 8004282:	b920      	cbnz	r0, 800428e <_dtoa_r+0x2e>
 8004284:	21ef      	movs	r1, #239	; 0xef
 8004286:	4bac      	ldr	r3, [pc, #688]	; (8004538 <_dtoa_r+0x2d8>)
 8004288:	48ac      	ldr	r0, [pc, #688]	; (800453c <_dtoa_r+0x2dc>)
 800428a:	f001 fce1 	bl	8005c50 <__assert_func>
 800428e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004292:	6004      	str	r4, [r0, #0]
 8004294:	60c4      	str	r4, [r0, #12]
 8004296:	69eb      	ldr	r3, [r5, #28]
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	b151      	cbz	r1, 80042b2 <_dtoa_r+0x52>
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	2301      	movs	r3, #1
 80042a0:	4093      	lsls	r3, r2
 80042a2:	604a      	str	r2, [r1, #4]
 80042a4:	608b      	str	r3, [r1, #8]
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 fefa 	bl	80050a0 <_Bfree>
 80042ac:	2200      	movs	r2, #0
 80042ae:	69eb      	ldr	r3, [r5, #28]
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	1e3b      	subs	r3, r7, #0
 80042b4:	bfaf      	iteee	ge
 80042b6:	2300      	movge	r3, #0
 80042b8:	2201      	movlt	r2, #1
 80042ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042be:	9305      	strlt	r3, [sp, #20]
 80042c0:	bfa8      	it	ge
 80042c2:	f8c8 3000 	strge.w	r3, [r8]
 80042c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80042ca:	4b9d      	ldr	r3, [pc, #628]	; (8004540 <_dtoa_r+0x2e0>)
 80042cc:	bfb8      	it	lt
 80042ce:	f8c8 2000 	strlt.w	r2, [r8]
 80042d2:	ea33 0309 	bics.w	r3, r3, r9
 80042d6:	d119      	bne.n	800430c <_dtoa_r+0xac>
 80042d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80042dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80042e4:	4333      	orrs	r3, r6
 80042e6:	f000 8589 	beq.w	8004dfc <_dtoa_r+0xb9c>
 80042ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80042ec:	b953      	cbnz	r3, 8004304 <_dtoa_r+0xa4>
 80042ee:	4b95      	ldr	r3, [pc, #596]	; (8004544 <_dtoa_r+0x2e4>)
 80042f0:	e023      	b.n	800433a <_dtoa_r+0xda>
 80042f2:	4b95      	ldr	r3, [pc, #596]	; (8004548 <_dtoa_r+0x2e8>)
 80042f4:	9303      	str	r3, [sp, #12]
 80042f6:	3308      	adds	r3, #8
 80042f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	9803      	ldr	r0, [sp, #12]
 80042fe:	b019      	add	sp, #100	; 0x64
 8004300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004304:	4b8f      	ldr	r3, [pc, #572]	; (8004544 <_dtoa_r+0x2e4>)
 8004306:	9303      	str	r3, [sp, #12]
 8004308:	3303      	adds	r3, #3
 800430a:	e7f5      	b.n	80042f8 <_dtoa_r+0x98>
 800430c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004310:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004318:	2200      	movs	r2, #0
 800431a:	2300      	movs	r3, #0
 800431c:	f7fc fc10 	bl	8000b40 <__aeabi_dcmpeq>
 8004320:	4680      	mov	r8, r0
 8004322:	b160      	cbz	r0, 800433e <_dtoa_r+0xde>
 8004324:	2301      	movs	r3, #1
 8004326:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8562 	beq.w	8004df6 <_dtoa_r+0xb96>
 8004332:	4b86      	ldr	r3, [pc, #536]	; (800454c <_dtoa_r+0x2ec>)
 8004334:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	e7de      	b.n	80042fc <_dtoa_r+0x9c>
 800433e:	ab16      	add	r3, sp, #88	; 0x58
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	ab17      	add	r3, sp, #92	; 0x5c
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4628      	mov	r0, r5
 8004348:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800434c:	f001 f98a 	bl	8005664 <__d2b>
 8004350:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004354:	4682      	mov	sl, r0
 8004356:	2c00      	cmp	r4, #0
 8004358:	d07e      	beq.n	8004458 <_dtoa_r+0x1f8>
 800435a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800435e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004360:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004368:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800436c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004370:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004374:	4619      	mov	r1, r3
 8004376:	2200      	movs	r2, #0
 8004378:	4b75      	ldr	r3, [pc, #468]	; (8004550 <_dtoa_r+0x2f0>)
 800437a:	f7fb ffc1 	bl	8000300 <__aeabi_dsub>
 800437e:	a368      	add	r3, pc, #416	; (adr r3, 8004520 <_dtoa_r+0x2c0>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fc f974 	bl	8000670 <__aeabi_dmul>
 8004388:	a367      	add	r3, pc, #412	; (adr r3, 8004528 <_dtoa_r+0x2c8>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fb ffb9 	bl	8000304 <__adddf3>
 8004392:	4606      	mov	r6, r0
 8004394:	4620      	mov	r0, r4
 8004396:	460f      	mov	r7, r1
 8004398:	f7fc f900 	bl	800059c <__aeabi_i2d>
 800439c:	a364      	add	r3, pc, #400	; (adr r3, 8004530 <_dtoa_r+0x2d0>)
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f7fc f965 	bl	8000670 <__aeabi_dmul>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4630      	mov	r0, r6
 80043ac:	4639      	mov	r1, r7
 80043ae:	f7fb ffa9 	bl	8000304 <__adddf3>
 80043b2:	4606      	mov	r6, r0
 80043b4:	460f      	mov	r7, r1
 80043b6:	f7fc fc0b 	bl	8000bd0 <__aeabi_d2iz>
 80043ba:	2200      	movs	r2, #0
 80043bc:	4683      	mov	fp, r0
 80043be:	2300      	movs	r3, #0
 80043c0:	4630      	mov	r0, r6
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fc fbc6 	bl	8000b54 <__aeabi_dcmplt>
 80043c8:	b148      	cbz	r0, 80043de <_dtoa_r+0x17e>
 80043ca:	4658      	mov	r0, fp
 80043cc:	f7fc f8e6 	bl	800059c <__aeabi_i2d>
 80043d0:	4632      	mov	r2, r6
 80043d2:	463b      	mov	r3, r7
 80043d4:	f7fc fbb4 	bl	8000b40 <__aeabi_dcmpeq>
 80043d8:	b908      	cbnz	r0, 80043de <_dtoa_r+0x17e>
 80043da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043de:	f1bb 0f16 	cmp.w	fp, #22
 80043e2:	d857      	bhi.n	8004494 <_dtoa_r+0x234>
 80043e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043e8:	4b5a      	ldr	r3, [pc, #360]	; (8004554 <_dtoa_r+0x2f4>)
 80043ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f7fc fbaf 	bl	8000b54 <__aeabi_dcmplt>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d04e      	beq.n	8004498 <_dtoa_r+0x238>
 80043fa:	2300      	movs	r3, #0
 80043fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004400:	930f      	str	r3, [sp, #60]	; 0x3c
 8004402:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004404:	1b1b      	subs	r3, r3, r4
 8004406:	1e5a      	subs	r2, r3, #1
 8004408:	bf46      	itte	mi
 800440a:	f1c3 0901 	rsbmi	r9, r3, #1
 800440e:	2300      	movmi	r3, #0
 8004410:	f04f 0900 	movpl.w	r9, #0
 8004414:	9209      	str	r2, [sp, #36]	; 0x24
 8004416:	bf48      	it	mi
 8004418:	9309      	strmi	r3, [sp, #36]	; 0x24
 800441a:	f1bb 0f00 	cmp.w	fp, #0
 800441e:	db3d      	blt.n	800449c <_dtoa_r+0x23c>
 8004420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004422:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004426:	445b      	add	r3, fp
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	2300      	movs	r3, #0
 800442c:	930a      	str	r3, [sp, #40]	; 0x28
 800442e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004430:	2b09      	cmp	r3, #9
 8004432:	d867      	bhi.n	8004504 <_dtoa_r+0x2a4>
 8004434:	2b05      	cmp	r3, #5
 8004436:	bfc4      	itt	gt
 8004438:	3b04      	subgt	r3, #4
 800443a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800443c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800443e:	bfc8      	it	gt
 8004440:	2400      	movgt	r4, #0
 8004442:	f1a3 0302 	sub.w	r3, r3, #2
 8004446:	bfd8      	it	le
 8004448:	2401      	movle	r4, #1
 800444a:	2b03      	cmp	r3, #3
 800444c:	f200 8086 	bhi.w	800455c <_dtoa_r+0x2fc>
 8004450:	e8df f003 	tbb	[pc, r3]
 8004454:	5637392c 	.word	0x5637392c
 8004458:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800445c:	441c      	add	r4, r3
 800445e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004462:	2b20      	cmp	r3, #32
 8004464:	bfc1      	itttt	gt
 8004466:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800446a:	fa09 f903 	lslgt.w	r9, r9, r3
 800446e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004472:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004476:	bfd6      	itet	le
 8004478:	f1c3 0320 	rsble	r3, r3, #32
 800447c:	ea49 0003 	orrgt.w	r0, r9, r3
 8004480:	fa06 f003 	lslle.w	r0, r6, r3
 8004484:	f7fc f87a 	bl	800057c <__aeabi_ui2d>
 8004488:	2201      	movs	r2, #1
 800448a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800448e:	3c01      	subs	r4, #1
 8004490:	9213      	str	r2, [sp, #76]	; 0x4c
 8004492:	e76f      	b.n	8004374 <_dtoa_r+0x114>
 8004494:	2301      	movs	r3, #1
 8004496:	e7b3      	b.n	8004400 <_dtoa_r+0x1a0>
 8004498:	900f      	str	r0, [sp, #60]	; 0x3c
 800449a:	e7b2      	b.n	8004402 <_dtoa_r+0x1a2>
 800449c:	f1cb 0300 	rsb	r3, fp, #0
 80044a0:	930a      	str	r3, [sp, #40]	; 0x28
 80044a2:	2300      	movs	r3, #0
 80044a4:	eba9 090b 	sub.w	r9, r9, fp
 80044a8:	930e      	str	r3, [sp, #56]	; 0x38
 80044aa:	e7c0      	b.n	800442e <_dtoa_r+0x1ce>
 80044ac:	2300      	movs	r3, #0
 80044ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80044b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	dc55      	bgt.n	8004562 <_dtoa_r+0x302>
 80044b6:	2301      	movs	r3, #1
 80044b8:	461a      	mov	r2, r3
 80044ba:	9306      	str	r3, [sp, #24]
 80044bc:	9308      	str	r3, [sp, #32]
 80044be:	9223      	str	r2, [sp, #140]	; 0x8c
 80044c0:	e00b      	b.n	80044da <_dtoa_r+0x27a>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e7f3      	b.n	80044ae <_dtoa_r+0x24e>
 80044c6:	2300      	movs	r3, #0
 80044c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80044ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044cc:	445b      	add	r3, fp
 80044ce:	9306      	str	r3, [sp, #24]
 80044d0:	3301      	adds	r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	9308      	str	r3, [sp, #32]
 80044d6:	bfb8      	it	lt
 80044d8:	2301      	movlt	r3, #1
 80044da:	2100      	movs	r1, #0
 80044dc:	2204      	movs	r2, #4
 80044de:	69e8      	ldr	r0, [r5, #28]
 80044e0:	f102 0614 	add.w	r6, r2, #20
 80044e4:	429e      	cmp	r6, r3
 80044e6:	d940      	bls.n	800456a <_dtoa_r+0x30a>
 80044e8:	6041      	str	r1, [r0, #4]
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 fd98 	bl	8005020 <_Balloc>
 80044f0:	9003      	str	r0, [sp, #12]
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d13c      	bne.n	8004570 <_dtoa_r+0x310>
 80044f6:	4602      	mov	r2, r0
 80044f8:	f240 11af 	movw	r1, #431	; 0x1af
 80044fc:	4b16      	ldr	r3, [pc, #88]	; (8004558 <_dtoa_r+0x2f8>)
 80044fe:	e6c3      	b.n	8004288 <_dtoa_r+0x28>
 8004500:	2301      	movs	r3, #1
 8004502:	e7e1      	b.n	80044c8 <_dtoa_r+0x268>
 8004504:	2401      	movs	r4, #1
 8004506:	2300      	movs	r3, #0
 8004508:	940b      	str	r4, [sp, #44]	; 0x2c
 800450a:	9322      	str	r3, [sp, #136]	; 0x88
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	2200      	movs	r2, #0
 8004512:	9306      	str	r3, [sp, #24]
 8004514:	9308      	str	r3, [sp, #32]
 8004516:	2312      	movs	r3, #18
 8004518:	e7d1      	b.n	80044be <_dtoa_r+0x25e>
 800451a:	bf00      	nop
 800451c:	f3af 8000 	nop.w
 8004520:	636f4361 	.word	0x636f4361
 8004524:	3fd287a7 	.word	0x3fd287a7
 8004528:	8b60c8b3 	.word	0x8b60c8b3
 800452c:	3fc68a28 	.word	0x3fc68a28
 8004530:	509f79fb 	.word	0x509f79fb
 8004534:	3fd34413 	.word	0x3fd34413
 8004538:	08005f4d 	.word	0x08005f4d
 800453c:	08005f64 	.word	0x08005f64
 8004540:	7ff00000 	.word	0x7ff00000
 8004544:	08005f49 	.word	0x08005f49
 8004548:	08005f40 	.word	0x08005f40
 800454c:	08005f1d 	.word	0x08005f1d
 8004550:	3ff80000 	.word	0x3ff80000
 8004554:	08006050 	.word	0x08006050
 8004558:	08005fbc 	.word	0x08005fbc
 800455c:	2301      	movs	r3, #1
 800455e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004560:	e7d4      	b.n	800450c <_dtoa_r+0x2ac>
 8004562:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004564:	9306      	str	r3, [sp, #24]
 8004566:	9308      	str	r3, [sp, #32]
 8004568:	e7b7      	b.n	80044da <_dtoa_r+0x27a>
 800456a:	3101      	adds	r1, #1
 800456c:	0052      	lsls	r2, r2, #1
 800456e:	e7b7      	b.n	80044e0 <_dtoa_r+0x280>
 8004570:	69eb      	ldr	r3, [r5, #28]
 8004572:	9a03      	ldr	r2, [sp, #12]
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	9b08      	ldr	r3, [sp, #32]
 8004578:	2b0e      	cmp	r3, #14
 800457a:	f200 80a8 	bhi.w	80046ce <_dtoa_r+0x46e>
 800457e:	2c00      	cmp	r4, #0
 8004580:	f000 80a5 	beq.w	80046ce <_dtoa_r+0x46e>
 8004584:	f1bb 0f00 	cmp.w	fp, #0
 8004588:	dd34      	ble.n	80045f4 <_dtoa_r+0x394>
 800458a:	4b9a      	ldr	r3, [pc, #616]	; (80047f4 <_dtoa_r+0x594>)
 800458c:	f00b 020f 	and.w	r2, fp, #15
 8004590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004594:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004598:	e9d3 3400 	ldrd	r3, r4, [r3]
 800459c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80045a0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80045a4:	d016      	beq.n	80045d4 <_dtoa_r+0x374>
 80045a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045aa:	4b93      	ldr	r3, [pc, #588]	; (80047f8 <_dtoa_r+0x598>)
 80045ac:	2703      	movs	r7, #3
 80045ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045b2:	f7fc f987 	bl	80008c4 <__aeabi_ddiv>
 80045b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045ba:	f004 040f 	and.w	r4, r4, #15
 80045be:	4e8e      	ldr	r6, [pc, #568]	; (80047f8 <_dtoa_r+0x598>)
 80045c0:	b954      	cbnz	r4, 80045d8 <_dtoa_r+0x378>
 80045c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ca:	f7fc f97b 	bl	80008c4 <__aeabi_ddiv>
 80045ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045d2:	e029      	b.n	8004628 <_dtoa_r+0x3c8>
 80045d4:	2702      	movs	r7, #2
 80045d6:	e7f2      	b.n	80045be <_dtoa_r+0x35e>
 80045d8:	07e1      	lsls	r1, r4, #31
 80045da:	d508      	bpl.n	80045ee <_dtoa_r+0x38e>
 80045dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80045e4:	f7fc f844 	bl	8000670 <__aeabi_dmul>
 80045e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045ec:	3701      	adds	r7, #1
 80045ee:	1064      	asrs	r4, r4, #1
 80045f0:	3608      	adds	r6, #8
 80045f2:	e7e5      	b.n	80045c0 <_dtoa_r+0x360>
 80045f4:	f000 80a5 	beq.w	8004742 <_dtoa_r+0x4e2>
 80045f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045fc:	f1cb 0400 	rsb	r4, fp, #0
 8004600:	4b7c      	ldr	r3, [pc, #496]	; (80047f4 <_dtoa_r+0x594>)
 8004602:	f004 020f 	and.w	r2, r4, #15
 8004606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fc f82f 	bl	8000670 <__aeabi_dmul>
 8004612:	2702      	movs	r7, #2
 8004614:	2300      	movs	r3, #0
 8004616:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800461a:	4e77      	ldr	r6, [pc, #476]	; (80047f8 <_dtoa_r+0x598>)
 800461c:	1124      	asrs	r4, r4, #4
 800461e:	2c00      	cmp	r4, #0
 8004620:	f040 8084 	bne.w	800472c <_dtoa_r+0x4cc>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1d2      	bne.n	80045ce <_dtoa_r+0x36e>
 8004628:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800462c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004630:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8087 	beq.w	8004746 <_dtoa_r+0x4e6>
 8004638:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800463c:	2200      	movs	r2, #0
 800463e:	4b6f      	ldr	r3, [pc, #444]	; (80047fc <_dtoa_r+0x59c>)
 8004640:	f7fc fa88 	bl	8000b54 <__aeabi_dcmplt>
 8004644:	2800      	cmp	r0, #0
 8004646:	d07e      	beq.n	8004746 <_dtoa_r+0x4e6>
 8004648:	9b08      	ldr	r3, [sp, #32]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d07b      	beq.n	8004746 <_dtoa_r+0x4e6>
 800464e:	9b06      	ldr	r3, [sp, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	dd38      	ble.n	80046c6 <_dtoa_r+0x466>
 8004654:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004658:	2200      	movs	r2, #0
 800465a:	4b69      	ldr	r3, [pc, #420]	; (8004800 <_dtoa_r+0x5a0>)
 800465c:	f7fc f808 	bl	8000670 <__aeabi_dmul>
 8004660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004664:	9c06      	ldr	r4, [sp, #24]
 8004666:	f10b 38ff 	add.w	r8, fp, #4294967295
 800466a:	3701      	adds	r7, #1
 800466c:	4638      	mov	r0, r7
 800466e:	f7fb ff95 	bl	800059c <__aeabi_i2d>
 8004672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004676:	f7fb fffb 	bl	8000670 <__aeabi_dmul>
 800467a:	2200      	movs	r2, #0
 800467c:	4b61      	ldr	r3, [pc, #388]	; (8004804 <_dtoa_r+0x5a4>)
 800467e:	f7fb fe41 	bl	8000304 <__adddf3>
 8004682:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004686:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800468a:	9611      	str	r6, [sp, #68]	; 0x44
 800468c:	2c00      	cmp	r4, #0
 800468e:	d15d      	bne.n	800474c <_dtoa_r+0x4ec>
 8004690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004694:	2200      	movs	r2, #0
 8004696:	4b5c      	ldr	r3, [pc, #368]	; (8004808 <_dtoa_r+0x5a8>)
 8004698:	f7fb fe32 	bl	8000300 <__aeabi_dsub>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046a4:	4633      	mov	r3, r6
 80046a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046a8:	f7fc fa72 	bl	8000b90 <__aeabi_dcmpgt>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	f040 8295 	bne.w	8004bdc <_dtoa_r+0x97c>
 80046b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80046bc:	f7fc fa4a 	bl	8000b54 <__aeabi_dcmplt>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	f040 8289 	bne.w	8004bd8 <_dtoa_r+0x978>
 80046c6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80046ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f2c0 8151 	blt.w	8004978 <_dtoa_r+0x718>
 80046d6:	f1bb 0f0e 	cmp.w	fp, #14
 80046da:	f300 814d 	bgt.w	8004978 <_dtoa_r+0x718>
 80046de:	4b45      	ldr	r3, [pc, #276]	; (80047f4 <_dtoa_r+0x594>)
 80046e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80046ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f280 80da 	bge.w	80048a8 <_dtoa_r+0x648>
 80046f4:	9b08      	ldr	r3, [sp, #32]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f300 80d6 	bgt.w	80048a8 <_dtoa_r+0x648>
 80046fc:	f040 826b 	bne.w	8004bd6 <_dtoa_r+0x976>
 8004700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004704:	2200      	movs	r2, #0
 8004706:	4b40      	ldr	r3, [pc, #256]	; (8004808 <_dtoa_r+0x5a8>)
 8004708:	f7fb ffb2 	bl	8000670 <__aeabi_dmul>
 800470c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004710:	f7fc fa34 	bl	8000b7c <__aeabi_dcmpge>
 8004714:	9c08      	ldr	r4, [sp, #32]
 8004716:	4626      	mov	r6, r4
 8004718:	2800      	cmp	r0, #0
 800471a:	f040 8241 	bne.w	8004ba0 <_dtoa_r+0x940>
 800471e:	2331      	movs	r3, #49	; 0x31
 8004720:	9f03      	ldr	r7, [sp, #12]
 8004722:	f10b 0b01 	add.w	fp, fp, #1
 8004726:	f807 3b01 	strb.w	r3, [r7], #1
 800472a:	e23d      	b.n	8004ba8 <_dtoa_r+0x948>
 800472c:	07e2      	lsls	r2, r4, #31
 800472e:	d505      	bpl.n	800473c <_dtoa_r+0x4dc>
 8004730:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004734:	f7fb ff9c 	bl	8000670 <__aeabi_dmul>
 8004738:	2301      	movs	r3, #1
 800473a:	3701      	adds	r7, #1
 800473c:	1064      	asrs	r4, r4, #1
 800473e:	3608      	adds	r6, #8
 8004740:	e76d      	b.n	800461e <_dtoa_r+0x3be>
 8004742:	2702      	movs	r7, #2
 8004744:	e770      	b.n	8004628 <_dtoa_r+0x3c8>
 8004746:	46d8      	mov	r8, fp
 8004748:	9c08      	ldr	r4, [sp, #32]
 800474a:	e78f      	b.n	800466c <_dtoa_r+0x40c>
 800474c:	9903      	ldr	r1, [sp, #12]
 800474e:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <_dtoa_r+0x594>)
 8004750:	4421      	add	r1, r4
 8004752:	9112      	str	r1, [sp, #72]	; 0x48
 8004754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004756:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800475a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800475e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004762:	2900      	cmp	r1, #0
 8004764:	d054      	beq.n	8004810 <_dtoa_r+0x5b0>
 8004766:	2000      	movs	r0, #0
 8004768:	4928      	ldr	r1, [pc, #160]	; (800480c <_dtoa_r+0x5ac>)
 800476a:	f7fc f8ab 	bl	80008c4 <__aeabi_ddiv>
 800476e:	463b      	mov	r3, r7
 8004770:	4632      	mov	r2, r6
 8004772:	f7fb fdc5 	bl	8000300 <__aeabi_dsub>
 8004776:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800477a:	9f03      	ldr	r7, [sp, #12]
 800477c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004780:	f7fc fa26 	bl	8000bd0 <__aeabi_d2iz>
 8004784:	4604      	mov	r4, r0
 8004786:	f7fb ff09 	bl	800059c <__aeabi_i2d>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004792:	f7fb fdb5 	bl	8000300 <__aeabi_dsub>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	3430      	adds	r4, #48	; 0x30
 800479c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047a4:	f807 4b01 	strb.w	r4, [r7], #1
 80047a8:	f7fc f9d4 	bl	8000b54 <__aeabi_dcmplt>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d173      	bne.n	8004898 <_dtoa_r+0x638>
 80047b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b4:	2000      	movs	r0, #0
 80047b6:	4911      	ldr	r1, [pc, #68]	; (80047fc <_dtoa_r+0x59c>)
 80047b8:	f7fb fda2 	bl	8000300 <__aeabi_dsub>
 80047bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047c0:	f7fc f9c8 	bl	8000b54 <__aeabi_dcmplt>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f040 80b6 	bne.w	8004936 <_dtoa_r+0x6d6>
 80047ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047cc:	429f      	cmp	r7, r3
 80047ce:	f43f af7a 	beq.w	80046c6 <_dtoa_r+0x466>
 80047d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047d6:	2200      	movs	r2, #0
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <_dtoa_r+0x5a0>)
 80047da:	f7fb ff49 	bl	8000670 <__aeabi_dmul>
 80047de:	2200      	movs	r2, #0
 80047e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <_dtoa_r+0x5a0>)
 80047ea:	f7fb ff41 	bl	8000670 <__aeabi_dmul>
 80047ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047f2:	e7c3      	b.n	800477c <_dtoa_r+0x51c>
 80047f4:	08006050 	.word	0x08006050
 80047f8:	08006028 	.word	0x08006028
 80047fc:	3ff00000 	.word	0x3ff00000
 8004800:	40240000 	.word	0x40240000
 8004804:	401c0000 	.word	0x401c0000
 8004808:	40140000 	.word	0x40140000
 800480c:	3fe00000 	.word	0x3fe00000
 8004810:	4630      	mov	r0, r6
 8004812:	4639      	mov	r1, r7
 8004814:	f7fb ff2c 	bl	8000670 <__aeabi_dmul>
 8004818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800481a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800481e:	9c03      	ldr	r4, [sp, #12]
 8004820:	9314      	str	r3, [sp, #80]	; 0x50
 8004822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004826:	f7fc f9d3 	bl	8000bd0 <__aeabi_d2iz>
 800482a:	9015      	str	r0, [sp, #84]	; 0x54
 800482c:	f7fb feb6 	bl	800059c <__aeabi_i2d>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004838:	f7fb fd62 	bl	8000300 <__aeabi_dsub>
 800483c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800483e:	4606      	mov	r6, r0
 8004840:	3330      	adds	r3, #48	; 0x30
 8004842:	f804 3b01 	strb.w	r3, [r4], #1
 8004846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004848:	460f      	mov	r7, r1
 800484a:	429c      	cmp	r4, r3
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	d124      	bne.n	800489c <_dtoa_r+0x63c>
 8004852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004856:	4baf      	ldr	r3, [pc, #700]	; (8004b14 <_dtoa_r+0x8b4>)
 8004858:	f7fb fd54 	bl	8000304 <__adddf3>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4630      	mov	r0, r6
 8004862:	4639      	mov	r1, r7
 8004864:	f7fc f994 	bl	8000b90 <__aeabi_dcmpgt>
 8004868:	2800      	cmp	r0, #0
 800486a:	d163      	bne.n	8004934 <_dtoa_r+0x6d4>
 800486c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004870:	2000      	movs	r0, #0
 8004872:	49a8      	ldr	r1, [pc, #672]	; (8004b14 <_dtoa_r+0x8b4>)
 8004874:	f7fb fd44 	bl	8000300 <__aeabi_dsub>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4630      	mov	r0, r6
 800487e:	4639      	mov	r1, r7
 8004880:	f7fc f968 	bl	8000b54 <__aeabi_dcmplt>
 8004884:	2800      	cmp	r0, #0
 8004886:	f43f af1e 	beq.w	80046c6 <_dtoa_r+0x466>
 800488a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800488c:	1e7b      	subs	r3, r7, #1
 800488e:	9314      	str	r3, [sp, #80]	; 0x50
 8004890:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004894:	2b30      	cmp	r3, #48	; 0x30
 8004896:	d0f8      	beq.n	800488a <_dtoa_r+0x62a>
 8004898:	46c3      	mov	fp, r8
 800489a:	e03b      	b.n	8004914 <_dtoa_r+0x6b4>
 800489c:	4b9e      	ldr	r3, [pc, #632]	; (8004b18 <_dtoa_r+0x8b8>)
 800489e:	f7fb fee7 	bl	8000670 <__aeabi_dmul>
 80048a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048a6:	e7bc      	b.n	8004822 <_dtoa_r+0x5c2>
 80048a8:	9f03      	ldr	r7, [sp, #12]
 80048aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80048ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048b2:	4640      	mov	r0, r8
 80048b4:	4649      	mov	r1, r9
 80048b6:	f7fc f805 	bl	80008c4 <__aeabi_ddiv>
 80048ba:	f7fc f989 	bl	8000bd0 <__aeabi_d2iz>
 80048be:	4604      	mov	r4, r0
 80048c0:	f7fb fe6c 	bl	800059c <__aeabi_i2d>
 80048c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048c8:	f7fb fed2 	bl	8000670 <__aeabi_dmul>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4640      	mov	r0, r8
 80048d2:	4649      	mov	r1, r9
 80048d4:	f7fb fd14 	bl	8000300 <__aeabi_dsub>
 80048d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80048dc:	f807 6b01 	strb.w	r6, [r7], #1
 80048e0:	9e03      	ldr	r6, [sp, #12]
 80048e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80048e6:	1bbe      	subs	r6, r7, r6
 80048e8:	45b4      	cmp	ip, r6
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	d136      	bne.n	800495e <_dtoa_r+0x6fe>
 80048f0:	f7fb fd08 	bl	8000304 <__adddf3>
 80048f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048f8:	4680      	mov	r8, r0
 80048fa:	4689      	mov	r9, r1
 80048fc:	f7fc f948 	bl	8000b90 <__aeabi_dcmpgt>
 8004900:	bb58      	cbnz	r0, 800495a <_dtoa_r+0x6fa>
 8004902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004906:	4640      	mov	r0, r8
 8004908:	4649      	mov	r1, r9
 800490a:	f7fc f919 	bl	8000b40 <__aeabi_dcmpeq>
 800490e:	b108      	cbz	r0, 8004914 <_dtoa_r+0x6b4>
 8004910:	07e3      	lsls	r3, r4, #31
 8004912:	d422      	bmi.n	800495a <_dtoa_r+0x6fa>
 8004914:	4651      	mov	r1, sl
 8004916:	4628      	mov	r0, r5
 8004918:	f000 fbc2 	bl	80050a0 <_Bfree>
 800491c:	2300      	movs	r3, #0
 800491e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004920:	703b      	strb	r3, [r7, #0]
 8004922:	f10b 0301 	add.w	r3, fp, #1
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800492a:	2b00      	cmp	r3, #0
 800492c:	f43f ace6 	beq.w	80042fc <_dtoa_r+0x9c>
 8004930:	601f      	str	r7, [r3, #0]
 8004932:	e4e3      	b.n	80042fc <_dtoa_r+0x9c>
 8004934:	4627      	mov	r7, r4
 8004936:	463b      	mov	r3, r7
 8004938:	461f      	mov	r7, r3
 800493a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800493e:	2a39      	cmp	r2, #57	; 0x39
 8004940:	d107      	bne.n	8004952 <_dtoa_r+0x6f2>
 8004942:	9a03      	ldr	r2, [sp, #12]
 8004944:	429a      	cmp	r2, r3
 8004946:	d1f7      	bne.n	8004938 <_dtoa_r+0x6d8>
 8004948:	2230      	movs	r2, #48	; 0x30
 800494a:	9903      	ldr	r1, [sp, #12]
 800494c:	f108 0801 	add.w	r8, r8, #1
 8004950:	700a      	strb	r2, [r1, #0]
 8004952:	781a      	ldrb	r2, [r3, #0]
 8004954:	3201      	adds	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	e79e      	b.n	8004898 <_dtoa_r+0x638>
 800495a:	46d8      	mov	r8, fp
 800495c:	e7eb      	b.n	8004936 <_dtoa_r+0x6d6>
 800495e:	2200      	movs	r2, #0
 8004960:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <_dtoa_r+0x8b8>)
 8004962:	f7fb fe85 	bl	8000670 <__aeabi_dmul>
 8004966:	2200      	movs	r2, #0
 8004968:	2300      	movs	r3, #0
 800496a:	4680      	mov	r8, r0
 800496c:	4689      	mov	r9, r1
 800496e:	f7fc f8e7 	bl	8000b40 <__aeabi_dcmpeq>
 8004972:	2800      	cmp	r0, #0
 8004974:	d09b      	beq.n	80048ae <_dtoa_r+0x64e>
 8004976:	e7cd      	b.n	8004914 <_dtoa_r+0x6b4>
 8004978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800497a:	2a00      	cmp	r2, #0
 800497c:	f000 80c4 	beq.w	8004b08 <_dtoa_r+0x8a8>
 8004980:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004982:	2a01      	cmp	r2, #1
 8004984:	f300 80a8 	bgt.w	8004ad8 <_dtoa_r+0x878>
 8004988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800498a:	2a00      	cmp	r2, #0
 800498c:	f000 80a0 	beq.w	8004ad0 <_dtoa_r+0x870>
 8004990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004994:	464f      	mov	r7, r9
 8004996:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800499a:	2101      	movs	r1, #1
 800499c:	441a      	add	r2, r3
 800499e:	4628      	mov	r0, r5
 80049a0:	4499      	add	r9, r3
 80049a2:	9209      	str	r2, [sp, #36]	; 0x24
 80049a4:	f000 fc32 	bl	800520c <__i2b>
 80049a8:	4606      	mov	r6, r0
 80049aa:	b15f      	cbz	r7, 80049c4 <_dtoa_r+0x764>
 80049ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dd08      	ble.n	80049c4 <_dtoa_r+0x764>
 80049b2:	42bb      	cmp	r3, r7
 80049b4:	bfa8      	it	ge
 80049b6:	463b      	movge	r3, r7
 80049b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ba:	eba9 0903 	sub.w	r9, r9, r3
 80049be:	1aff      	subs	r7, r7, r3
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	9309      	str	r3, [sp, #36]	; 0x24
 80049c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049c6:	b1f3      	cbz	r3, 8004a06 <_dtoa_r+0x7a6>
 80049c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80a0 	beq.w	8004b10 <_dtoa_r+0x8b0>
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	dd10      	ble.n	80049f6 <_dtoa_r+0x796>
 80049d4:	4631      	mov	r1, r6
 80049d6:	4622      	mov	r2, r4
 80049d8:	4628      	mov	r0, r5
 80049da:	f000 fcd5 	bl	8005388 <__pow5mult>
 80049de:	4652      	mov	r2, sl
 80049e0:	4601      	mov	r1, r0
 80049e2:	4606      	mov	r6, r0
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 fc27 	bl	8005238 <__multiply>
 80049ea:	4680      	mov	r8, r0
 80049ec:	4651      	mov	r1, sl
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 fb56 	bl	80050a0 <_Bfree>
 80049f4:	46c2      	mov	sl, r8
 80049f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f8:	1b1a      	subs	r2, r3, r4
 80049fa:	d004      	beq.n	8004a06 <_dtoa_r+0x7a6>
 80049fc:	4651      	mov	r1, sl
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 fcc2 	bl	8005388 <__pow5mult>
 8004a04:	4682      	mov	sl, r0
 8004a06:	2101      	movs	r1, #1
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f000 fbff 	bl	800520c <__i2b>
 8004a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a10:	4604      	mov	r4, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f340 8082 	ble.w	8004b1c <_dtoa_r+0x8bc>
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f000 fcb3 	bl	8005388 <__pow5mult>
 8004a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a24:	4604      	mov	r4, r0
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	dd7b      	ble.n	8004b22 <_dtoa_r+0x8c2>
 8004a2a:	f04f 0800 	mov.w	r8, #0
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a34:	6918      	ldr	r0, [r3, #16]
 8004a36:	f000 fb9b 	bl	8005170 <__hi0bits>
 8004a3a:	f1c0 0020 	rsb	r0, r0, #32
 8004a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a40:	4418      	add	r0, r3
 8004a42:	f010 001f 	ands.w	r0, r0, #31
 8004a46:	f000 8092 	beq.w	8004b6e <_dtoa_r+0x90e>
 8004a4a:	f1c0 0320 	rsb	r3, r0, #32
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	f340 8085 	ble.w	8004b5e <_dtoa_r+0x8fe>
 8004a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a56:	f1c0 001c 	rsb	r0, r0, #28
 8004a5a:	4403      	add	r3, r0
 8004a5c:	4481      	add	r9, r0
 8004a5e:	4407      	add	r7, r0
 8004a60:	9309      	str	r3, [sp, #36]	; 0x24
 8004a62:	f1b9 0f00 	cmp.w	r9, #0
 8004a66:	dd05      	ble.n	8004a74 <_dtoa_r+0x814>
 8004a68:	4651      	mov	r1, sl
 8004a6a:	464a      	mov	r2, r9
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 fce5 	bl	800543c <__lshift>
 8004a72:	4682      	mov	sl, r0
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	dd05      	ble.n	8004a86 <_dtoa_r+0x826>
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f000 fcdc 	bl	800543c <__lshift>
 8004a84:	4604      	mov	r4, r0
 8004a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d072      	beq.n	8004b72 <_dtoa_r+0x912>
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4650      	mov	r0, sl
 8004a90:	f000 fd40 	bl	8005514 <__mcmp>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	da6c      	bge.n	8004b72 <_dtoa_r+0x912>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	220a      	movs	r2, #10
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 fb20 	bl	80050e4 <__multadd>
 8004aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aa6:	4682      	mov	sl, r0
 8004aa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 81ac 	beq.w	8004e0a <_dtoa_r+0xbaa>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	220a      	movs	r2, #10
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 fb13 	bl	80050e4 <__multadd>
 8004abe:	9b06      	ldr	r3, [sp, #24]
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f300 8093 	bgt.w	8004bee <_dtoa_r+0x98e>
 8004ac8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	dc59      	bgt.n	8004b82 <_dtoa_r+0x922>
 8004ace:	e08e      	b.n	8004bee <_dtoa_r+0x98e>
 8004ad0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ad2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ad6:	e75d      	b.n	8004994 <_dtoa_r+0x734>
 8004ad8:	9b08      	ldr	r3, [sp, #32]
 8004ada:	1e5c      	subs	r4, r3, #1
 8004adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ade:	42a3      	cmp	r3, r4
 8004ae0:	bfbf      	itttt	lt
 8004ae2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004ae4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004ae6:	1ae3      	sublt	r3, r4, r3
 8004ae8:	18d2      	addlt	r2, r2, r3
 8004aea:	bfa8      	it	ge
 8004aec:	1b1c      	subge	r4, r3, r4
 8004aee:	9b08      	ldr	r3, [sp, #32]
 8004af0:	bfbe      	ittt	lt
 8004af2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004af4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004af6:	2400      	movlt	r4, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bfb5      	itete	lt
 8004afc:	eba9 0703 	sublt.w	r7, r9, r3
 8004b00:	464f      	movge	r7, r9
 8004b02:	2300      	movlt	r3, #0
 8004b04:	9b08      	ldrge	r3, [sp, #32]
 8004b06:	e747      	b.n	8004998 <_dtoa_r+0x738>
 8004b08:	464f      	mov	r7, r9
 8004b0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004b0e:	e74c      	b.n	80049aa <_dtoa_r+0x74a>
 8004b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b12:	e773      	b.n	80049fc <_dtoa_r+0x79c>
 8004b14:	3fe00000 	.word	0x3fe00000
 8004b18:	40240000 	.word	0x40240000
 8004b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	dc18      	bgt.n	8004b54 <_dtoa_r+0x8f4>
 8004b22:	9b04      	ldr	r3, [sp, #16]
 8004b24:	b9b3      	cbnz	r3, 8004b54 <_dtoa_r+0x8f4>
 8004b26:	9b05      	ldr	r3, [sp, #20]
 8004b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b2c:	b993      	cbnz	r3, 8004b54 <_dtoa_r+0x8f4>
 8004b2e:	9b05      	ldr	r3, [sp, #20]
 8004b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b34:	0d1b      	lsrs	r3, r3, #20
 8004b36:	051b      	lsls	r3, r3, #20
 8004b38:	b17b      	cbz	r3, 8004b5a <_dtoa_r+0x8fa>
 8004b3a:	f04f 0801 	mov.w	r8, #1
 8004b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b40:	f109 0901 	add.w	r9, r9, #1
 8004b44:	3301      	adds	r3, #1
 8004b46:	9309      	str	r3, [sp, #36]	; 0x24
 8004b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f47f af6f 	bne.w	8004a2e <_dtoa_r+0x7ce>
 8004b50:	2001      	movs	r0, #1
 8004b52:	e774      	b.n	8004a3e <_dtoa_r+0x7de>
 8004b54:	f04f 0800 	mov.w	r8, #0
 8004b58:	e7f6      	b.n	8004b48 <_dtoa_r+0x8e8>
 8004b5a:	4698      	mov	r8, r3
 8004b5c:	e7f4      	b.n	8004b48 <_dtoa_r+0x8e8>
 8004b5e:	d080      	beq.n	8004a62 <_dtoa_r+0x802>
 8004b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b62:	331c      	adds	r3, #28
 8004b64:	441a      	add	r2, r3
 8004b66:	4499      	add	r9, r3
 8004b68:	441f      	add	r7, r3
 8004b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b6c:	e779      	b.n	8004a62 <_dtoa_r+0x802>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	e7f6      	b.n	8004b60 <_dtoa_r+0x900>
 8004b72:	9b08      	ldr	r3, [sp, #32]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	dc34      	bgt.n	8004be2 <_dtoa_r+0x982>
 8004b78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	dd31      	ble.n	8004be2 <_dtoa_r+0x982>
 8004b7e:	9b08      	ldr	r3, [sp, #32]
 8004b80:	9306      	str	r3, [sp, #24]
 8004b82:	9b06      	ldr	r3, [sp, #24]
 8004b84:	b963      	cbnz	r3, 8004ba0 <_dtoa_r+0x940>
 8004b86:	4621      	mov	r1, r4
 8004b88:	2205      	movs	r2, #5
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 faaa 	bl	80050e4 <__multadd>
 8004b90:	4601      	mov	r1, r0
 8004b92:	4604      	mov	r4, r0
 8004b94:	4650      	mov	r0, sl
 8004b96:	f000 fcbd 	bl	8005514 <__mcmp>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f73f adbf 	bgt.w	800471e <_dtoa_r+0x4be>
 8004ba0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ba2:	9f03      	ldr	r7, [sp, #12]
 8004ba4:	ea6f 0b03 	mvn.w	fp, r3
 8004ba8:	f04f 0800 	mov.w	r8, #0
 8004bac:	4621      	mov	r1, r4
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 fa76 	bl	80050a0 <_Bfree>
 8004bb4:	2e00      	cmp	r6, #0
 8004bb6:	f43f aead 	beq.w	8004914 <_dtoa_r+0x6b4>
 8004bba:	f1b8 0f00 	cmp.w	r8, #0
 8004bbe:	d005      	beq.n	8004bcc <_dtoa_r+0x96c>
 8004bc0:	45b0      	cmp	r8, r6
 8004bc2:	d003      	beq.n	8004bcc <_dtoa_r+0x96c>
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 fa6a 	bl	80050a0 <_Bfree>
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 fa66 	bl	80050a0 <_Bfree>
 8004bd4:	e69e      	b.n	8004914 <_dtoa_r+0x6b4>
 8004bd6:	2400      	movs	r4, #0
 8004bd8:	4626      	mov	r6, r4
 8004bda:	e7e1      	b.n	8004ba0 <_dtoa_r+0x940>
 8004bdc:	46c3      	mov	fp, r8
 8004bde:	4626      	mov	r6, r4
 8004be0:	e59d      	b.n	800471e <_dtoa_r+0x4be>
 8004be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80c8 	beq.w	8004d7a <_dtoa_r+0xb1a>
 8004bea:	9b08      	ldr	r3, [sp, #32]
 8004bec:	9306      	str	r3, [sp, #24]
 8004bee:	2f00      	cmp	r7, #0
 8004bf0:	dd05      	ble.n	8004bfe <_dtoa_r+0x99e>
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	463a      	mov	r2, r7
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f000 fc20 	bl	800543c <__lshift>
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	f1b8 0f00 	cmp.w	r8, #0
 8004c02:	d05b      	beq.n	8004cbc <_dtoa_r+0xa5c>
 8004c04:	4628      	mov	r0, r5
 8004c06:	6871      	ldr	r1, [r6, #4]
 8004c08:	f000 fa0a 	bl	8005020 <_Balloc>
 8004c0c:	4607      	mov	r7, r0
 8004c0e:	b928      	cbnz	r0, 8004c1c <_dtoa_r+0x9bc>
 8004c10:	4602      	mov	r2, r0
 8004c12:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004c16:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <_dtoa_r+0xbbc>)
 8004c18:	f7ff bb36 	b.w	8004288 <_dtoa_r+0x28>
 8004c1c:	6932      	ldr	r2, [r6, #16]
 8004c1e:	f106 010c 	add.w	r1, r6, #12
 8004c22:	3202      	adds	r2, #2
 8004c24:	0092      	lsls	r2, r2, #2
 8004c26:	300c      	adds	r0, #12
 8004c28:	f001 f804 	bl	8005c34 <memcpy>
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	4639      	mov	r1, r7
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 fc03 	bl	800543c <__lshift>
 8004c36:	46b0      	mov	r8, r6
 8004c38:	4606      	mov	r6, r0
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	9a03      	ldr	r2, [sp, #12]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	9308      	str	r3, [sp, #32]
 8004c42:	9b06      	ldr	r3, [sp, #24]
 8004c44:	4413      	add	r3, r2
 8004c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c48:	9b04      	ldr	r3, [sp, #16]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c50:	9b08      	ldr	r3, [sp, #32]
 8004c52:	4621      	mov	r1, r4
 8004c54:	3b01      	subs	r3, #1
 8004c56:	4650      	mov	r0, sl
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	f7ff fa76 	bl	800414a <quorem>
 8004c5e:	4641      	mov	r1, r8
 8004c60:	9006      	str	r0, [sp, #24]
 8004c62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c66:	4650      	mov	r0, sl
 8004c68:	f000 fc54 	bl	8005514 <__mcmp>
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	9009      	str	r0, [sp, #36]	; 0x24
 8004c70:	4621      	mov	r1, r4
 8004c72:	4628      	mov	r0, r5
 8004c74:	f000 fc6a 	bl	800554c <__mdiff>
 8004c78:	68c2      	ldr	r2, [r0, #12]
 8004c7a:	4607      	mov	r7, r0
 8004c7c:	bb02      	cbnz	r2, 8004cc0 <_dtoa_r+0xa60>
 8004c7e:	4601      	mov	r1, r0
 8004c80:	4650      	mov	r0, sl
 8004c82:	f000 fc47 	bl	8005514 <__mcmp>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4639      	mov	r1, r7
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	920c      	str	r2, [sp, #48]	; 0x30
 8004c8e:	f000 fa07 	bl	80050a0 <_Bfree>
 8004c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c96:	9f08      	ldr	r7, [sp, #32]
 8004c98:	ea43 0102 	orr.w	r1, r3, r2
 8004c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c9e:	4319      	orrs	r1, r3
 8004ca0:	d110      	bne.n	8004cc4 <_dtoa_r+0xa64>
 8004ca2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004ca6:	d029      	beq.n	8004cfc <_dtoa_r+0xa9c>
 8004ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dd02      	ble.n	8004cb4 <_dtoa_r+0xa54>
 8004cae:	9b06      	ldr	r3, [sp, #24]
 8004cb0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004cb4:	9b04      	ldr	r3, [sp, #16]
 8004cb6:	f883 9000 	strb.w	r9, [r3]
 8004cba:	e777      	b.n	8004bac <_dtoa_r+0x94c>
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	e7ba      	b.n	8004c36 <_dtoa_r+0x9d6>
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	e7e1      	b.n	8004c88 <_dtoa_r+0xa28>
 8004cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	db04      	blt.n	8004cd4 <_dtoa_r+0xa74>
 8004cca:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	d120      	bne.n	8004d16 <_dtoa_r+0xab6>
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	dded      	ble.n	8004cb4 <_dtoa_r+0xa54>
 8004cd8:	4651      	mov	r1, sl
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f000 fbad 	bl	800543c <__lshift>
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4682      	mov	sl, r0
 8004ce6:	f000 fc15 	bl	8005514 <__mcmp>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	dc03      	bgt.n	8004cf6 <_dtoa_r+0xa96>
 8004cee:	d1e1      	bne.n	8004cb4 <_dtoa_r+0xa54>
 8004cf0:	f019 0f01 	tst.w	r9, #1
 8004cf4:	d0de      	beq.n	8004cb4 <_dtoa_r+0xa54>
 8004cf6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cfa:	d1d8      	bne.n	8004cae <_dtoa_r+0xa4e>
 8004cfc:	2339      	movs	r3, #57	; 0x39
 8004cfe:	9a04      	ldr	r2, [sp, #16]
 8004d00:	7013      	strb	r3, [r2, #0]
 8004d02:	463b      	mov	r3, r7
 8004d04:	461f      	mov	r7, r3
 8004d06:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	2a39      	cmp	r2, #57	; 0x39
 8004d0e:	d06b      	beq.n	8004de8 <_dtoa_r+0xb88>
 8004d10:	3201      	adds	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e74a      	b.n	8004bac <_dtoa_r+0x94c>
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	dd07      	ble.n	8004d2a <_dtoa_r+0xaca>
 8004d1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d1e:	d0ed      	beq.n	8004cfc <_dtoa_r+0xa9c>
 8004d20:	9a04      	ldr	r2, [sp, #16]
 8004d22:	f109 0301 	add.w	r3, r9, #1
 8004d26:	7013      	strb	r3, [r2, #0]
 8004d28:	e740      	b.n	8004bac <_dtoa_r+0x94c>
 8004d2a:	9b08      	ldr	r3, [sp, #32]
 8004d2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d2e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d042      	beq.n	8004dbc <_dtoa_r+0xb5c>
 8004d36:	4651      	mov	r1, sl
 8004d38:	2300      	movs	r3, #0
 8004d3a:	220a      	movs	r2, #10
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f000 f9d1 	bl	80050e4 <__multadd>
 8004d42:	45b0      	cmp	r8, r6
 8004d44:	4682      	mov	sl, r0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	f04f 020a 	mov.w	r2, #10
 8004d4e:	4641      	mov	r1, r8
 8004d50:	4628      	mov	r0, r5
 8004d52:	d107      	bne.n	8004d64 <_dtoa_r+0xb04>
 8004d54:	f000 f9c6 	bl	80050e4 <__multadd>
 8004d58:	4680      	mov	r8, r0
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	9b08      	ldr	r3, [sp, #32]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	9308      	str	r3, [sp, #32]
 8004d62:	e775      	b.n	8004c50 <_dtoa_r+0x9f0>
 8004d64:	f000 f9be 	bl	80050e4 <__multadd>
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4680      	mov	r8, r0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	220a      	movs	r2, #10
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 f9b7 	bl	80050e4 <__multadd>
 8004d76:	4606      	mov	r6, r0
 8004d78:	e7f0      	b.n	8004d5c <_dtoa_r+0xafc>
 8004d7a:	9b08      	ldr	r3, [sp, #32]
 8004d7c:	9306      	str	r3, [sp, #24]
 8004d7e:	9f03      	ldr	r7, [sp, #12]
 8004d80:	4621      	mov	r1, r4
 8004d82:	4650      	mov	r0, sl
 8004d84:	f7ff f9e1 	bl	800414a <quorem>
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004d8e:	f807 9b01 	strb.w	r9, [r7], #1
 8004d92:	1afa      	subs	r2, r7, r3
 8004d94:	9b06      	ldr	r3, [sp, #24]
 8004d96:	4293      	cmp	r3, r2
 8004d98:	dd07      	ble.n	8004daa <_dtoa_r+0xb4a>
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	220a      	movs	r2, #10
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 f99f 	bl	80050e4 <__multadd>
 8004da6:	4682      	mov	sl, r0
 8004da8:	e7ea      	b.n	8004d80 <_dtoa_r+0xb20>
 8004daa:	9b06      	ldr	r3, [sp, #24]
 8004dac:	f04f 0800 	mov.w	r8, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bfcc      	ite	gt
 8004db4:	461f      	movgt	r7, r3
 8004db6:	2701      	movle	r7, #1
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	441f      	add	r7, r3
 8004dbc:	4651      	mov	r1, sl
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f000 fb3b 	bl	800543c <__lshift>
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4682      	mov	sl, r0
 8004dca:	f000 fba3 	bl	8005514 <__mcmp>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	dc97      	bgt.n	8004d02 <_dtoa_r+0xaa2>
 8004dd2:	d102      	bne.n	8004dda <_dtoa_r+0xb7a>
 8004dd4:	f019 0f01 	tst.w	r9, #1
 8004dd8:	d193      	bne.n	8004d02 <_dtoa_r+0xaa2>
 8004dda:	463b      	mov	r3, r7
 8004ddc:	461f      	mov	r7, r3
 8004dde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004de2:	2a30      	cmp	r2, #48	; 0x30
 8004de4:	d0fa      	beq.n	8004ddc <_dtoa_r+0xb7c>
 8004de6:	e6e1      	b.n	8004bac <_dtoa_r+0x94c>
 8004de8:	9a03      	ldr	r2, [sp, #12]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d18a      	bne.n	8004d04 <_dtoa_r+0xaa4>
 8004dee:	2331      	movs	r3, #49	; 0x31
 8004df0:	f10b 0b01 	add.w	fp, fp, #1
 8004df4:	e797      	b.n	8004d26 <_dtoa_r+0xac6>
 8004df6:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <_dtoa_r+0xbc0>)
 8004df8:	f7ff ba9f 	b.w	800433a <_dtoa_r+0xda>
 8004dfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f47f aa77 	bne.w	80042f2 <_dtoa_r+0x92>
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <_dtoa_r+0xbc4>)
 8004e06:	f7ff ba98 	b.w	800433a <_dtoa_r+0xda>
 8004e0a:	9b06      	ldr	r3, [sp, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	dcb6      	bgt.n	8004d7e <_dtoa_r+0xb1e>
 8004e10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	f73f aeb5 	bgt.w	8004b82 <_dtoa_r+0x922>
 8004e18:	e7b1      	b.n	8004d7e <_dtoa_r+0xb1e>
 8004e1a:	bf00      	nop
 8004e1c:	08005fbc 	.word	0x08005fbc
 8004e20:	08005f1c 	.word	0x08005f1c
 8004e24:	08005f40 	.word	0x08005f40

08004e28 <_free_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	d040      	beq.n	8004eb2 <_free_r+0x8a>
 8004e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e34:	1f0c      	subs	r4, r1, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfb8      	it	lt
 8004e3a:	18e4      	addlt	r4, r4, r3
 8004e3c:	f000 f8e4 	bl	8005008 <__malloc_lock>
 8004e40:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <_free_r+0x8c>)
 8004e42:	6813      	ldr	r3, [r2, #0]
 8004e44:	b933      	cbnz	r3, 8004e54 <_free_r+0x2c>
 8004e46:	6063      	str	r3, [r4, #4]
 8004e48:	6014      	str	r4, [r2, #0]
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e50:	f000 b8e0 	b.w	8005014 <__malloc_unlock>
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	d908      	bls.n	8004e6a <_free_r+0x42>
 8004e58:	6820      	ldr	r0, [r4, #0]
 8004e5a:	1821      	adds	r1, r4, r0
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	bf01      	itttt	eq
 8004e60:	6819      	ldreq	r1, [r3, #0]
 8004e62:	685b      	ldreq	r3, [r3, #4]
 8004e64:	1809      	addeq	r1, r1, r0
 8004e66:	6021      	streq	r1, [r4, #0]
 8004e68:	e7ed      	b.n	8004e46 <_free_r+0x1e>
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	b10b      	cbz	r3, 8004e74 <_free_r+0x4c>
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	d9fa      	bls.n	8004e6a <_free_r+0x42>
 8004e74:	6811      	ldr	r1, [r2, #0]
 8004e76:	1850      	adds	r0, r2, r1
 8004e78:	42a0      	cmp	r0, r4
 8004e7a:	d10b      	bne.n	8004e94 <_free_r+0x6c>
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	4401      	add	r1, r0
 8004e80:	1850      	adds	r0, r2, r1
 8004e82:	4283      	cmp	r3, r0
 8004e84:	6011      	str	r1, [r2, #0]
 8004e86:	d1e0      	bne.n	8004e4a <_free_r+0x22>
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4408      	add	r0, r1
 8004e8e:	6010      	str	r0, [r2, #0]
 8004e90:	6053      	str	r3, [r2, #4]
 8004e92:	e7da      	b.n	8004e4a <_free_r+0x22>
 8004e94:	d902      	bls.n	8004e9c <_free_r+0x74>
 8004e96:	230c      	movs	r3, #12
 8004e98:	602b      	str	r3, [r5, #0]
 8004e9a:	e7d6      	b.n	8004e4a <_free_r+0x22>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	1821      	adds	r1, r4, r0
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	bf01      	itttt	eq
 8004ea4:	6819      	ldreq	r1, [r3, #0]
 8004ea6:	685b      	ldreq	r3, [r3, #4]
 8004ea8:	1809      	addeq	r1, r1, r0
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6054      	str	r4, [r2, #4]
 8004eb0:	e7cb      	b.n	8004e4a <_free_r+0x22>
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	200003d8 	.word	0x200003d8

08004eb8 <malloc>:
 8004eb8:	4b02      	ldr	r3, [pc, #8]	; (8004ec4 <malloc+0xc>)
 8004eba:	4601      	mov	r1, r0
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	f000 b823 	b.w	8004f08 <_malloc_r>
 8004ec2:	bf00      	nop
 8004ec4:	20000064 	.word	0x20000064

08004ec8 <sbrk_aligned>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	4e0e      	ldr	r6, [pc, #56]	; (8004f04 <sbrk_aligned+0x3c>)
 8004ecc:	460c      	mov	r4, r1
 8004ece:	6831      	ldr	r1, [r6, #0]
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	b911      	cbnz	r1, 8004eda <sbrk_aligned+0x12>
 8004ed4:	f000 fe9e 	bl	8005c14 <_sbrk_r>
 8004ed8:	6030      	str	r0, [r6, #0]
 8004eda:	4621      	mov	r1, r4
 8004edc:	4628      	mov	r0, r5
 8004ede:	f000 fe99 	bl	8005c14 <_sbrk_r>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	d00a      	beq.n	8004efc <sbrk_aligned+0x34>
 8004ee6:	1cc4      	adds	r4, r0, #3
 8004ee8:	f024 0403 	bic.w	r4, r4, #3
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d007      	beq.n	8004f00 <sbrk_aligned+0x38>
 8004ef0:	1a21      	subs	r1, r4, r0
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 fe8e 	bl	8005c14 <_sbrk_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d101      	bne.n	8004f00 <sbrk_aligned+0x38>
 8004efc:	f04f 34ff 	mov.w	r4, #4294967295
 8004f00:	4620      	mov	r0, r4
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	200003dc 	.word	0x200003dc

08004f08 <_malloc_r>:
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	1ccd      	adds	r5, r1, #3
 8004f0e:	f025 0503 	bic.w	r5, r5, #3
 8004f12:	3508      	adds	r5, #8
 8004f14:	2d0c      	cmp	r5, #12
 8004f16:	bf38      	it	cc
 8004f18:	250c      	movcc	r5, #12
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	db01      	blt.n	8004f24 <_malloc_r+0x1c>
 8004f20:	42a9      	cmp	r1, r5
 8004f22:	d905      	bls.n	8004f30 <_malloc_r+0x28>
 8004f24:	230c      	movs	r3, #12
 8004f26:	2600      	movs	r6, #0
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005004 <_malloc_r+0xfc>
 8004f34:	f000 f868 	bl	8005008 <__malloc_lock>
 8004f38:	f8d8 3000 	ldr.w	r3, [r8]
 8004f3c:	461c      	mov	r4, r3
 8004f3e:	bb5c      	cbnz	r4, 8004f98 <_malloc_r+0x90>
 8004f40:	4629      	mov	r1, r5
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff ffc0 	bl	8004ec8 <sbrk_aligned>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	d155      	bne.n	8004ffa <_malloc_r+0xf2>
 8004f4e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f52:	4626      	mov	r6, r4
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	d145      	bne.n	8004fe4 <_malloc_r+0xdc>
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	d048      	beq.n	8004fee <_malloc_r+0xe6>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4638      	mov	r0, r7
 8004f62:	eb04 0903 	add.w	r9, r4, r3
 8004f66:	f000 fe55 	bl	8005c14 <_sbrk_r>
 8004f6a:	4581      	cmp	r9, r0
 8004f6c:	d13f      	bne.n	8004fee <_malloc_r+0xe6>
 8004f6e:	6821      	ldr	r1, [r4, #0]
 8004f70:	4638      	mov	r0, r7
 8004f72:	1a6d      	subs	r5, r5, r1
 8004f74:	4629      	mov	r1, r5
 8004f76:	f7ff ffa7 	bl	8004ec8 <sbrk_aligned>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d037      	beq.n	8004fee <_malloc_r+0xe6>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	442b      	add	r3, r5
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	f8d8 3000 	ldr.w	r3, [r8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d038      	beq.n	8004ffe <_malloc_r+0xf6>
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	42a2      	cmp	r2, r4
 8004f90:	d12b      	bne.n	8004fea <_malloc_r+0xe2>
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e00f      	b.n	8004fb8 <_malloc_r+0xb0>
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	1b52      	subs	r2, r2, r5
 8004f9c:	d41f      	bmi.n	8004fde <_malloc_r+0xd6>
 8004f9e:	2a0b      	cmp	r2, #11
 8004fa0:	d917      	bls.n	8004fd2 <_malloc_r+0xca>
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	6025      	str	r5, [r4, #0]
 8004fa8:	bf18      	it	ne
 8004faa:	6059      	strne	r1, [r3, #4]
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	bf08      	it	eq
 8004fb0:	f8c8 1000 	streq.w	r1, [r8]
 8004fb4:	5162      	str	r2, [r4, r5]
 8004fb6:	604b      	str	r3, [r1, #4]
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f104 060b 	add.w	r6, r4, #11
 8004fbe:	f000 f829 	bl	8005014 <__malloc_unlock>
 8004fc2:	f026 0607 	bic.w	r6, r6, #7
 8004fc6:	1d23      	adds	r3, r4, #4
 8004fc8:	1af2      	subs	r2, r6, r3
 8004fca:	d0ae      	beq.n	8004f2a <_malloc_r+0x22>
 8004fcc:	1b9b      	subs	r3, r3, r6
 8004fce:	50a3      	str	r3, [r4, r2]
 8004fd0:	e7ab      	b.n	8004f2a <_malloc_r+0x22>
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	6862      	ldr	r2, [r4, #4]
 8004fd6:	d1dd      	bne.n	8004f94 <_malloc_r+0x8c>
 8004fd8:	f8c8 2000 	str.w	r2, [r8]
 8004fdc:	e7ec      	b.n	8004fb8 <_malloc_r+0xb0>
 8004fde:	4623      	mov	r3, r4
 8004fe0:	6864      	ldr	r4, [r4, #4]
 8004fe2:	e7ac      	b.n	8004f3e <_malloc_r+0x36>
 8004fe4:	4634      	mov	r4, r6
 8004fe6:	6876      	ldr	r6, [r6, #4]
 8004fe8:	e7b4      	b.n	8004f54 <_malloc_r+0x4c>
 8004fea:	4613      	mov	r3, r2
 8004fec:	e7cc      	b.n	8004f88 <_malloc_r+0x80>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	f000 f80e 	bl	8005014 <__malloc_unlock>
 8004ff8:	e797      	b.n	8004f2a <_malloc_r+0x22>
 8004ffa:	6025      	str	r5, [r4, #0]
 8004ffc:	e7dc      	b.n	8004fb8 <_malloc_r+0xb0>
 8004ffe:	605b      	str	r3, [r3, #4]
 8005000:	deff      	udf	#255	; 0xff
 8005002:	bf00      	nop
 8005004:	200003d8 	.word	0x200003d8

08005008 <__malloc_lock>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__malloc_lock+0x8>)
 800500a:	f7ff b88e 	b.w	800412a <__retarget_lock_acquire_recursive>
 800500e:	bf00      	nop
 8005010:	200003d4 	.word	0x200003d4

08005014 <__malloc_unlock>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__malloc_unlock+0x8>)
 8005016:	f7ff b889 	b.w	800412c <__retarget_lock_release_recursive>
 800501a:	bf00      	nop
 800501c:	200003d4 	.word	0x200003d4

08005020 <_Balloc>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	69c6      	ldr	r6, [r0, #28]
 8005024:	4604      	mov	r4, r0
 8005026:	460d      	mov	r5, r1
 8005028:	b976      	cbnz	r6, 8005048 <_Balloc+0x28>
 800502a:	2010      	movs	r0, #16
 800502c:	f7ff ff44 	bl	8004eb8 <malloc>
 8005030:	4602      	mov	r2, r0
 8005032:	61e0      	str	r0, [r4, #28]
 8005034:	b920      	cbnz	r0, 8005040 <_Balloc+0x20>
 8005036:	216b      	movs	r1, #107	; 0x6b
 8005038:	4b17      	ldr	r3, [pc, #92]	; (8005098 <_Balloc+0x78>)
 800503a:	4818      	ldr	r0, [pc, #96]	; (800509c <_Balloc+0x7c>)
 800503c:	f000 fe08 	bl	8005c50 <__assert_func>
 8005040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005044:	6006      	str	r6, [r0, #0]
 8005046:	60c6      	str	r6, [r0, #12]
 8005048:	69e6      	ldr	r6, [r4, #28]
 800504a:	68f3      	ldr	r3, [r6, #12]
 800504c:	b183      	cbz	r3, 8005070 <_Balloc+0x50>
 800504e:	69e3      	ldr	r3, [r4, #28]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005056:	b9b8      	cbnz	r0, 8005088 <_Balloc+0x68>
 8005058:	2101      	movs	r1, #1
 800505a:	fa01 f605 	lsl.w	r6, r1, r5
 800505e:	1d72      	adds	r2, r6, #5
 8005060:	4620      	mov	r0, r4
 8005062:	0092      	lsls	r2, r2, #2
 8005064:	f000 fe12 	bl	8005c8c <_calloc_r>
 8005068:	b160      	cbz	r0, 8005084 <_Balloc+0x64>
 800506a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800506e:	e00e      	b.n	800508e <_Balloc+0x6e>
 8005070:	2221      	movs	r2, #33	; 0x21
 8005072:	2104      	movs	r1, #4
 8005074:	4620      	mov	r0, r4
 8005076:	f000 fe09 	bl	8005c8c <_calloc_r>
 800507a:	69e3      	ldr	r3, [r4, #28]
 800507c:	60f0      	str	r0, [r6, #12]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e4      	bne.n	800504e <_Balloc+0x2e>
 8005084:	2000      	movs	r0, #0
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	6802      	ldr	r2, [r0, #0]
 800508a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800508e:	2300      	movs	r3, #0
 8005090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005094:	e7f7      	b.n	8005086 <_Balloc+0x66>
 8005096:	bf00      	nop
 8005098:	08005f4d 	.word	0x08005f4d
 800509c:	08005fcd 	.word	0x08005fcd

080050a0 <_Bfree>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	69c6      	ldr	r6, [r0, #28]
 80050a4:	4605      	mov	r5, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	b976      	cbnz	r6, 80050c8 <_Bfree+0x28>
 80050aa:	2010      	movs	r0, #16
 80050ac:	f7ff ff04 	bl	8004eb8 <malloc>
 80050b0:	4602      	mov	r2, r0
 80050b2:	61e8      	str	r0, [r5, #28]
 80050b4:	b920      	cbnz	r0, 80050c0 <_Bfree+0x20>
 80050b6:	218f      	movs	r1, #143	; 0x8f
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <_Bfree+0x3c>)
 80050ba:	4809      	ldr	r0, [pc, #36]	; (80050e0 <_Bfree+0x40>)
 80050bc:	f000 fdc8 	bl	8005c50 <__assert_func>
 80050c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050c4:	6006      	str	r6, [r0, #0]
 80050c6:	60c6      	str	r6, [r0, #12]
 80050c8:	b13c      	cbz	r4, 80050da <_Bfree+0x3a>
 80050ca:	69eb      	ldr	r3, [r5, #28]
 80050cc:	6862      	ldr	r2, [r4, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050d4:	6021      	str	r1, [r4, #0]
 80050d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	08005f4d 	.word	0x08005f4d
 80050e0:	08005fcd 	.word	0x08005fcd

080050e4 <__multadd>:
 80050e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e8:	4607      	mov	r7, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	461e      	mov	r6, r3
 80050ee:	2000      	movs	r0, #0
 80050f0:	690d      	ldr	r5, [r1, #16]
 80050f2:	f101 0c14 	add.w	ip, r1, #20
 80050f6:	f8dc 3000 	ldr.w	r3, [ip]
 80050fa:	3001      	adds	r0, #1
 80050fc:	b299      	uxth	r1, r3
 80050fe:	fb02 6101 	mla	r1, r2, r1, r6
 8005102:	0c1e      	lsrs	r6, r3, #16
 8005104:	0c0b      	lsrs	r3, r1, #16
 8005106:	fb02 3306 	mla	r3, r2, r6, r3
 800510a:	b289      	uxth	r1, r1
 800510c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005110:	4285      	cmp	r5, r0
 8005112:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005116:	f84c 1b04 	str.w	r1, [ip], #4
 800511a:	dcec      	bgt.n	80050f6 <__multadd+0x12>
 800511c:	b30e      	cbz	r6, 8005162 <__multadd+0x7e>
 800511e:	68a3      	ldr	r3, [r4, #8]
 8005120:	42ab      	cmp	r3, r5
 8005122:	dc19      	bgt.n	8005158 <__multadd+0x74>
 8005124:	6861      	ldr	r1, [r4, #4]
 8005126:	4638      	mov	r0, r7
 8005128:	3101      	adds	r1, #1
 800512a:	f7ff ff79 	bl	8005020 <_Balloc>
 800512e:	4680      	mov	r8, r0
 8005130:	b928      	cbnz	r0, 800513e <__multadd+0x5a>
 8005132:	4602      	mov	r2, r0
 8005134:	21ba      	movs	r1, #186	; 0xba
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <__multadd+0x84>)
 8005138:	480c      	ldr	r0, [pc, #48]	; (800516c <__multadd+0x88>)
 800513a:	f000 fd89 	bl	8005c50 <__assert_func>
 800513e:	6922      	ldr	r2, [r4, #16]
 8005140:	f104 010c 	add.w	r1, r4, #12
 8005144:	3202      	adds	r2, #2
 8005146:	0092      	lsls	r2, r2, #2
 8005148:	300c      	adds	r0, #12
 800514a:	f000 fd73 	bl	8005c34 <memcpy>
 800514e:	4621      	mov	r1, r4
 8005150:	4638      	mov	r0, r7
 8005152:	f7ff ffa5 	bl	80050a0 <_Bfree>
 8005156:	4644      	mov	r4, r8
 8005158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800515c:	3501      	adds	r5, #1
 800515e:	615e      	str	r6, [r3, #20]
 8005160:	6125      	str	r5, [r4, #16]
 8005162:	4620      	mov	r0, r4
 8005164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005168:	08005fbc 	.word	0x08005fbc
 800516c:	08005fcd 	.word	0x08005fcd

08005170 <__hi0bits>:
 8005170:	0c02      	lsrs	r2, r0, #16
 8005172:	0412      	lsls	r2, r2, #16
 8005174:	4603      	mov	r3, r0
 8005176:	b9ca      	cbnz	r2, 80051ac <__hi0bits+0x3c>
 8005178:	0403      	lsls	r3, r0, #16
 800517a:	2010      	movs	r0, #16
 800517c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005180:	bf04      	itt	eq
 8005182:	021b      	lsleq	r3, r3, #8
 8005184:	3008      	addeq	r0, #8
 8005186:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800518a:	bf04      	itt	eq
 800518c:	011b      	lsleq	r3, r3, #4
 800518e:	3004      	addeq	r0, #4
 8005190:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005194:	bf04      	itt	eq
 8005196:	009b      	lsleq	r3, r3, #2
 8005198:	3002      	addeq	r0, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	db05      	blt.n	80051aa <__hi0bits+0x3a>
 800519e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80051a2:	f100 0001 	add.w	r0, r0, #1
 80051a6:	bf08      	it	eq
 80051a8:	2020      	moveq	r0, #32
 80051aa:	4770      	bx	lr
 80051ac:	2000      	movs	r0, #0
 80051ae:	e7e5      	b.n	800517c <__hi0bits+0xc>

080051b0 <__lo0bits>:
 80051b0:	6803      	ldr	r3, [r0, #0]
 80051b2:	4602      	mov	r2, r0
 80051b4:	f013 0007 	ands.w	r0, r3, #7
 80051b8:	d00b      	beq.n	80051d2 <__lo0bits+0x22>
 80051ba:	07d9      	lsls	r1, r3, #31
 80051bc:	d421      	bmi.n	8005202 <__lo0bits+0x52>
 80051be:	0798      	lsls	r0, r3, #30
 80051c0:	bf49      	itett	mi
 80051c2:	085b      	lsrmi	r3, r3, #1
 80051c4:	089b      	lsrpl	r3, r3, #2
 80051c6:	2001      	movmi	r0, #1
 80051c8:	6013      	strmi	r3, [r2, #0]
 80051ca:	bf5c      	itt	pl
 80051cc:	2002      	movpl	r0, #2
 80051ce:	6013      	strpl	r3, [r2, #0]
 80051d0:	4770      	bx	lr
 80051d2:	b299      	uxth	r1, r3
 80051d4:	b909      	cbnz	r1, 80051da <__lo0bits+0x2a>
 80051d6:	2010      	movs	r0, #16
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	b2d9      	uxtb	r1, r3
 80051dc:	b909      	cbnz	r1, 80051e2 <__lo0bits+0x32>
 80051de:	3008      	adds	r0, #8
 80051e0:	0a1b      	lsrs	r3, r3, #8
 80051e2:	0719      	lsls	r1, r3, #28
 80051e4:	bf04      	itt	eq
 80051e6:	091b      	lsreq	r3, r3, #4
 80051e8:	3004      	addeq	r0, #4
 80051ea:	0799      	lsls	r1, r3, #30
 80051ec:	bf04      	itt	eq
 80051ee:	089b      	lsreq	r3, r3, #2
 80051f0:	3002      	addeq	r0, #2
 80051f2:	07d9      	lsls	r1, r3, #31
 80051f4:	d403      	bmi.n	80051fe <__lo0bits+0x4e>
 80051f6:	085b      	lsrs	r3, r3, #1
 80051f8:	f100 0001 	add.w	r0, r0, #1
 80051fc:	d003      	beq.n	8005206 <__lo0bits+0x56>
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	4770      	bx	lr
 8005202:	2000      	movs	r0, #0
 8005204:	4770      	bx	lr
 8005206:	2020      	movs	r0, #32
 8005208:	4770      	bx	lr
	...

0800520c <__i2b>:
 800520c:	b510      	push	{r4, lr}
 800520e:	460c      	mov	r4, r1
 8005210:	2101      	movs	r1, #1
 8005212:	f7ff ff05 	bl	8005020 <_Balloc>
 8005216:	4602      	mov	r2, r0
 8005218:	b928      	cbnz	r0, 8005226 <__i2b+0x1a>
 800521a:	f240 1145 	movw	r1, #325	; 0x145
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <__i2b+0x24>)
 8005220:	4804      	ldr	r0, [pc, #16]	; (8005234 <__i2b+0x28>)
 8005222:	f000 fd15 	bl	8005c50 <__assert_func>
 8005226:	2301      	movs	r3, #1
 8005228:	6144      	str	r4, [r0, #20]
 800522a:	6103      	str	r3, [r0, #16]
 800522c:	bd10      	pop	{r4, pc}
 800522e:	bf00      	nop
 8005230:	08005fbc 	.word	0x08005fbc
 8005234:	08005fcd 	.word	0x08005fcd

08005238 <__multiply>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4691      	mov	r9, r2
 800523e:	690a      	ldr	r2, [r1, #16]
 8005240:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005244:	460c      	mov	r4, r1
 8005246:	429a      	cmp	r2, r3
 8005248:	bfbe      	ittt	lt
 800524a:	460b      	movlt	r3, r1
 800524c:	464c      	movlt	r4, r9
 800524e:	4699      	movlt	r9, r3
 8005250:	6927      	ldr	r7, [r4, #16]
 8005252:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005256:	68a3      	ldr	r3, [r4, #8]
 8005258:	6861      	ldr	r1, [r4, #4]
 800525a:	eb07 060a 	add.w	r6, r7, sl
 800525e:	42b3      	cmp	r3, r6
 8005260:	b085      	sub	sp, #20
 8005262:	bfb8      	it	lt
 8005264:	3101      	addlt	r1, #1
 8005266:	f7ff fedb 	bl	8005020 <_Balloc>
 800526a:	b930      	cbnz	r0, 800527a <__multiply+0x42>
 800526c:	4602      	mov	r2, r0
 800526e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005272:	4b43      	ldr	r3, [pc, #268]	; (8005380 <__multiply+0x148>)
 8005274:	4843      	ldr	r0, [pc, #268]	; (8005384 <__multiply+0x14c>)
 8005276:	f000 fceb 	bl	8005c50 <__assert_func>
 800527a:	f100 0514 	add.w	r5, r0, #20
 800527e:	462b      	mov	r3, r5
 8005280:	2200      	movs	r2, #0
 8005282:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005286:	4543      	cmp	r3, r8
 8005288:	d321      	bcc.n	80052ce <__multiply+0x96>
 800528a:	f104 0314 	add.w	r3, r4, #20
 800528e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005292:	f109 0314 	add.w	r3, r9, #20
 8005296:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800529a:	9202      	str	r2, [sp, #8]
 800529c:	1b3a      	subs	r2, r7, r4
 800529e:	3a15      	subs	r2, #21
 80052a0:	f022 0203 	bic.w	r2, r2, #3
 80052a4:	3204      	adds	r2, #4
 80052a6:	f104 0115 	add.w	r1, r4, #21
 80052aa:	428f      	cmp	r7, r1
 80052ac:	bf38      	it	cc
 80052ae:	2204      	movcc	r2, #4
 80052b0:	9201      	str	r2, [sp, #4]
 80052b2:	9a02      	ldr	r2, [sp, #8]
 80052b4:	9303      	str	r3, [sp, #12]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d80c      	bhi.n	80052d4 <__multiply+0x9c>
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	dd03      	ble.n	80052c6 <__multiply+0x8e>
 80052be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d05a      	beq.n	800537c <__multiply+0x144>
 80052c6:	6106      	str	r6, [r0, #16]
 80052c8:	b005      	add	sp, #20
 80052ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ce:	f843 2b04 	str.w	r2, [r3], #4
 80052d2:	e7d8      	b.n	8005286 <__multiply+0x4e>
 80052d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80052d8:	f1ba 0f00 	cmp.w	sl, #0
 80052dc:	d023      	beq.n	8005326 <__multiply+0xee>
 80052de:	46a9      	mov	r9, r5
 80052e0:	f04f 0c00 	mov.w	ip, #0
 80052e4:	f104 0e14 	add.w	lr, r4, #20
 80052e8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80052ec:	f8d9 1000 	ldr.w	r1, [r9]
 80052f0:	fa1f fb82 	uxth.w	fp, r2
 80052f4:	b289      	uxth	r1, r1
 80052f6:	fb0a 110b 	mla	r1, sl, fp, r1
 80052fa:	4461      	add	r1, ip
 80052fc:	f8d9 c000 	ldr.w	ip, [r9]
 8005300:	0c12      	lsrs	r2, r2, #16
 8005302:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005306:	fb0a c202 	mla	r2, sl, r2, ip
 800530a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800530e:	b289      	uxth	r1, r1
 8005310:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005314:	4577      	cmp	r7, lr
 8005316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800531a:	f849 1b04 	str.w	r1, [r9], #4
 800531e:	d8e3      	bhi.n	80052e8 <__multiply+0xb0>
 8005320:	9a01      	ldr	r2, [sp, #4]
 8005322:	f845 c002 	str.w	ip, [r5, r2]
 8005326:	9a03      	ldr	r2, [sp, #12]
 8005328:	3304      	adds	r3, #4
 800532a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800532e:	f1b9 0f00 	cmp.w	r9, #0
 8005332:	d021      	beq.n	8005378 <__multiply+0x140>
 8005334:	46ae      	mov	lr, r5
 8005336:	f04f 0a00 	mov.w	sl, #0
 800533a:	6829      	ldr	r1, [r5, #0]
 800533c:	f104 0c14 	add.w	ip, r4, #20
 8005340:	f8bc b000 	ldrh.w	fp, [ip]
 8005344:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005348:	b289      	uxth	r1, r1
 800534a:	fb09 220b 	mla	r2, r9, fp, r2
 800534e:	4452      	add	r2, sl
 8005350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005354:	f84e 1b04 	str.w	r1, [lr], #4
 8005358:	f85c 1b04 	ldr.w	r1, [ip], #4
 800535c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005360:	f8be 1000 	ldrh.w	r1, [lr]
 8005364:	4567      	cmp	r7, ip
 8005366:	fb09 110a 	mla	r1, r9, sl, r1
 800536a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800536e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005372:	d8e5      	bhi.n	8005340 <__multiply+0x108>
 8005374:	9a01      	ldr	r2, [sp, #4]
 8005376:	50a9      	str	r1, [r5, r2]
 8005378:	3504      	adds	r5, #4
 800537a:	e79a      	b.n	80052b2 <__multiply+0x7a>
 800537c:	3e01      	subs	r6, #1
 800537e:	e79c      	b.n	80052ba <__multiply+0x82>
 8005380:	08005fbc 	.word	0x08005fbc
 8005384:	08005fcd 	.word	0x08005fcd

08005388 <__pow5mult>:
 8005388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800538c:	4615      	mov	r5, r2
 800538e:	f012 0203 	ands.w	r2, r2, #3
 8005392:	4606      	mov	r6, r0
 8005394:	460f      	mov	r7, r1
 8005396:	d007      	beq.n	80053a8 <__pow5mult+0x20>
 8005398:	4c25      	ldr	r4, [pc, #148]	; (8005430 <__pow5mult+0xa8>)
 800539a:	3a01      	subs	r2, #1
 800539c:	2300      	movs	r3, #0
 800539e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053a2:	f7ff fe9f 	bl	80050e4 <__multadd>
 80053a6:	4607      	mov	r7, r0
 80053a8:	10ad      	asrs	r5, r5, #2
 80053aa:	d03d      	beq.n	8005428 <__pow5mult+0xa0>
 80053ac:	69f4      	ldr	r4, [r6, #28]
 80053ae:	b97c      	cbnz	r4, 80053d0 <__pow5mult+0x48>
 80053b0:	2010      	movs	r0, #16
 80053b2:	f7ff fd81 	bl	8004eb8 <malloc>
 80053b6:	4602      	mov	r2, r0
 80053b8:	61f0      	str	r0, [r6, #28]
 80053ba:	b928      	cbnz	r0, 80053c8 <__pow5mult+0x40>
 80053bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80053c0:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <__pow5mult+0xac>)
 80053c2:	481d      	ldr	r0, [pc, #116]	; (8005438 <__pow5mult+0xb0>)
 80053c4:	f000 fc44 	bl	8005c50 <__assert_func>
 80053c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053cc:	6004      	str	r4, [r0, #0]
 80053ce:	60c4      	str	r4, [r0, #12]
 80053d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80053d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053d8:	b94c      	cbnz	r4, 80053ee <__pow5mult+0x66>
 80053da:	f240 2171 	movw	r1, #625	; 0x271
 80053de:	4630      	mov	r0, r6
 80053e0:	f7ff ff14 	bl	800520c <__i2b>
 80053e4:	2300      	movs	r3, #0
 80053e6:	4604      	mov	r4, r0
 80053e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80053ec:	6003      	str	r3, [r0, #0]
 80053ee:	f04f 0900 	mov.w	r9, #0
 80053f2:	07eb      	lsls	r3, r5, #31
 80053f4:	d50a      	bpl.n	800540c <__pow5mult+0x84>
 80053f6:	4639      	mov	r1, r7
 80053f8:	4622      	mov	r2, r4
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ff1c 	bl	8005238 <__multiply>
 8005400:	4680      	mov	r8, r0
 8005402:	4639      	mov	r1, r7
 8005404:	4630      	mov	r0, r6
 8005406:	f7ff fe4b 	bl	80050a0 <_Bfree>
 800540a:	4647      	mov	r7, r8
 800540c:	106d      	asrs	r5, r5, #1
 800540e:	d00b      	beq.n	8005428 <__pow5mult+0xa0>
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	b938      	cbnz	r0, 8005424 <__pow5mult+0x9c>
 8005414:	4622      	mov	r2, r4
 8005416:	4621      	mov	r1, r4
 8005418:	4630      	mov	r0, r6
 800541a:	f7ff ff0d 	bl	8005238 <__multiply>
 800541e:	6020      	str	r0, [r4, #0]
 8005420:	f8c0 9000 	str.w	r9, [r0]
 8005424:	4604      	mov	r4, r0
 8005426:	e7e4      	b.n	80053f2 <__pow5mult+0x6a>
 8005428:	4638      	mov	r0, r7
 800542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542e:	bf00      	nop
 8005430:	08006118 	.word	0x08006118
 8005434:	08005f4d 	.word	0x08005f4d
 8005438:	08005fcd 	.word	0x08005fcd

0800543c <__lshift>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	460c      	mov	r4, r1
 8005442:	4607      	mov	r7, r0
 8005444:	4691      	mov	r9, r2
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6849      	ldr	r1, [r1, #4]
 800544a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005454:	f108 0601 	add.w	r6, r8, #1
 8005458:	42b3      	cmp	r3, r6
 800545a:	db0b      	blt.n	8005474 <__lshift+0x38>
 800545c:	4638      	mov	r0, r7
 800545e:	f7ff fddf 	bl	8005020 <_Balloc>
 8005462:	4605      	mov	r5, r0
 8005464:	b948      	cbnz	r0, 800547a <__lshift+0x3e>
 8005466:	4602      	mov	r2, r0
 8005468:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800546c:	4b27      	ldr	r3, [pc, #156]	; (800550c <__lshift+0xd0>)
 800546e:	4828      	ldr	r0, [pc, #160]	; (8005510 <__lshift+0xd4>)
 8005470:	f000 fbee 	bl	8005c50 <__assert_func>
 8005474:	3101      	adds	r1, #1
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	e7ee      	b.n	8005458 <__lshift+0x1c>
 800547a:	2300      	movs	r3, #0
 800547c:	f100 0114 	add.w	r1, r0, #20
 8005480:	f100 0210 	add.w	r2, r0, #16
 8005484:	4618      	mov	r0, r3
 8005486:	4553      	cmp	r3, sl
 8005488:	db33      	blt.n	80054f2 <__lshift+0xb6>
 800548a:	6920      	ldr	r0, [r4, #16]
 800548c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005490:	f104 0314 	add.w	r3, r4, #20
 8005494:	f019 091f 	ands.w	r9, r9, #31
 8005498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800549c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054a0:	d02b      	beq.n	80054fa <__lshift+0xbe>
 80054a2:	468a      	mov	sl, r1
 80054a4:	2200      	movs	r2, #0
 80054a6:	f1c9 0e20 	rsb	lr, r9, #32
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	fa00 f009 	lsl.w	r0, r0, r9
 80054b0:	4310      	orrs	r0, r2
 80054b2:	f84a 0b04 	str.w	r0, [sl], #4
 80054b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ba:	459c      	cmp	ip, r3
 80054bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80054c0:	d8f3      	bhi.n	80054aa <__lshift+0x6e>
 80054c2:	ebac 0304 	sub.w	r3, ip, r4
 80054c6:	3b15      	subs	r3, #21
 80054c8:	f023 0303 	bic.w	r3, r3, #3
 80054cc:	3304      	adds	r3, #4
 80054ce:	f104 0015 	add.w	r0, r4, #21
 80054d2:	4584      	cmp	ip, r0
 80054d4:	bf38      	it	cc
 80054d6:	2304      	movcc	r3, #4
 80054d8:	50ca      	str	r2, [r1, r3]
 80054da:	b10a      	cbz	r2, 80054e0 <__lshift+0xa4>
 80054dc:	f108 0602 	add.w	r6, r8, #2
 80054e0:	3e01      	subs	r6, #1
 80054e2:	4638      	mov	r0, r7
 80054e4:	4621      	mov	r1, r4
 80054e6:	612e      	str	r6, [r5, #16]
 80054e8:	f7ff fdda 	bl	80050a0 <_Bfree>
 80054ec:	4628      	mov	r0, r5
 80054ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80054f6:	3301      	adds	r3, #1
 80054f8:	e7c5      	b.n	8005486 <__lshift+0x4a>
 80054fa:	3904      	subs	r1, #4
 80054fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005500:	459c      	cmp	ip, r3
 8005502:	f841 2f04 	str.w	r2, [r1, #4]!
 8005506:	d8f9      	bhi.n	80054fc <__lshift+0xc0>
 8005508:	e7ea      	b.n	80054e0 <__lshift+0xa4>
 800550a:	bf00      	nop
 800550c:	08005fbc 	.word	0x08005fbc
 8005510:	08005fcd 	.word	0x08005fcd

08005514 <__mcmp>:
 8005514:	4603      	mov	r3, r0
 8005516:	690a      	ldr	r2, [r1, #16]
 8005518:	6900      	ldr	r0, [r0, #16]
 800551a:	b530      	push	{r4, r5, lr}
 800551c:	1a80      	subs	r0, r0, r2
 800551e:	d10d      	bne.n	800553c <__mcmp+0x28>
 8005520:	3314      	adds	r3, #20
 8005522:	3114      	adds	r1, #20
 8005524:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005528:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800552c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005530:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005534:	4295      	cmp	r5, r2
 8005536:	d002      	beq.n	800553e <__mcmp+0x2a>
 8005538:	d304      	bcc.n	8005544 <__mcmp+0x30>
 800553a:	2001      	movs	r0, #1
 800553c:	bd30      	pop	{r4, r5, pc}
 800553e:	42a3      	cmp	r3, r4
 8005540:	d3f4      	bcc.n	800552c <__mcmp+0x18>
 8005542:	e7fb      	b.n	800553c <__mcmp+0x28>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	e7f8      	b.n	800553c <__mcmp+0x28>
	...

0800554c <__mdiff>:
 800554c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	460d      	mov	r5, r1
 8005552:	4607      	mov	r7, r0
 8005554:	4611      	mov	r1, r2
 8005556:	4628      	mov	r0, r5
 8005558:	4614      	mov	r4, r2
 800555a:	f7ff ffdb 	bl	8005514 <__mcmp>
 800555e:	1e06      	subs	r6, r0, #0
 8005560:	d111      	bne.n	8005586 <__mdiff+0x3a>
 8005562:	4631      	mov	r1, r6
 8005564:	4638      	mov	r0, r7
 8005566:	f7ff fd5b 	bl	8005020 <_Balloc>
 800556a:	4602      	mov	r2, r0
 800556c:	b928      	cbnz	r0, 800557a <__mdiff+0x2e>
 800556e:	f240 2137 	movw	r1, #567	; 0x237
 8005572:	4b3a      	ldr	r3, [pc, #232]	; (800565c <__mdiff+0x110>)
 8005574:	483a      	ldr	r0, [pc, #232]	; (8005660 <__mdiff+0x114>)
 8005576:	f000 fb6b 	bl	8005c50 <__assert_func>
 800557a:	2301      	movs	r3, #1
 800557c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005580:	4610      	mov	r0, r2
 8005582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005586:	bfa4      	itt	ge
 8005588:	4623      	movge	r3, r4
 800558a:	462c      	movge	r4, r5
 800558c:	4638      	mov	r0, r7
 800558e:	6861      	ldr	r1, [r4, #4]
 8005590:	bfa6      	itte	ge
 8005592:	461d      	movge	r5, r3
 8005594:	2600      	movge	r6, #0
 8005596:	2601      	movlt	r6, #1
 8005598:	f7ff fd42 	bl	8005020 <_Balloc>
 800559c:	4602      	mov	r2, r0
 800559e:	b918      	cbnz	r0, 80055a8 <__mdiff+0x5c>
 80055a0:	f240 2145 	movw	r1, #581	; 0x245
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <__mdiff+0x110>)
 80055a6:	e7e5      	b.n	8005574 <__mdiff+0x28>
 80055a8:	f102 0814 	add.w	r8, r2, #20
 80055ac:	46c2      	mov	sl, r8
 80055ae:	f04f 0c00 	mov.w	ip, #0
 80055b2:	6927      	ldr	r7, [r4, #16]
 80055b4:	60c6      	str	r6, [r0, #12]
 80055b6:	692e      	ldr	r6, [r5, #16]
 80055b8:	f104 0014 	add.w	r0, r4, #20
 80055bc:	f105 0914 	add.w	r9, r5, #20
 80055c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80055c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80055c8:	3410      	adds	r4, #16
 80055ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80055ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80055d2:	fa1f f18b 	uxth.w	r1, fp
 80055d6:	4461      	add	r1, ip
 80055d8:	fa1f fc83 	uxth.w	ip, r3
 80055dc:	0c1b      	lsrs	r3, r3, #16
 80055de:	eba1 010c 	sub.w	r1, r1, ip
 80055e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80055e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80055ea:	b289      	uxth	r1, r1
 80055ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80055f0:	454e      	cmp	r6, r9
 80055f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80055f6:	f84a 1b04 	str.w	r1, [sl], #4
 80055fa:	d8e6      	bhi.n	80055ca <__mdiff+0x7e>
 80055fc:	1b73      	subs	r3, r6, r5
 80055fe:	3b15      	subs	r3, #21
 8005600:	f023 0303 	bic.w	r3, r3, #3
 8005604:	3515      	adds	r5, #21
 8005606:	3304      	adds	r3, #4
 8005608:	42ae      	cmp	r6, r5
 800560a:	bf38      	it	cc
 800560c:	2304      	movcc	r3, #4
 800560e:	4418      	add	r0, r3
 8005610:	4443      	add	r3, r8
 8005612:	461e      	mov	r6, r3
 8005614:	4605      	mov	r5, r0
 8005616:	4575      	cmp	r5, lr
 8005618:	d30e      	bcc.n	8005638 <__mdiff+0xec>
 800561a:	f10e 0103 	add.w	r1, lr, #3
 800561e:	1a09      	subs	r1, r1, r0
 8005620:	f021 0103 	bic.w	r1, r1, #3
 8005624:	3803      	subs	r0, #3
 8005626:	4586      	cmp	lr, r0
 8005628:	bf38      	it	cc
 800562a:	2100      	movcc	r1, #0
 800562c:	440b      	add	r3, r1
 800562e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005632:	b189      	cbz	r1, 8005658 <__mdiff+0x10c>
 8005634:	6117      	str	r7, [r2, #16]
 8005636:	e7a3      	b.n	8005580 <__mdiff+0x34>
 8005638:	f855 8b04 	ldr.w	r8, [r5], #4
 800563c:	fa1f f188 	uxth.w	r1, r8
 8005640:	4461      	add	r1, ip
 8005642:	140c      	asrs	r4, r1, #16
 8005644:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005648:	b289      	uxth	r1, r1
 800564a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800564e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005652:	f846 1b04 	str.w	r1, [r6], #4
 8005656:	e7de      	b.n	8005616 <__mdiff+0xca>
 8005658:	3f01      	subs	r7, #1
 800565a:	e7e8      	b.n	800562e <__mdiff+0xe2>
 800565c:	08005fbc 	.word	0x08005fbc
 8005660:	08005fcd 	.word	0x08005fcd

08005664 <__d2b>:
 8005664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005666:	2101      	movs	r1, #1
 8005668:	4617      	mov	r7, r2
 800566a:	461c      	mov	r4, r3
 800566c:	9e08      	ldr	r6, [sp, #32]
 800566e:	f7ff fcd7 	bl	8005020 <_Balloc>
 8005672:	4605      	mov	r5, r0
 8005674:	b930      	cbnz	r0, 8005684 <__d2b+0x20>
 8005676:	4602      	mov	r2, r0
 8005678:	f240 310f 	movw	r1, #783	; 0x30f
 800567c:	4b22      	ldr	r3, [pc, #136]	; (8005708 <__d2b+0xa4>)
 800567e:	4823      	ldr	r0, [pc, #140]	; (800570c <__d2b+0xa8>)
 8005680:	f000 fae6 	bl	8005c50 <__assert_func>
 8005684:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005688:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800568c:	bb24      	cbnz	r4, 80056d8 <__d2b+0x74>
 800568e:	2f00      	cmp	r7, #0
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	d026      	beq.n	80056e2 <__d2b+0x7e>
 8005694:	4668      	mov	r0, sp
 8005696:	9700      	str	r7, [sp, #0]
 8005698:	f7ff fd8a 	bl	80051b0 <__lo0bits>
 800569c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80056a0:	b1e8      	cbz	r0, 80056de <__d2b+0x7a>
 80056a2:	f1c0 0320 	rsb	r3, r0, #32
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	430b      	orrs	r3, r1
 80056ac:	40c2      	lsrs	r2, r0
 80056ae:	616b      	str	r3, [r5, #20]
 80056b0:	9201      	str	r2, [sp, #4]
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bf14      	ite	ne
 80056b8:	2102      	movne	r1, #2
 80056ba:	2101      	moveq	r1, #1
 80056bc:	61ab      	str	r3, [r5, #24]
 80056be:	6129      	str	r1, [r5, #16]
 80056c0:	b1bc      	cbz	r4, 80056f2 <__d2b+0x8e>
 80056c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80056c6:	4404      	add	r4, r0
 80056c8:	6034      	str	r4, [r6, #0]
 80056ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d0:	6018      	str	r0, [r3, #0]
 80056d2:	4628      	mov	r0, r5
 80056d4:	b003      	add	sp, #12
 80056d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056dc:	e7d7      	b.n	800568e <__d2b+0x2a>
 80056de:	6169      	str	r1, [r5, #20]
 80056e0:	e7e7      	b.n	80056b2 <__d2b+0x4e>
 80056e2:	a801      	add	r0, sp, #4
 80056e4:	f7ff fd64 	bl	80051b0 <__lo0bits>
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	2101      	movs	r1, #1
 80056ec:	616b      	str	r3, [r5, #20]
 80056ee:	3020      	adds	r0, #32
 80056f0:	e7e5      	b.n	80056be <__d2b+0x5a>
 80056f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80056f6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80056fa:	6030      	str	r0, [r6, #0]
 80056fc:	6918      	ldr	r0, [r3, #16]
 80056fe:	f7ff fd37 	bl	8005170 <__hi0bits>
 8005702:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005706:	e7e2      	b.n	80056ce <__d2b+0x6a>
 8005708:	08005fbc 	.word	0x08005fbc
 800570c:	08005fcd 	.word	0x08005fcd

08005710 <__sfputc_r>:
 8005710:	6893      	ldr	r3, [r2, #8]
 8005712:	b410      	push	{r4}
 8005714:	3b01      	subs	r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	6093      	str	r3, [r2, #8]
 800571a:	da07      	bge.n	800572c <__sfputc_r+0x1c>
 800571c:	6994      	ldr	r4, [r2, #24]
 800571e:	42a3      	cmp	r3, r4
 8005720:	db01      	blt.n	8005726 <__sfputc_r+0x16>
 8005722:	290a      	cmp	r1, #10
 8005724:	d102      	bne.n	800572c <__sfputc_r+0x1c>
 8005726:	bc10      	pop	{r4}
 8005728:	f000 b9de 	b.w	8005ae8 <__swbuf_r>
 800572c:	6813      	ldr	r3, [r2, #0]
 800572e:	1c58      	adds	r0, r3, #1
 8005730:	6010      	str	r0, [r2, #0]
 8005732:	7019      	strb	r1, [r3, #0]
 8005734:	4608      	mov	r0, r1
 8005736:	bc10      	pop	{r4}
 8005738:	4770      	bx	lr

0800573a <__sfputs_r>:
 800573a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573c:	4606      	mov	r6, r0
 800573e:	460f      	mov	r7, r1
 8005740:	4614      	mov	r4, r2
 8005742:	18d5      	adds	r5, r2, r3
 8005744:	42ac      	cmp	r4, r5
 8005746:	d101      	bne.n	800574c <__sfputs_r+0x12>
 8005748:	2000      	movs	r0, #0
 800574a:	e007      	b.n	800575c <__sfputs_r+0x22>
 800574c:	463a      	mov	r2, r7
 800574e:	4630      	mov	r0, r6
 8005750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005754:	f7ff ffdc 	bl	8005710 <__sfputc_r>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d1f3      	bne.n	8005744 <__sfputs_r+0xa>
 800575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005760 <_vfiprintf_r>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	460d      	mov	r5, r1
 8005766:	4614      	mov	r4, r2
 8005768:	4698      	mov	r8, r3
 800576a:	4606      	mov	r6, r0
 800576c:	b09d      	sub	sp, #116	; 0x74
 800576e:	b118      	cbz	r0, 8005778 <_vfiprintf_r+0x18>
 8005770:	6a03      	ldr	r3, [r0, #32]
 8005772:	b90b      	cbnz	r3, 8005778 <_vfiprintf_r+0x18>
 8005774:	f7fe fbd0 	bl	8003f18 <__sinit>
 8005778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800577a:	07d9      	lsls	r1, r3, #31
 800577c:	d405      	bmi.n	800578a <_vfiprintf_r+0x2a>
 800577e:	89ab      	ldrh	r3, [r5, #12]
 8005780:	059a      	lsls	r2, r3, #22
 8005782:	d402      	bmi.n	800578a <_vfiprintf_r+0x2a>
 8005784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005786:	f7fe fcd0 	bl	800412a <__retarget_lock_acquire_recursive>
 800578a:	89ab      	ldrh	r3, [r5, #12]
 800578c:	071b      	lsls	r3, r3, #28
 800578e:	d501      	bpl.n	8005794 <_vfiprintf_r+0x34>
 8005790:	692b      	ldr	r3, [r5, #16]
 8005792:	b99b      	cbnz	r3, 80057bc <_vfiprintf_r+0x5c>
 8005794:	4629      	mov	r1, r5
 8005796:	4630      	mov	r0, r6
 8005798:	f000 f9e4 	bl	8005b64 <__swsetup_r>
 800579c:	b170      	cbz	r0, 80057bc <_vfiprintf_r+0x5c>
 800579e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a0:	07dc      	lsls	r4, r3, #31
 80057a2:	d504      	bpl.n	80057ae <_vfiprintf_r+0x4e>
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	b01d      	add	sp, #116	; 0x74
 80057aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ae:	89ab      	ldrh	r3, [r5, #12]
 80057b0:	0598      	lsls	r0, r3, #22
 80057b2:	d4f7      	bmi.n	80057a4 <_vfiprintf_r+0x44>
 80057b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057b6:	f7fe fcb9 	bl	800412c <__retarget_lock_release_recursive>
 80057ba:	e7f3      	b.n	80057a4 <_vfiprintf_r+0x44>
 80057bc:	2300      	movs	r3, #0
 80057be:	9309      	str	r3, [sp, #36]	; 0x24
 80057c0:	2320      	movs	r3, #32
 80057c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057c6:	2330      	movs	r3, #48	; 0x30
 80057c8:	f04f 0901 	mov.w	r9, #1
 80057cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80057d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005980 <_vfiprintf_r+0x220>
 80057d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057d8:	4623      	mov	r3, r4
 80057da:	469a      	mov	sl, r3
 80057dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057e0:	b10a      	cbz	r2, 80057e6 <_vfiprintf_r+0x86>
 80057e2:	2a25      	cmp	r2, #37	; 0x25
 80057e4:	d1f9      	bne.n	80057da <_vfiprintf_r+0x7a>
 80057e6:	ebba 0b04 	subs.w	fp, sl, r4
 80057ea:	d00b      	beq.n	8005804 <_vfiprintf_r+0xa4>
 80057ec:	465b      	mov	r3, fp
 80057ee:	4622      	mov	r2, r4
 80057f0:	4629      	mov	r1, r5
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7ff ffa1 	bl	800573a <__sfputs_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	f000 80a9 	beq.w	8005950 <_vfiprintf_r+0x1f0>
 80057fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005800:	445a      	add	r2, fp
 8005802:	9209      	str	r2, [sp, #36]	; 0x24
 8005804:	f89a 3000 	ldrb.w	r3, [sl]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 80a1 	beq.w	8005950 <_vfiprintf_r+0x1f0>
 800580e:	2300      	movs	r3, #0
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005818:	f10a 0a01 	add.w	sl, sl, #1
 800581c:	9304      	str	r3, [sp, #16]
 800581e:	9307      	str	r3, [sp, #28]
 8005820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005824:	931a      	str	r3, [sp, #104]	; 0x68
 8005826:	4654      	mov	r4, sl
 8005828:	2205      	movs	r2, #5
 800582a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800582e:	4854      	ldr	r0, [pc, #336]	; (8005980 <_vfiprintf_r+0x220>)
 8005830:	f7fe fc7d 	bl	800412e <memchr>
 8005834:	9a04      	ldr	r2, [sp, #16]
 8005836:	b9d8      	cbnz	r0, 8005870 <_vfiprintf_r+0x110>
 8005838:	06d1      	lsls	r1, r2, #27
 800583a:	bf44      	itt	mi
 800583c:	2320      	movmi	r3, #32
 800583e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005842:	0713      	lsls	r3, r2, #28
 8005844:	bf44      	itt	mi
 8005846:	232b      	movmi	r3, #43	; 0x2b
 8005848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800584c:	f89a 3000 	ldrb.w	r3, [sl]
 8005850:	2b2a      	cmp	r3, #42	; 0x2a
 8005852:	d015      	beq.n	8005880 <_vfiprintf_r+0x120>
 8005854:	4654      	mov	r4, sl
 8005856:	2000      	movs	r0, #0
 8005858:	f04f 0c0a 	mov.w	ip, #10
 800585c:	9a07      	ldr	r2, [sp, #28]
 800585e:	4621      	mov	r1, r4
 8005860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005864:	3b30      	subs	r3, #48	; 0x30
 8005866:	2b09      	cmp	r3, #9
 8005868:	d94d      	bls.n	8005906 <_vfiprintf_r+0x1a6>
 800586a:	b1b0      	cbz	r0, 800589a <_vfiprintf_r+0x13a>
 800586c:	9207      	str	r2, [sp, #28]
 800586e:	e014      	b.n	800589a <_vfiprintf_r+0x13a>
 8005870:	eba0 0308 	sub.w	r3, r0, r8
 8005874:	fa09 f303 	lsl.w	r3, r9, r3
 8005878:	4313      	orrs	r3, r2
 800587a:	46a2      	mov	sl, r4
 800587c:	9304      	str	r3, [sp, #16]
 800587e:	e7d2      	b.n	8005826 <_vfiprintf_r+0xc6>
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	1d19      	adds	r1, r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	9103      	str	r1, [sp, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	bfbb      	ittet	lt
 800588c:	425b      	neglt	r3, r3
 800588e:	f042 0202 	orrlt.w	r2, r2, #2
 8005892:	9307      	strge	r3, [sp, #28]
 8005894:	9307      	strlt	r3, [sp, #28]
 8005896:	bfb8      	it	lt
 8005898:	9204      	strlt	r2, [sp, #16]
 800589a:	7823      	ldrb	r3, [r4, #0]
 800589c:	2b2e      	cmp	r3, #46	; 0x2e
 800589e:	d10c      	bne.n	80058ba <_vfiprintf_r+0x15a>
 80058a0:	7863      	ldrb	r3, [r4, #1]
 80058a2:	2b2a      	cmp	r3, #42	; 0x2a
 80058a4:	d134      	bne.n	8005910 <_vfiprintf_r+0x1b0>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	3402      	adds	r4, #2
 80058aa:	1d1a      	adds	r2, r3, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	9203      	str	r2, [sp, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bfb8      	it	lt
 80058b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80058b8:	9305      	str	r3, [sp, #20]
 80058ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005984 <_vfiprintf_r+0x224>
 80058be:	2203      	movs	r2, #3
 80058c0:	4650      	mov	r0, sl
 80058c2:	7821      	ldrb	r1, [r4, #0]
 80058c4:	f7fe fc33 	bl	800412e <memchr>
 80058c8:	b138      	cbz	r0, 80058da <_vfiprintf_r+0x17a>
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	9b04      	ldr	r3, [sp, #16]
 80058ce:	eba0 000a 	sub.w	r0, r0, sl
 80058d2:	4082      	lsls	r2, r0
 80058d4:	4313      	orrs	r3, r2
 80058d6:	3401      	adds	r4, #1
 80058d8:	9304      	str	r3, [sp, #16]
 80058da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058de:	2206      	movs	r2, #6
 80058e0:	4829      	ldr	r0, [pc, #164]	; (8005988 <_vfiprintf_r+0x228>)
 80058e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058e6:	f7fe fc22 	bl	800412e <memchr>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d03f      	beq.n	800596e <_vfiprintf_r+0x20e>
 80058ee:	4b27      	ldr	r3, [pc, #156]	; (800598c <_vfiprintf_r+0x22c>)
 80058f0:	bb1b      	cbnz	r3, 800593a <_vfiprintf_r+0x1da>
 80058f2:	9b03      	ldr	r3, [sp, #12]
 80058f4:	3307      	adds	r3, #7
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	3308      	adds	r3, #8
 80058fc:	9303      	str	r3, [sp, #12]
 80058fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005900:	443b      	add	r3, r7
 8005902:	9309      	str	r3, [sp, #36]	; 0x24
 8005904:	e768      	b.n	80057d8 <_vfiprintf_r+0x78>
 8005906:	460c      	mov	r4, r1
 8005908:	2001      	movs	r0, #1
 800590a:	fb0c 3202 	mla	r2, ip, r2, r3
 800590e:	e7a6      	b.n	800585e <_vfiprintf_r+0xfe>
 8005910:	2300      	movs	r3, #0
 8005912:	f04f 0c0a 	mov.w	ip, #10
 8005916:	4619      	mov	r1, r3
 8005918:	3401      	adds	r4, #1
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	4620      	mov	r0, r4
 800591e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005922:	3a30      	subs	r2, #48	; 0x30
 8005924:	2a09      	cmp	r2, #9
 8005926:	d903      	bls.n	8005930 <_vfiprintf_r+0x1d0>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0c6      	beq.n	80058ba <_vfiprintf_r+0x15a>
 800592c:	9105      	str	r1, [sp, #20]
 800592e:	e7c4      	b.n	80058ba <_vfiprintf_r+0x15a>
 8005930:	4604      	mov	r4, r0
 8005932:	2301      	movs	r3, #1
 8005934:	fb0c 2101 	mla	r1, ip, r1, r2
 8005938:	e7f0      	b.n	800591c <_vfiprintf_r+0x1bc>
 800593a:	ab03      	add	r3, sp, #12
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	462a      	mov	r2, r5
 8005940:	4630      	mov	r0, r6
 8005942:	4b13      	ldr	r3, [pc, #76]	; (8005990 <_vfiprintf_r+0x230>)
 8005944:	a904      	add	r1, sp, #16
 8005946:	f7fd fe99 	bl	800367c <_printf_float>
 800594a:	4607      	mov	r7, r0
 800594c:	1c78      	adds	r0, r7, #1
 800594e:	d1d6      	bne.n	80058fe <_vfiprintf_r+0x19e>
 8005950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005952:	07d9      	lsls	r1, r3, #31
 8005954:	d405      	bmi.n	8005962 <_vfiprintf_r+0x202>
 8005956:	89ab      	ldrh	r3, [r5, #12]
 8005958:	059a      	lsls	r2, r3, #22
 800595a:	d402      	bmi.n	8005962 <_vfiprintf_r+0x202>
 800595c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800595e:	f7fe fbe5 	bl	800412c <__retarget_lock_release_recursive>
 8005962:	89ab      	ldrh	r3, [r5, #12]
 8005964:	065b      	lsls	r3, r3, #25
 8005966:	f53f af1d 	bmi.w	80057a4 <_vfiprintf_r+0x44>
 800596a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800596c:	e71c      	b.n	80057a8 <_vfiprintf_r+0x48>
 800596e:	ab03      	add	r3, sp, #12
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	462a      	mov	r2, r5
 8005974:	4630      	mov	r0, r6
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <_vfiprintf_r+0x230>)
 8005978:	a904      	add	r1, sp, #16
 800597a:	f7fe f91f 	bl	8003bbc <_printf_i>
 800597e:	e7e4      	b.n	800594a <_vfiprintf_r+0x1ea>
 8005980:	08006124 	.word	0x08006124
 8005984:	0800612a 	.word	0x0800612a
 8005988:	0800612e 	.word	0x0800612e
 800598c:	0800367d 	.word	0x0800367d
 8005990:	0800573b 	.word	0x0800573b

08005994 <__sflush_r>:
 8005994:	898a      	ldrh	r2, [r1, #12]
 8005996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005998:	4605      	mov	r5, r0
 800599a:	0710      	lsls	r0, r2, #28
 800599c:	460c      	mov	r4, r1
 800599e:	d457      	bmi.n	8005a50 <__sflush_r+0xbc>
 80059a0:	684b      	ldr	r3, [r1, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dc04      	bgt.n	80059b0 <__sflush_r+0x1c>
 80059a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dc01      	bgt.n	80059b0 <__sflush_r+0x1c>
 80059ac:	2000      	movs	r0, #0
 80059ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	d0fa      	beq.n	80059ac <__sflush_r+0x18>
 80059b6:	2300      	movs	r3, #0
 80059b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059bc:	682f      	ldr	r7, [r5, #0]
 80059be:	6a21      	ldr	r1, [r4, #32]
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	d032      	beq.n	8005a2a <__sflush_r+0x96>
 80059c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	075a      	lsls	r2, r3, #29
 80059ca:	d505      	bpl.n	80059d8 <__sflush_r+0x44>
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	1ac0      	subs	r0, r0, r3
 80059d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059d2:	b10b      	cbz	r3, 80059d8 <__sflush_r+0x44>
 80059d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059d6:	1ac0      	subs	r0, r0, r3
 80059d8:	2300      	movs	r3, #0
 80059da:	4602      	mov	r2, r0
 80059dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059de:	4628      	mov	r0, r5
 80059e0:	6a21      	ldr	r1, [r4, #32]
 80059e2:	47b0      	blx	r6
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	d106      	bne.n	80059f8 <__sflush_r+0x64>
 80059ea:	6829      	ldr	r1, [r5, #0]
 80059ec:	291d      	cmp	r1, #29
 80059ee:	d82b      	bhi.n	8005a48 <__sflush_r+0xb4>
 80059f0:	4a28      	ldr	r2, [pc, #160]	; (8005a94 <__sflush_r+0x100>)
 80059f2:	410a      	asrs	r2, r1
 80059f4:	07d6      	lsls	r6, r2, #31
 80059f6:	d427      	bmi.n	8005a48 <__sflush_r+0xb4>
 80059f8:	2200      	movs	r2, #0
 80059fa:	6062      	str	r2, [r4, #4]
 80059fc:	6922      	ldr	r2, [r4, #16]
 80059fe:	04d9      	lsls	r1, r3, #19
 8005a00:	6022      	str	r2, [r4, #0]
 8005a02:	d504      	bpl.n	8005a0e <__sflush_r+0x7a>
 8005a04:	1c42      	adds	r2, r0, #1
 8005a06:	d101      	bne.n	8005a0c <__sflush_r+0x78>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b903      	cbnz	r3, 8005a0e <__sflush_r+0x7a>
 8005a0c:	6560      	str	r0, [r4, #84]	; 0x54
 8005a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a10:	602f      	str	r7, [r5, #0]
 8005a12:	2900      	cmp	r1, #0
 8005a14:	d0ca      	beq.n	80059ac <__sflush_r+0x18>
 8005a16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	d002      	beq.n	8005a24 <__sflush_r+0x90>
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f7ff fa02 	bl	8004e28 <_free_r>
 8005a24:	2000      	movs	r0, #0
 8005a26:	6360      	str	r0, [r4, #52]	; 0x34
 8005a28:	e7c1      	b.n	80059ae <__sflush_r+0x1a>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b0      	blx	r6
 8005a30:	1c41      	adds	r1, r0, #1
 8005a32:	d1c8      	bne.n	80059c6 <__sflush_r+0x32>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0c5      	beq.n	80059c6 <__sflush_r+0x32>
 8005a3a:	2b1d      	cmp	r3, #29
 8005a3c:	d001      	beq.n	8005a42 <__sflush_r+0xae>
 8005a3e:	2b16      	cmp	r3, #22
 8005a40:	d101      	bne.n	8005a46 <__sflush_r+0xb2>
 8005a42:	602f      	str	r7, [r5, #0]
 8005a44:	e7b2      	b.n	80059ac <__sflush_r+0x18>
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	e7ae      	b.n	80059ae <__sflush_r+0x1a>
 8005a50:	690f      	ldr	r7, [r1, #16]
 8005a52:	2f00      	cmp	r7, #0
 8005a54:	d0aa      	beq.n	80059ac <__sflush_r+0x18>
 8005a56:	0793      	lsls	r3, r2, #30
 8005a58:	bf18      	it	ne
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	680e      	ldr	r6, [r1, #0]
 8005a5e:	bf08      	it	eq
 8005a60:	694b      	ldreq	r3, [r1, #20]
 8005a62:	1bf6      	subs	r6, r6, r7
 8005a64:	600f      	str	r7, [r1, #0]
 8005a66:	608b      	str	r3, [r1, #8]
 8005a68:	2e00      	cmp	r6, #0
 8005a6a:	dd9f      	ble.n	80059ac <__sflush_r+0x18>
 8005a6c:	4633      	mov	r3, r6
 8005a6e:	463a      	mov	r2, r7
 8005a70:	4628      	mov	r0, r5
 8005a72:	6a21      	ldr	r1, [r4, #32]
 8005a74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a78:	47e0      	blx	ip
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	dc06      	bgt.n	8005a8c <__sflush_r+0xf8>
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	e790      	b.n	80059ae <__sflush_r+0x1a>
 8005a8c:	4407      	add	r7, r0
 8005a8e:	1a36      	subs	r6, r6, r0
 8005a90:	e7ea      	b.n	8005a68 <__sflush_r+0xd4>
 8005a92:	bf00      	nop
 8005a94:	dfbffffe 	.word	0xdfbffffe

08005a98 <_fflush_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	690b      	ldr	r3, [r1, #16]
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	b913      	cbnz	r3, 8005aa8 <_fflush_r+0x10>
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	b118      	cbz	r0, 8005ab2 <_fflush_r+0x1a>
 8005aaa:	6a03      	ldr	r3, [r0, #32]
 8005aac:	b90b      	cbnz	r3, 8005ab2 <_fflush_r+0x1a>
 8005aae:	f7fe fa33 	bl	8003f18 <__sinit>
 8005ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f3      	beq.n	8005aa2 <_fflush_r+0xa>
 8005aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005abc:	07d0      	lsls	r0, r2, #31
 8005abe:	d404      	bmi.n	8005aca <_fflush_r+0x32>
 8005ac0:	0599      	lsls	r1, r3, #22
 8005ac2:	d402      	bmi.n	8005aca <_fflush_r+0x32>
 8005ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ac6:	f7fe fb30 	bl	800412a <__retarget_lock_acquire_recursive>
 8005aca:	4628      	mov	r0, r5
 8005acc:	4621      	mov	r1, r4
 8005ace:	f7ff ff61 	bl	8005994 <__sflush_r>
 8005ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	07da      	lsls	r2, r3, #31
 8005ad8:	d4e4      	bmi.n	8005aa4 <_fflush_r+0xc>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	059b      	lsls	r3, r3, #22
 8005ade:	d4e1      	bmi.n	8005aa4 <_fflush_r+0xc>
 8005ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ae2:	f7fe fb23 	bl	800412c <__retarget_lock_release_recursive>
 8005ae6:	e7dd      	b.n	8005aa4 <_fflush_r+0xc>

08005ae8 <__swbuf_r>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	460e      	mov	r6, r1
 8005aec:	4614      	mov	r4, r2
 8005aee:	4605      	mov	r5, r0
 8005af0:	b118      	cbz	r0, 8005afa <__swbuf_r+0x12>
 8005af2:	6a03      	ldr	r3, [r0, #32]
 8005af4:	b90b      	cbnz	r3, 8005afa <__swbuf_r+0x12>
 8005af6:	f7fe fa0f 	bl	8003f18 <__sinit>
 8005afa:	69a3      	ldr	r3, [r4, #24]
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	071a      	lsls	r2, r3, #28
 8005b02:	d525      	bpl.n	8005b50 <__swbuf_r+0x68>
 8005b04:	6923      	ldr	r3, [r4, #16]
 8005b06:	b31b      	cbz	r3, 8005b50 <__swbuf_r+0x68>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	6922      	ldr	r2, [r4, #16]
 8005b0c:	b2f6      	uxtb	r6, r6
 8005b0e:	1a98      	subs	r0, r3, r2
 8005b10:	6963      	ldr	r3, [r4, #20]
 8005b12:	4637      	mov	r7, r6
 8005b14:	4283      	cmp	r3, r0
 8005b16:	dc04      	bgt.n	8005b22 <__swbuf_r+0x3a>
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7ff ffbc 	bl	8005a98 <_fflush_r>
 8005b20:	b9e0      	cbnz	r0, 8005b5c <__swbuf_r+0x74>
 8005b22:	68a3      	ldr	r3, [r4, #8]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	60a3      	str	r3, [r4, #8]
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	6022      	str	r2, [r4, #0]
 8005b2e:	701e      	strb	r6, [r3, #0]
 8005b30:	6962      	ldr	r2, [r4, #20]
 8005b32:	1c43      	adds	r3, r0, #1
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d004      	beq.n	8005b42 <__swbuf_r+0x5a>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	07db      	lsls	r3, r3, #31
 8005b3c:	d506      	bpl.n	8005b4c <__swbuf_r+0x64>
 8005b3e:	2e0a      	cmp	r6, #10
 8005b40:	d104      	bne.n	8005b4c <__swbuf_r+0x64>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f7ff ffa7 	bl	8005a98 <_fflush_r>
 8005b4a:	b938      	cbnz	r0, 8005b5c <__swbuf_r+0x74>
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b50:	4621      	mov	r1, r4
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 f806 	bl	8005b64 <__swsetup_r>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d0d5      	beq.n	8005b08 <__swbuf_r+0x20>
 8005b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b60:	e7f4      	b.n	8005b4c <__swbuf_r+0x64>
	...

08005b64 <__swsetup_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4b2a      	ldr	r3, [pc, #168]	; (8005c10 <__swsetup_r+0xac>)
 8005b68:	4605      	mov	r5, r0
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	b118      	cbz	r0, 8005b78 <__swsetup_r+0x14>
 8005b70:	6a03      	ldr	r3, [r0, #32]
 8005b72:	b90b      	cbnz	r3, 8005b78 <__swsetup_r+0x14>
 8005b74:	f7fe f9d0 	bl	8003f18 <__sinit>
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b7e:	0718      	lsls	r0, r3, #28
 8005b80:	d422      	bmi.n	8005bc8 <__swsetup_r+0x64>
 8005b82:	06d9      	lsls	r1, r3, #27
 8005b84:	d407      	bmi.n	8005b96 <__swsetup_r+0x32>
 8005b86:	2309      	movs	r3, #9
 8005b88:	602b      	str	r3, [r5, #0]
 8005b8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	e034      	b.n	8005c00 <__swsetup_r+0x9c>
 8005b96:	0758      	lsls	r0, r3, #29
 8005b98:	d512      	bpl.n	8005bc0 <__swsetup_r+0x5c>
 8005b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b9c:	b141      	cbz	r1, 8005bb0 <__swsetup_r+0x4c>
 8005b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	d002      	beq.n	8005bac <__swsetup_r+0x48>
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff f93e 	bl	8004e28 <_free_r>
 8005bac:	2300      	movs	r3, #0
 8005bae:	6363      	str	r3, [r4, #52]	; 0x34
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6063      	str	r3, [r4, #4]
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	6023      	str	r3, [r4, #0]
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f043 0308 	orr.w	r3, r3, #8
 8005bc6:	81a3      	strh	r3, [r4, #12]
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	b94b      	cbnz	r3, 8005be0 <__swsetup_r+0x7c>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd6:	d003      	beq.n	8005be0 <__swsetup_r+0x7c>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 f8c1 	bl	8005d62 <__smakebuf_r>
 8005be0:	89a0      	ldrh	r0, [r4, #12]
 8005be2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005be6:	f010 0301 	ands.w	r3, r0, #1
 8005bea:	d00a      	beq.n	8005c02 <__swsetup_r+0x9e>
 8005bec:	2300      	movs	r3, #0
 8005bee:	60a3      	str	r3, [r4, #8]
 8005bf0:	6963      	ldr	r3, [r4, #20]
 8005bf2:	425b      	negs	r3, r3
 8005bf4:	61a3      	str	r3, [r4, #24]
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	b943      	cbnz	r3, 8005c0c <__swsetup_r+0xa8>
 8005bfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bfe:	d1c4      	bne.n	8005b8a <__swsetup_r+0x26>
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	0781      	lsls	r1, r0, #30
 8005c04:	bf58      	it	pl
 8005c06:	6963      	ldrpl	r3, [r4, #20]
 8005c08:	60a3      	str	r3, [r4, #8]
 8005c0a:	e7f4      	b.n	8005bf6 <__swsetup_r+0x92>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e7f7      	b.n	8005c00 <__swsetup_r+0x9c>
 8005c10:	20000064 	.word	0x20000064

08005c14 <_sbrk_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	2300      	movs	r3, #0
 8005c18:	4d05      	ldr	r5, [pc, #20]	; (8005c30 <_sbrk_r+0x1c>)
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	f7fb fcc0 	bl	80015a4 <_sbrk>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_sbrk_r+0x1a>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_sbrk_r+0x1a>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	200003d0 	.word	0x200003d0

08005c34 <memcpy>:
 8005c34:	440a      	add	r2, r1
 8005c36:	4291      	cmp	r1, r2
 8005c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c3c:	d100      	bne.n	8005c40 <memcpy+0xc>
 8005c3e:	4770      	bx	lr
 8005c40:	b510      	push	{r4, lr}
 8005c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c46:	4291      	cmp	r1, r2
 8005c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c4c:	d1f9      	bne.n	8005c42 <memcpy+0xe>
 8005c4e:	bd10      	pop	{r4, pc}

08005c50 <__assert_func>:
 8005c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c52:	4614      	mov	r4, r2
 8005c54:	461a      	mov	r2, r3
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <__assert_func+0x2c>)
 8005c58:	4605      	mov	r5, r0
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68d8      	ldr	r0, [r3, #12]
 8005c5e:	b14c      	cbz	r4, 8005c74 <__assert_func+0x24>
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <__assert_func+0x30>)
 8005c62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c66:	9100      	str	r1, [sp, #0]
 8005c68:	462b      	mov	r3, r5
 8005c6a:	4906      	ldr	r1, [pc, #24]	; (8005c84 <__assert_func+0x34>)
 8005c6c:	f000 f842 	bl	8005cf4 <fiprintf>
 8005c70:	f000 f8d6 	bl	8005e20 <abort>
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <__assert_func+0x38>)
 8005c76:	461c      	mov	r4, r3
 8005c78:	e7f3      	b.n	8005c62 <__assert_func+0x12>
 8005c7a:	bf00      	nop
 8005c7c:	20000064 	.word	0x20000064
 8005c80:	0800613f 	.word	0x0800613f
 8005c84:	0800614c 	.word	0x0800614c
 8005c88:	0800617a 	.word	0x0800617a

08005c8c <_calloc_r>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	fba1 5402 	umull	r5, r4, r1, r2
 8005c92:	b934      	cbnz	r4, 8005ca2 <_calloc_r+0x16>
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7ff f937 	bl	8004f08 <_malloc_r>
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	b928      	cbnz	r0, 8005caa <_calloc_r+0x1e>
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	bd70      	pop	{r4, r5, r6, pc}
 8005ca2:	220c      	movs	r2, #12
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	6002      	str	r2, [r0, #0]
 8005ca8:	e7f9      	b.n	8005c9e <_calloc_r+0x12>
 8005caa:	462a      	mov	r2, r5
 8005cac:	4621      	mov	r1, r4
 8005cae:	f7fe f9be 	bl	800402e <memset>
 8005cb2:	e7f4      	b.n	8005c9e <_calloc_r+0x12>

08005cb4 <__ascii_mbtowc>:
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	b901      	cbnz	r1, 8005cba <__ascii_mbtowc+0x6>
 8005cb8:	a901      	add	r1, sp, #4
 8005cba:	b142      	cbz	r2, 8005cce <__ascii_mbtowc+0x1a>
 8005cbc:	b14b      	cbz	r3, 8005cd2 <__ascii_mbtowc+0x1e>
 8005cbe:	7813      	ldrb	r3, [r2, #0]
 8005cc0:	600b      	str	r3, [r1, #0]
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	1e10      	subs	r0, r2, #0
 8005cc6:	bf18      	it	ne
 8005cc8:	2001      	movne	r0, #1
 8005cca:	b002      	add	sp, #8
 8005ccc:	4770      	bx	lr
 8005cce:	4610      	mov	r0, r2
 8005cd0:	e7fb      	b.n	8005cca <__ascii_mbtowc+0x16>
 8005cd2:	f06f 0001 	mvn.w	r0, #1
 8005cd6:	e7f8      	b.n	8005cca <__ascii_mbtowc+0x16>

08005cd8 <__ascii_wctomb>:
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4608      	mov	r0, r1
 8005cdc:	b141      	cbz	r1, 8005cf0 <__ascii_wctomb+0x18>
 8005cde:	2aff      	cmp	r2, #255	; 0xff
 8005ce0:	d904      	bls.n	8005cec <__ascii_wctomb+0x14>
 8005ce2:	228a      	movs	r2, #138	; 0x8a
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	4770      	bx	lr
 8005cec:	2001      	movs	r0, #1
 8005cee:	700a      	strb	r2, [r1, #0]
 8005cf0:	4770      	bx	lr
	...

08005cf4 <fiprintf>:
 8005cf4:	b40e      	push	{r1, r2, r3}
 8005cf6:	b503      	push	{r0, r1, lr}
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	ab03      	add	r3, sp, #12
 8005cfc:	4805      	ldr	r0, [pc, #20]	; (8005d14 <fiprintf+0x20>)
 8005cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d02:	6800      	ldr	r0, [r0, #0]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	f7ff fd2b 	bl	8005760 <_vfiprintf_r>
 8005d0a:	b002      	add	sp, #8
 8005d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d10:	b003      	add	sp, #12
 8005d12:	4770      	bx	lr
 8005d14:	20000064 	.word	0x20000064

08005d18 <__swhatbuf_r>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d20:	4615      	mov	r5, r2
 8005d22:	2900      	cmp	r1, #0
 8005d24:	461e      	mov	r6, r3
 8005d26:	b096      	sub	sp, #88	; 0x58
 8005d28:	da0c      	bge.n	8005d44 <__swhatbuf_r+0x2c>
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d32:	bf0c      	ite	eq
 8005d34:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d38:	2340      	movne	r3, #64	; 0x40
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	6031      	str	r1, [r6, #0]
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	b016      	add	sp, #88	; 0x58
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	466a      	mov	r2, sp
 8005d46:	f000 f849 	bl	8005ddc <_fstat_r>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	dbed      	blt.n	8005d2a <__swhatbuf_r+0x12>
 8005d4e:	9901      	ldr	r1, [sp, #4]
 8005d50:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d54:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d58:	4259      	negs	r1, r3
 8005d5a:	4159      	adcs	r1, r3
 8005d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d60:	e7eb      	b.n	8005d3a <__swhatbuf_r+0x22>

08005d62 <__smakebuf_r>:
 8005d62:	898b      	ldrh	r3, [r1, #12]
 8005d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d66:	079d      	lsls	r5, r3, #30
 8005d68:	4606      	mov	r6, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	d507      	bpl.n	8005d7e <__smakebuf_r+0x1c>
 8005d6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	6123      	str	r3, [r4, #16]
 8005d76:	2301      	movs	r3, #1
 8005d78:	6163      	str	r3, [r4, #20]
 8005d7a:	b002      	add	sp, #8
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	466a      	mov	r2, sp
 8005d80:	ab01      	add	r3, sp, #4
 8005d82:	f7ff ffc9 	bl	8005d18 <__swhatbuf_r>
 8005d86:	9900      	ldr	r1, [sp, #0]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7ff f8bc 	bl	8004f08 <_malloc_r>
 8005d90:	b948      	cbnz	r0, 8005da6 <__smakebuf_r+0x44>
 8005d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d96:	059a      	lsls	r2, r3, #22
 8005d98:	d4ef      	bmi.n	8005d7a <__smakebuf_r+0x18>
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	f043 0302 	orr.w	r3, r3, #2
 8005da2:	81a3      	strh	r3, [r4, #12]
 8005da4:	e7e3      	b.n	8005d6e <__smakebuf_r+0xc>
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	6020      	str	r0, [r4, #0]
 8005daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	9b00      	ldr	r3, [sp, #0]
 8005db2:	6120      	str	r0, [r4, #16]
 8005db4:	6163      	str	r3, [r4, #20]
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	b15b      	cbz	r3, 8005dd2 <__smakebuf_r+0x70>
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc0:	f000 f81e 	bl	8005e00 <_isatty_r>
 8005dc4:	b128      	cbz	r0, 8005dd2 <__smakebuf_r+0x70>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f023 0303 	bic.w	r3, r3, #3
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	81a3      	strh	r3, [r4, #12]
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	431d      	orrs	r5, r3
 8005dd6:	81a5      	strh	r5, [r4, #12]
 8005dd8:	e7cf      	b.n	8005d7a <__smakebuf_r+0x18>
	...

08005ddc <_fstat_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	2300      	movs	r3, #0
 8005de0:	4d06      	ldr	r5, [pc, #24]	; (8005dfc <_fstat_r+0x20>)
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	f7fb fbb5 	bl	8001558 <_fstat>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	d102      	bne.n	8005df8 <_fstat_r+0x1c>
 8005df2:	682b      	ldr	r3, [r5, #0]
 8005df4:	b103      	cbz	r3, 8005df8 <_fstat_r+0x1c>
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	bd38      	pop	{r3, r4, r5, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200003d0 	.word	0x200003d0

08005e00 <_isatty_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	2300      	movs	r3, #0
 8005e04:	4d05      	ldr	r5, [pc, #20]	; (8005e1c <_isatty_r+0x1c>)
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fb fbb3 	bl	8001576 <_isatty>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_isatty_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_isatty_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	200003d0 	.word	0x200003d0

08005e20 <abort>:
 8005e20:	2006      	movs	r0, #6
 8005e22:	b508      	push	{r3, lr}
 8005e24:	f000 f82c 	bl	8005e80 <raise>
 8005e28:	2001      	movs	r0, #1
 8005e2a:	f7fb fb63 	bl	80014f4 <_exit>

08005e2e <_raise_r>:
 8005e2e:	291f      	cmp	r1, #31
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4604      	mov	r4, r0
 8005e34:	460d      	mov	r5, r1
 8005e36:	d904      	bls.n	8005e42 <_raise_r+0x14>
 8005e38:	2316      	movs	r3, #22
 8005e3a:	6003      	str	r3, [r0, #0]
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
 8005e42:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e44:	b112      	cbz	r2, 8005e4c <_raise_r+0x1e>
 8005e46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e4a:	b94b      	cbnz	r3, 8005e60 <_raise_r+0x32>
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 f831 	bl	8005eb4 <_getpid_r>
 8005e52:	462a      	mov	r2, r5
 8005e54:	4601      	mov	r1, r0
 8005e56:	4620      	mov	r0, r4
 8005e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e5c:	f000 b818 	b.w	8005e90 <_kill_r>
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d00a      	beq.n	8005e7a <_raise_r+0x4c>
 8005e64:	1c59      	adds	r1, r3, #1
 8005e66:	d103      	bne.n	8005e70 <_raise_r+0x42>
 8005e68:	2316      	movs	r3, #22
 8005e6a:	6003      	str	r3, [r0, #0]
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	e7e7      	b.n	8005e40 <_raise_r+0x12>
 8005e70:	2400      	movs	r4, #0
 8005e72:	4628      	mov	r0, r5
 8005e74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e78:	4798      	blx	r3
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e7e0      	b.n	8005e40 <_raise_r+0x12>
	...

08005e80 <raise>:
 8005e80:	4b02      	ldr	r3, [pc, #8]	; (8005e8c <raise+0xc>)
 8005e82:	4601      	mov	r1, r0
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	f7ff bfd2 	b.w	8005e2e <_raise_r>
 8005e8a:	bf00      	nop
 8005e8c:	20000064 	.word	0x20000064

08005e90 <_kill_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	2300      	movs	r3, #0
 8005e94:	4d06      	ldr	r5, [pc, #24]	; (8005eb0 <_kill_r+0x20>)
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	f7fb fb19 	bl	80014d4 <_kill>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	d102      	bne.n	8005eac <_kill_r+0x1c>
 8005ea6:	682b      	ldr	r3, [r5, #0]
 8005ea8:	b103      	cbz	r3, 8005eac <_kill_r+0x1c>
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	bd38      	pop	{r3, r4, r5, pc}
 8005eae:	bf00      	nop
 8005eb0:	200003d0 	.word	0x200003d0

08005eb4 <_getpid_r>:
 8005eb4:	f7fb bb07 	b.w	80014c6 <_getpid>

08005eb8 <_init>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr

08005ec4 <_fini>:
 8005ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec6:	bf00      	nop
 8005ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eca:	bc08      	pop	{r3}
 8005ecc:	469e      	mov	lr, r3
 8005ece:	4770      	bx	lr
