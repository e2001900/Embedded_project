
Current_shunt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08005e18  08005e18  00015e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d4  080061d4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061dc  080061dc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061e0  080061e0  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080061e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  080063b8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080063b8  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008793  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000181f  00000000  00000000  000289d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000600  00000000  00000000  0002a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016adb  00000000  00000000  0002afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000998b  00000000  00000000  00041ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cac9  00000000  00000000  0004b43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fbc  00000000  00000000  000d7f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000daec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08005e00 	.word	0x08005e00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08005e00 	.word	0x08005e00

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	468e      	mov	lr, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14c      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4694      	mov	ip, r2
 8000b9c:	d967      	bls.n	8000c6e <__udivmoddi4+0xe6>
 8000b9e:	fab2 f382 	clz	r3, r2
 8000ba2:	b153      	cbz	r3, 8000bba <__udivmoddi4+0x32>
 8000ba4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba8:	f1c3 0220 	rsb	r2, r3, #32
 8000bac:	fa01 fe03 	lsl.w	lr, r1, r3
 8000bb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb4:	ea42 0e0e 	orr.w	lr, r2, lr
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bbe:	fbbe f1f7 	udiv	r1, lr, r7
 8000bc2:	fa1f f58c 	uxth.w	r5, ip
 8000bc6:	fb07 ee11 	mls	lr, r7, r1, lr
 8000bca:	fb01 f005 	mul.w	r0, r1, r5
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x66>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 3eff 	add.w	lr, r1, #4294967295
 8000be0:	f080 8119 	bcs.w	8000e16 <__udivmoddi4+0x28e>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8116 	bls.w	8000e16 <__udivmoddi4+0x28e>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf4:	fb07 2210 	mls	r2, r7, r0, r2
 8000bf8:	fb00 f505 	mul.w	r5, r0, r5
 8000bfc:	b2a4      	uxth	r4, r4
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8104 	bcs.w	8000e1a <__udivmoddi4+0x292>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8101 	bls.w	8000e1a <__udivmoddi4+0x292>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	2100      	movs	r1, #0
 8000c22:	1b64      	subs	r4, r4, r5
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xc0>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ea 	beq.w	8000e10 <__udivmoddi4+0x288>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d148      	bne.n	8000ce2 <__udivmoddi4+0x15a>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xd2>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2c2>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4696      	mov	lr, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c68:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xea>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 808e 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7c:	1a88      	subs	r0, r1, r2
 8000c7e:	2101      	movs	r1, #1
 8000c80:	0c17      	lsrs	r7, r2, #16
 8000c82:	fa1f fe82 	uxth.w	lr, r2
 8000c86:	fbb0 f5f7 	udiv	r5, r0, r7
 8000c8a:	fb07 0015 	mls	r0, r7, r5, r0
 8000c8e:	0c22      	lsrs	r2, r4, #16
 8000c90:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c94:	fb0e f005 	mul.w	r0, lr, r5
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x126>
 8000c9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca4:	d202      	bcs.n	8000cac <__udivmoddi4+0x124>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f200 80cc 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000cac:	4645      	mov	r5, r8
 8000cae:	1a12      	subs	r2, r2, r0
 8000cb0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x150>
 8000cc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x14e>
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	f200 80b4 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	eba4 040e 	sub.w	r4, r4, lr
 8000cdc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce0:	e7a0      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000ce2:	f1c1 0720 	rsb	r7, r1, #32
 8000ce6:	408b      	lsls	r3, r1
 8000ce8:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cec:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf0:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf8:	fbba f8f9 	udiv	r8, sl, r9
 8000cfc:	408d      	lsls	r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	432b      	orrs	r3, r5
 8000d0c:	fa00 f501 	lsl.w	r5, r0, r1
 8000d10:	fb08 f00e 	mul.w	r0, r8, lr
 8000d14:	0c1c      	lsrs	r4, r3, #16
 8000d16:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d1a:	42a0      	cmp	r0, r4
 8000d1c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d20:	d90b      	bls.n	8000d3a <__udivmoddi4+0x1b2>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2a:	f080 8086 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2e:	42a0      	cmp	r0, r4
 8000d30:	f240 8083 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d34:	f1a8 0802 	sub.w	r8, r8, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1a24      	subs	r4, r4, r0
 8000d3c:	b298      	uxth	r0, r3
 8000d3e:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d42:	fb09 4413 	mls	r4, r9, r3, r4
 8000d46:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d4a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x1dc>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5a:	d26a      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d968      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d60:	3b02      	subs	r3, #2
 8000d62:	4464      	add	r4, ip
 8000d64:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d68:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6c:	eba4 040e 	sub.w	r4, r4, lr
 8000d70:	429c      	cmp	r4, r3
 8000d72:	46c8      	mov	r8, r9
 8000d74:	469e      	mov	lr, r3
 8000d76:	d354      	bcc.n	8000e22 <__udivmoddi4+0x29a>
 8000d78:	d051      	beq.n	8000e1e <__udivmoddi4+0x296>
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d067      	beq.n	8000e4e <__udivmoddi4+0x2c6>
 8000d7e:	ebb5 0308 	subs.w	r3, r5, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	40cb      	lsrs	r3, r1
 8000d88:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e74a      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d9c:	f1c3 0020 	rsb	r0, r3, #32
 8000da0:	40c1      	lsrs	r1, r0
 8000da2:	409d      	lsls	r5, r3
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	4328      	orrs	r0, r5
 8000dae:	fbb1 f5f7 	udiv	r5, r1, r7
 8000db2:	fb07 1115 	mls	r1, r7, r5, r1
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	0c02      	lsrs	r2, r0, #16
 8000dbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000dc4:	4291      	cmp	r1, r2
 8000dc6:	fa04 f403 	lsl.w	r4, r4, r3
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3d02      	subs	r5, #2
 8000ddc:	4462      	add	r2, ip
 8000dde:	1a52      	subs	r2, r2, r1
 8000de0:	fbb2 f1f7 	udiv	r1, r2, r7
 8000de4:	fb07 2211 	mls	r2, r7, r1, r2
 8000de8:	b280      	uxth	r0, r0
 8000dea:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dee:	fb01 f20e 	mul.w	r2, r1, lr
 8000df2:	4282      	cmp	r2, r0
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x280>
 8000df6:	eb1c 0000 	adds.w	r0, ip, r0
 8000dfa:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dfe:	d216      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000e00:	4282      	cmp	r2, r0
 8000e02:	d914      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e04:	3902      	subs	r1, #2
 8000e06:	4460      	add	r0, ip
 8000e08:	1a80      	subs	r0, r0, r2
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	e73a      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e10:	4631      	mov	r1, r6
 8000e12:	4630      	mov	r0, r6
 8000e14:	e70b      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000e16:	4671      	mov	r1, lr
 8000e18:	e6e9      	b.n	8000bee <__udivmoddi4+0x66>
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	e6fe      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e1e:	454d      	cmp	r5, r9
 8000e20:	d2ab      	bcs.n	8000d7a <__udivmoddi4+0x1f2>
 8000e22:	ebb9 0802 	subs.w	r8, r9, r2
 8000e26:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000e2a:	3801      	subs	r0, #1
 8000e2c:	e7a5      	b.n	8000d7a <__udivmoddi4+0x1f2>
 8000e2e:	4641      	mov	r1, r8
 8000e30:	e7ea      	b.n	8000e08 <__udivmoddi4+0x280>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e796      	b.n	8000d64 <__udivmoddi4+0x1dc>
 8000e36:	4645      	mov	r5, r8
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	46d0      	mov	r8, sl
 8000e3c:	e77d      	b.n	8000d3a <__udivmoddi4+0x1b2>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e749      	b.n	8000cd8 <__udivmoddi4+0x150>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e731      	b.n	8000cae <__udivmoddi4+0x126>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xdc>
 8000e4e:	4631      	mov	r1, r6
 8000e50:	e6ed      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000e52:	bf00      	nop

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <_write+0x28>)
 8000e70:	f002 f938 	bl	80030e4 <HAL_UART_Transmit>
	return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000244 	.word	0x20000244
 8000e84:	00000000 	.word	0x00000000

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 fb4e 	bl	800152e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f865 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 f933 	bl	8001100 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e9a:	f000 f907 	bl	80010ac <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000e9e:	f000 f8ad 	bl	8000ffc <MX_ADC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc);
 8000ea2:	482b      	ldr	r0, [pc, #172]	; (8000f50 <main+0xc8>)
 8000ea4:	f000 fd1a 	bl	80018dc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 100);
 8000ea8:	2164      	movs	r1, #100	; 0x64
 8000eaa:	4829      	ldr	r0, [pc, #164]	; (8000f50 <main+0xc8>)
 8000eac:	f000 fda2 	bl	80019f4 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc);
 8000eb0:	4827      	ldr	r0, [pc, #156]	; (8000f50 <main+0xc8>)
 8000eb2:	f000 fe2f 	bl	8001b14 <HAL_ADC_GetValue>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_Stop(&hadc);
 8000eba:	4825      	ldr	r0, [pc, #148]	; (8000f50 <main+0xc8>)
 8000ebc:	f000 fd6e 	bl	800199c <HAL_ADC_Stop>
	  voltage = (adc_value*3.3)/4096;
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f7ff fab7 	bl	8000434 <__aeabi_i2d>
 8000ec6:	a31e      	add	r3, pc, #120	; (adr r3, 8000f40 <main+0xb8>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fb1c 	bl	8000508 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <main+0xcc>)
 8000ede:	f7ff fc3d 	bl	800075c <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fde5 	bl	8000ab8 <__aeabi_d2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60bb      	str	r3, [r7, #8]
	  current = voltage/0.015;
 8000ef2:	68b8      	ldr	r0, [r7, #8]
 8000ef4:	f7ff fab0 	bl	8000458 <__aeabi_f2d>
 8000ef8:	a313      	add	r3, pc, #76	; (adr r3, 8000f48 <main+0xc0>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f7ff fc2d 	bl	800075c <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fdd5 	bl	8000ab8 <__aeabi_d2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	607b      	str	r3, [r7, #4]
	  printf("Voltage is: %f\r\n", voltage);
 8000f12:	68b8      	ldr	r0, [r7, #8]
 8000f14:	f7ff faa0 	bl	8000458 <__aeabi_f2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <main+0xd0>)
 8000f1e:	f002 ffd7 	bl	8003ed0 <iprintf>
	  printf("Current is: %f\r\n", current);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fa98 	bl	8000458 <__aeabi_f2d>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <main+0xd4>)
 8000f2e:	f002 ffcf 	bl	8003ed0 <iprintf>
	  	  HAL_Delay(500);
 8000f32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f36:	f000 fb69 	bl	800160c <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 8000f3a:	e7b2      	b.n	8000ea2 <main+0x1a>
 8000f3c:	f3af 8000 	nop.w
 8000f40:	66666666 	.word	0x66666666
 8000f44:	400a6666 	.word	0x400a6666
 8000f48:	eb851eb8 	.word	0xeb851eb8
 8000f4c:	3f8eb851 	.word	0x3f8eb851
 8000f50:	200001f0 	.word	0x200001f0
 8000f54:	40b00000 	.word	0x40b00000
 8000f58:	08005e18 	.word	0x08005e18
 8000f5c:	08005e2c 	.word	0x08005e2c

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b092      	sub	sp, #72	; 0x48
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	2234      	movs	r2, #52	; 0x34
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 f803 	bl	8003f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <SystemClock_Config+0x98>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <SystemClock_Config+0x98>)
 8000f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f90:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f92:	2302      	movs	r3, #2
 8000f94:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000fa6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000fac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000fb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fa4e 	bl	8002458 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fc2:	f000 f903 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fd6a 	bl	8002ab8 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fea:	f000 f8ef 	bl	80011cc <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3748      	adds	r7, #72	; 0x48
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40007000 	.word	0x40007000

08000ffc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <MX_ADC_Init+0xa8>)
 800100e:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <MX_ADC_Init+0xac>)
 8001010:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_ADC_Init+0xa8>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC_Init+0xa8>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC_Init+0xa8>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC_Init+0xa8>)
 800104c:	2201      	movs	r2, #1
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_ADC_Init+0xa8>)
 800105a:	2210      	movs	r2, #16
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001060:	2200      	movs	r2, #0
 8001062:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC_Init+0xa8>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_ADC_Init+0xa8>)
 800106e:	f000 faef 	bl	8001650 <HAL_ADC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001078:	f000 f8a8 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800107c:	2301      	movs	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001080:	2301      	movs	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC_Init+0xa8>)
 800108e:	f000 fd4d 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001098:	f000 f898 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200001f0 	.word	0x200001f0
 80010a8:	40012400 	.word	0x40012400

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART2_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f001 ffae 	bl	8003044 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 f86d 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000244 	.word	0x20000244
 80010fc:	40004400 	.word	0x40004400

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MX_GPIO_Init+0xc0>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <MX_GPIO_Init+0xc0>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_GPIO_Init+0xc0>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_GPIO_Init+0xc0>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <MX_GPIO_Init+0xc0>)
 8001134:	f043 0320 	orr.w	r3, r3, #32
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_GPIO_Init+0xc0>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_GPIO_Init+0xc0>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <MX_GPIO_Init+0xc0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_GPIO_Init+0xc0>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_GPIO_Init+0xc0>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_GPIO_Init+0xc0>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_GPIO_Init+0xc0>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_GPIO_Init+0xc4>)
 800117c:	f001 f954 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001186:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_GPIO_Init+0xc8>)
 8001198:	f000 ffb6 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800119c:	2320      	movs	r3, #32
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_GPIO_Init+0xc4>)
 80011b4:	f000 ffa8 	bl	8002108 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020800 	.word	0x40020800

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_MspInit+0x5c>)
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_MspInit+0x5c>)
 80011e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e8:	6253      	str	r3, [r2, #36]	; 0x24
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_MspInit+0x5c>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x5c>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x5c>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6213      	str	r3, [r2, #32]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x5c>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x5c>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x5c>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6253      	str	r3, [r2, #36]	; 0x24
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x5c>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001226:	2007      	movs	r0, #7
 8001228:	f000 ff3a 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a15      	ldr	r2, [pc, #84]	; (80012ac <HAL_ADC_MspInit+0x74>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d123      	bne.n	80012a2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_ADC_MspInit+0x78>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_ADC_MspInit+0x78>)
 8001260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001264:	6213      	str	r3, [r2, #32]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_ADC_MspInit+0x78>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_ADC_MspInit+0x78>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_ADC_MspInit+0x78>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_ADC_MspInit+0x78>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800128a:	2302      	movs	r3, #2
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_ADC_MspInit+0x7c>)
 800129e:	f000 ff33 	bl	8002108 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40012400 	.word	0x40012400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_UART_MspInit+0x7c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d127      	bne.n	800132a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_UART_MspInit+0x80>)
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	4a16      	ldr	r2, [pc, #88]	; (8001338 <HAL_UART_MspInit+0x80>)
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	6253      	str	r3, [r2, #36]	; 0x24
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_UART_MspInit+0x80>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_UART_MspInit+0x80>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_UART_MspInit+0x80>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_UART_MspInit+0x80>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800130a:	230c      	movs	r3, #12
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131a:	2307      	movs	r3, #7
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_UART_MspInit+0x84>)
 8001326:	f000 feef 	bl	8002108 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40004400 	.word	0x40004400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f925 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}

0800138e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <_kill>:

int _kill(int pid, int sig)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013a6:	f002 fe3b 	bl	8004020 <__errno>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2216      	movs	r2, #22
 80013ae:	601a      	str	r2, [r3, #0]
  return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_exit>:

void _exit (int status)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffe7 	bl	800139c <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ce:	e7fe      	b.n	80013ce <_exit+0x12>

080013d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013e2:	f3af 8000 	nop.w
 80013e6:	4601      	mov	r1, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf0      	blt.n	80013e2 <_read+0x12>
  }

  return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_close>:
  }
  return len;
}

int _close(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001430:	605a      	str	r2, [r3, #4]
  return 0;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <_isatty>:

int _isatty(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
	...

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f002 fdc0 	bl	8004020 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20014000 	.word	0x20014000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	2000028c 	.word	0x2000028c
 80014d4:	200003e0 	.word	0x200003e0

080014d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e4:	f7ff fff8 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480b      	ldr	r0, [pc, #44]	; (8001518 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ea:	490c      	ldr	r1, [pc, #48]	; (800151c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014ec:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001500:	4c09      	ldr	r4, [pc, #36]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150e:	f002 fd8d 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001512:	f7ff fcb9 	bl	8000e88 <main>
  bx lr
 8001516:	4770      	bx	lr
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001520:	080061e4 	.word	0x080061e4
  ldr r2, =_sbss
 8001524:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001528:	200003e0 	.word	0x200003e0

0800152c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_IRQHandler>

0800152e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 fdb1 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f80e 	bl	8001560 <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	e001      	b.n	8001554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001550:	f7ff fe42 	bl	80011d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001554:	79fb      	ldrb	r3, [r7, #7]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_InitTick+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d022      	beq.n	80015ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_InitTick+0x6c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_InitTick+0x68>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001580:	fbb1 f3f3 	udiv	r3, r1, r3
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fdb0 	bl	80020ee <HAL_SYSTICK_Config>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10f      	bne.n	80015b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	d809      	bhi.n	80015ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159a:	2200      	movs	r2, #0
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	f04f 30ff 	mov.w	r0, #4294967295
 80015a2:	f000 fd88 	bl	80020b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_InitTick+0x70>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e007      	b.n	80015be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e004      	b.n	80015be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e001      	b.n	80015be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x1c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x20>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_IncTick+0x1c>)
 80015e4:	6013      	str	r3, [r2, #0]
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000290 	.word	0x20000290
 80015f4:	20000008 	.word	0x20000008

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_GetTick+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000290 	.word	0x20000290

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff fff0 	bl	80015f8 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d004      	beq.n	8001630 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_Delay+0x40>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4413      	add	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001630:	bf00      	nop
 8001632:	f7ff ffe1 	bl	80015f8 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	429a      	cmp	r2, r3
 8001640:	d8f7      	bhi.n	8001632 <HAL_Delay+0x26>
  {
  }
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000008 	.word	0x20000008

08001650 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e127      	b.n	80018c0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d115      	bne.n	80016aa <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168c:	4b8e      	ldr	r3, [pc, #568]	; (80018c8 <HAL_ADC_Init+0x278>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a8d      	ldr	r2, [pc, #564]	; (80018c8 <HAL_ADC_Init+0x278>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	4b8b      	ldr	r3, [pc, #556]	; (80018c8 <HAL_ADC_Init+0x278>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fdc7 	bl	8001238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80ff 	bne.w	80018b6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c0:	f023 0302 	bic.w	r3, r3, #2
 80016c4:	f043 0202 	orr.w	r2, r3, #2
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80016cc:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <HAL_ADC_Init+0x27c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	497c      	ldr	r1, [pc, #496]	; (80018cc <HAL_ADC_Init+0x27c>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80016e6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ee:	4619      	mov	r1, r3
 80016f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f4:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800170a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001710:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001732:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001736:	4313      	orrs	r3, r2
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	2b10      	cmp	r3, #16
 8001740:	d007      	beq.n	8001752 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800174a:	4313      	orrs	r3, r2
 800174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174e:	4313      	orrs	r3, r2
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175c:	2b40      	cmp	r3, #64	; 0x40
 800175e:	d04f      	beq.n	8001800 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001766:	4313      	orrs	r3, r2
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001772:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6912      	ldr	r2, [r2, #16]
 8001778:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800177c:	d003      	beq.n	8001786 <HAL_ADC_Init+0x136>
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6912      	ldr	r2, [r2, #16]
 8001782:	2a01      	cmp	r2, #1
 8001784:	d102      	bne.n	800178c <HAL_ADC_Init+0x13c>
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	e000      	b.n	800178e <HAL_ADC_Init+0x13e>
 800178c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800178e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001792:	4313      	orrs	r3, r2
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800179c:	2b01      	cmp	r3, #1
 800179e:	d125      	bne.n	80017ec <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d114      	bne.n	80017d4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	3b01      	subs	r3, #1
 80017b0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80017b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	fa92 f2a2 	rbit	r2, r2
 80017bc:	617a      	str	r2, [r7, #20]
  return result;
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	fab2 f282 	clz	r2, r2
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ce:	4313      	orrs	r3, r2
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
 80017d2:	e00b      	b.n	80017ec <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f043 0220 	orr.w	r2, r3, #32
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_ADC_Init+0x280>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <HAL_ADC_Init+0x284>)
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800181c:	d003      	beq.n	8001826 <HAL_ADC_Init+0x1d6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d119      	bne.n	800185a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	3b01      	subs	r3, #1
 8001836:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800183a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	fa92 f2a2 	rbit	r2, r2
 8001842:	60fa      	str	r2, [r7, #12]
  return result;
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	fab2 f282 	clz	r2, r2
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	fa03 f202 	lsl.w	r2, r3, r2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
 8001858:	e007      	b.n	800186a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_ADC_Init+0x288>)
 8001872:	4013      	ands	r3, r2
 8001874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001876:	429a      	cmp	r2, r3
 8001878:	d10b      	bne.n	8001892 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	f023 0303 	bic.w	r3, r3, #3
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001890:	e014      	b.n	80018bc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f023 0312 	bic.w	r3, r3, #18
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80018b4:	e002      	b.n	80018bc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3738      	adds	r7, #56	; 0x38
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40012700 	.word	0x40012700
 80018d0:	fcfc16ff 	.word	0xfcfc16ff
 80018d4:	c0fff189 	.word	0xc0fff189
 80018d8:	bf80fffe 	.word	0xbf80fffe

080018dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Start+0x1a>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e04e      	b.n	8001994 <HAL_ADC_Start+0xb8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fa80 	bl	8001e04 <ADC_Enable>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d141      	bne.n	8001992 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001938:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194c:	d106      	bne.n	800195c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001952:	f023 0206 	bic.w	r2, r3, #6
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	651a      	str	r2, [r3, #80]	; 0x50
 800195a:	e002      	b.n	8001962 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001972:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d107      	bne.n	8001992 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001990:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_Stop+0x1a>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e01a      	b.n	80019ec <HAL_ADC_Stop+0x50>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fa7c 	bl	8001ebc <ADC_ConversionStop_Disable>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a10:	d113      	bne.n	8001a3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f043 0220 	orr.w	r2, r3, #32
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e068      	b.n	8001b0c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a3a:	f7ff fddd 	bl	80015f8 <HAL_GetTick>
 8001a3e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a40:	e021      	b.n	8001a86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d01d      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <HAL_ADC_PollForConversion+0x6c>
 8001a50:	f7ff fdd2 	bl	80015f8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d212      	bcs.n	8001a86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10b      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f043 0204 	orr.w	r2, r3, #4
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e042      	b.n	8001b0c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0d6      	beq.n	8001a42 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0212 	mvn.w	r2, #18
 8001aa4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d124      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11f      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d111      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x20>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e14f      	b.n	8001dec <HAL_ADC_ConfigChannel+0x2c0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d81c      	bhi.n	8001b96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b05      	subs	r3, #5
 8001b6e:	221f      	movs	r2, #31
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4019      	ands	r1, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	3b05      	subs	r3, #5
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
 8001b94:	e07e      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d81c      	bhi.n	8001bd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b23      	subs	r3, #35	; 0x23
 8001bb0:	221f      	movs	r2, #31
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	4019      	ands	r1, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b23      	subs	r3, #35	; 0x23
 8001bca:	fa00 f203 	lsl.w	r2, r0, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bd6:	e05d      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b12      	cmp	r3, #18
 8001bde:	d81c      	bhi.n	8001c1a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b41      	subs	r3, #65	; 0x41
 8001bf2:	221f      	movs	r2, #31
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4019      	ands	r1, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b41      	subs	r3, #65	; 0x41
 8001c0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38
 8001c18:	e03c      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b18      	cmp	r3, #24
 8001c20:	d81c      	bhi.n	8001c5c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b5f      	subs	r3, #95	; 0x5f
 8001c34:	221f      	movs	r2, #31
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4019      	ands	r1, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b5f      	subs	r3, #95	; 0x5f
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5a:	e01b      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b7d      	subs	r3, #125	; 0x7d
 8001c6e:	221f      	movs	r2, #31
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4019      	ands	r1, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b7d      	subs	r3, #125	; 0x7d
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d81a      	bhi.n	8001cd2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6959      	ldr	r1, [r3, #20]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	2207      	movs	r2, #7
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	4019      	ands	r1, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6898      	ldr	r0, [r3, #8]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	e05d      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b13      	cmp	r3, #19
 8001cd8:	d81c      	bhi.n	8001d14 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6919      	ldr	r1, [r3, #16]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b1e      	subs	r3, #30
 8001cec:	2207      	movs	r2, #7
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4019      	ands	r1, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6898      	ldr	r0, [r3, #8]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	e03c      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b1d      	cmp	r3, #29
 8001d1a:	d81c      	bhi.n	8001d56 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68d9      	ldr	r1, [r3, #12]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3b3c      	subs	r3, #60	; 0x3c
 8001d2e:	2207      	movs	r2, #7
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4019      	ands	r1, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6898      	ldr	r0, [r3, #8]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	3b3c      	subs	r3, #60	; 0x3c
 8001d48:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	e01b      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	3b5a      	subs	r3, #90	; 0x5a
 8001d68:	2207      	movs	r2, #7
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4019      	ands	r1, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6898      	ldr	r0, [r3, #8]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b5a      	subs	r3, #90	; 0x5a
 8001d82:	fa00 f203 	lsl.w	r2, r0, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d003      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	d121      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_ADC_ConfigChannel+0x2cc>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d11b      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_ADC_ConfigChannel+0x2cc>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_ADC_ConfigChannel+0x2cc>)
 8001db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db4:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d111      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_ADC_ConfigChannel+0x2d0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_ADC_ConfigChannel+0x2d4>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	0c9a      	lsrs	r2, r3, #18
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f9      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40012700 	.word	0x40012700
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	431bde83 	.word	0x431bde83

08001e04 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d043      	beq.n	8001eaa <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <ADC_Enable+0xb0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a20      	ldr	r2, [pc, #128]	; (8001eb8 <ADC_Enable+0xb4>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	0c9a      	lsrs	r2, r3, #18
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e46:	e002      	b.n	8001e4e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001e54:	f7ff fbd0 	bl	80015f8 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e5a:	e01f      	b.n	8001e9c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001e5c:	f7ff fbcc 	bl	80015f8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d918      	bls.n	8001e9c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d011      	beq.n	8001e9c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	f043 0210 	orr.w	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e007      	b.n	8001eac <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d1d8      	bne.n	8001e5c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	431bde83 	.word	0x431bde83

08001ebc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed2:	2b40      	cmp	r3, #64	; 0x40
 8001ed4:	d12e      	bne.n	8001f34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ee6:	f7ff fb87 	bl	80015f8 <HAL_GetTick>
 8001eea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eec:	e01b      	b.n	8001f26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001eee:	f7ff fb83 	bl	80015f8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d914      	bls.n	8001f26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d10d      	bne.n	8001f26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f043 0210 	orr.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f1a:	f043 0201 	orr.w	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e007      	b.n	8001f36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b40      	cmp	r3, #64	; 0x40
 8001f32:	d0dc      	beq.n	8001eee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff90 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff49 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff5e 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffb0 	bl	800205c <SysTick_Config>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800211e:	e160      	b.n	80023e2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8152 	beq.w	80023dc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800214c:	2b02      	cmp	r3, #2
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d017      	beq.n	80021ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d123      	bne.n	8002242 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002206:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	6939      	ldr	r1, [r7, #16]
 800223e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0203 	and.w	r2, r3, #3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80ac 	beq.w	80023dc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002284:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <HAL_GPIO_Init+0x2f8>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <HAL_GPIO_Init+0x2f8>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	4b5b      	ldr	r3, [pc, #364]	; (8002400 <HAL_GPIO_Init+0x2f8>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800229c:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_GPIO_Init+0x2fc>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a51      	ldr	r2, [pc, #324]	; (8002408 <HAL_GPIO_Init+0x300>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d025      	beq.n	8002314 <HAL_GPIO_Init+0x20c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a50      	ldr	r2, [pc, #320]	; (800240c <HAL_GPIO_Init+0x304>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01f      	beq.n	8002310 <HAL_GPIO_Init+0x208>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a4f      	ldr	r2, [pc, #316]	; (8002410 <HAL_GPIO_Init+0x308>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d019      	beq.n	800230c <HAL_GPIO_Init+0x204>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a4e      	ldr	r2, [pc, #312]	; (8002414 <HAL_GPIO_Init+0x30c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d013      	beq.n	8002308 <HAL_GPIO_Init+0x200>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a4d      	ldr	r2, [pc, #308]	; (8002418 <HAL_GPIO_Init+0x310>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00d      	beq.n	8002304 <HAL_GPIO_Init+0x1fc>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_GPIO_Init+0x314>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d007      	beq.n	8002300 <HAL_GPIO_Init+0x1f8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a4b      	ldr	r2, [pc, #300]	; (8002420 <HAL_GPIO_Init+0x318>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_GPIO_Init+0x1f4>
 80022f8:	2306      	movs	r3, #6
 80022fa:	e00c      	b.n	8002316 <HAL_GPIO_Init+0x20e>
 80022fc:	2307      	movs	r3, #7
 80022fe:	e00a      	b.n	8002316 <HAL_GPIO_Init+0x20e>
 8002300:	2305      	movs	r3, #5
 8002302:	e008      	b.n	8002316 <HAL_GPIO_Init+0x20e>
 8002304:	2304      	movs	r3, #4
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x20e>
 8002308:	2303      	movs	r3, #3
 800230a:	e004      	b.n	8002316 <HAL_GPIO_Init+0x20e>
 800230c:	2302      	movs	r3, #2
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x20e>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_GPIO_Init+0x20e>
 8002314:	2300      	movs	r3, #0
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002326:	4937      	ldr	r1, [pc, #220]	; (8002404 <HAL_GPIO_Init+0x2fc>)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_GPIO_Init+0x31c>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002358:	4a32      	ldr	r2, [pc, #200]	; (8002424 <HAL_GPIO_Init+0x31c>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <HAL_GPIO_Init+0x31c>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002382:	4a28      	ldr	r2, [pc, #160]	; (8002424 <HAL_GPIO_Init+0x31c>)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_GPIO_Init+0x31c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <HAL_GPIO_Init+0x31c>)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_GPIO_Init+0x31c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023d6:	4a13      	ldr	r2, [pc, #76]	; (8002424 <HAL_GPIO_Init+0x31c>)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3301      	adds	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f47f ae97 	bne.w	8002120 <HAL_GPIO_Init+0x18>
  }
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	40010000 	.word	0x40010000
 8002408:	40020000 	.word	0x40020000
 800240c:	40020400 	.word	0x40020400
 8002410:	40020800 	.word	0x40020800
 8002414:	40020c00 	.word	0x40020c00
 8002418:	40021000 	.word	0x40021000
 800241c:	40021400 	.word	0x40021400
 8002420:	40021800 	.word	0x40021800
 8002424:	40010400 	.word	0x40010400

08002428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002444:	e003      	b.n	800244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e31d      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246a:	4b94      	ldr	r3, [pc, #592]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002474:	4b91      	ldr	r3, [pc, #580]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d07b      	beq.n	8002582 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d006      	beq.n	800249e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x5e>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d10b      	bne.n	80024b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249e:	4b87      	ldr	r3, [pc, #540]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d06a      	beq.n	8002580 <HAL_RCC_OscConfig+0x128>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d166      	bne.n	8002580 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e2f7      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x74>
 80024be:	4b7f      	ldr	r3, [pc, #508]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7e      	ldr	r2, [pc, #504]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e02d      	b.n	8002528 <HAL_RCC_OscConfig+0xd0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x96>
 80024d4:	4b79      	ldr	r3, [pc, #484]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a78      	ldr	r2, [pc, #480]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b76      	ldr	r3, [pc, #472]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a75      	ldr	r2, [pc, #468]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e01c      	b.n	8002528 <HAL_RCC_OscConfig+0xd0>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0xb8>
 80024f6:	4b71      	ldr	r3, [pc, #452]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a70      	ldr	r2, [pc, #448]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80024fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b6e      	ldr	r3, [pc, #440]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6d      	ldr	r2, [pc, #436]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e00b      	b.n	8002528 <HAL_RCC_OscConfig+0xd0>
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a69      	ldr	r2, [pc, #420]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a66      	ldr	r2, [pc, #408]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff f862 	bl	80015f8 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff f85e 	bl	80015f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e2ad      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800254a:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0xe0>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff f84e 	bl	80015f8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff f84a 	bl	80015f8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e299      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002572:	4b52      	ldr	r3, [pc, #328]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x108>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d05a      	beq.n	8002644 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d119      	bne.n	80025ce <HAL_RCC_OscConfig+0x176>
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d116      	bne.n	80025ce <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a0:	4b46      	ldr	r3, [pc, #280]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x160>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e276      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b40      	ldr	r3, [pc, #256]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	493d      	ldr	r1, [pc, #244]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025cc:	e03a      	b.n	8002644 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d020      	beq.n	8002618 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d6:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCC_OscConfig+0x268>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff f80c 	bl	80015f8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e4:	f7ff f808 	bl	80015f8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e257      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	492a      	ldr	r1, [pc, #168]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
 8002616:	e015      	b.n	8002644 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_RCC_OscConfig+0x268>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe ffeb 	bl	80015f8 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe ffe7 	bl	80015f8 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e236      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80b8 	beq.w	80027c2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d170      	bne.n	800273a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_OscConfig+0x218>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e21a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800267c:	429a      	cmp	r2, r3
 800267e:	d921      	bls.n	80026c4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fc7d 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e208      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4906      	ldr	r1, [pc, #24]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	4901      	ldr	r1, [pc, #4]	; (80026bc <HAL_RCC_OscConfig+0x264>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
 80026ba:	e020      	b.n	80026fe <HAL_RCC_OscConfig+0x2a6>
 80026bc:	40023800 	.word	0x40023800
 80026c0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c4:	4b99      	ldr	r3, [pc, #612]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4996      	ldr	r1, [pc, #600]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d6:	4b95      	ldr	r3, [pc, #596]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	061b      	lsls	r3, r3, #24
 80026e4:	4991      	ldr	r1, [pc, #580]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fc48 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e1d3      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	0b5b      	lsrs	r3, r3, #13
 8002704:	3301      	adds	r3, #1
 8002706:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800270e:	4a87      	ldr	r2, [pc, #540]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002710:	6892      	ldr	r2, [r2, #8]
 8002712:	0912      	lsrs	r2, r2, #4
 8002714:	f002 020f 	and.w	r2, r2, #15
 8002718:	4985      	ldr	r1, [pc, #532]	; (8002930 <HAL_RCC_OscConfig+0x4d8>)
 800271a:	5c8a      	ldrb	r2, [r1, r2]
 800271c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800271e:	4a85      	ldr	r2, [pc, #532]	; (8002934 <HAL_RCC_OscConfig+0x4dc>)
 8002720:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002722:	4b85      	ldr	r3, [pc, #532]	; (8002938 <HAL_RCC_OscConfig+0x4e0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe ff1a 	bl	8001560 <HAL_InitTick>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d045      	beq.n	80027c2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	e1b5      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d029      	beq.n	8002796 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002742:	4b7e      	ldr	r3, [pc, #504]	; (800293c <HAL_RCC_OscConfig+0x4e4>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe ff56 	bl	80015f8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002750:	f7fe ff52 	bl	80015f8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1a1      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002762:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276e:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	496c      	ldr	r1, [pc, #432]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	4967      	ldr	r1, [pc, #412]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002796:	4b69      	ldr	r3, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x4e4>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe ff2c 	bl	80015f8 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a4:	f7fe ff28 	bl	80015f8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e177      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d030      	beq.n	8002830 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fe ff0c 	bl	80015f8 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fe ff08 	bl	80015f8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e157      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027f6:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x38c>
 8002802:	e015      	b.n	8002830 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002804:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <HAL_RCC_OscConfig+0x4e8>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280a:	f7fe fef5 	bl	80015f8 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fef1 	bl	80015f8 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e140      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002824:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80b5 	beq.w	80029a8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b37      	ldr	r3, [pc, #220]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	4a36      	ldr	r2, [pc, #216]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002858:	6253      	str	r3, [r2, #36]	; 0x24
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_RCC_OscConfig+0x4ec>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_RCC_OscConfig+0x4ec>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a32      	ldr	r2, [pc, #200]	; (8002944 <HAL_RCC_OscConfig+0x4ec>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7fe feb9 	bl	80015f8 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe feb5 	bl	80015f8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e104      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_OscConfig+0x4ec>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x466>
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6353      	str	r3, [r2, #52]	; 0x34
 80028bc:	e02d      	b.n	800291a <HAL_RCC_OscConfig+0x4c2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x488>
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d0:	6353      	str	r3, [r2, #52]	; 0x34
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	4a15      	ldr	r2, [pc, #84]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028dc:	6353      	str	r3, [r2, #52]	; 0x34
 80028de:	e01c      	b.n	800291a <HAL_RCC_OscConfig+0x4c2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x4aa>
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028f2:	6353      	str	r3, [r2, #52]	; 0x34
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x4c2>
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800290c:	6353      	str	r3, [r2, #52]	; 0x34
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002912:	4a06      	ldr	r2, [pc, #24]	; (800292c <HAL_RCC_OscConfig+0x4d4>)
 8002914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002918:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d024      	beq.n	800296c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7fe fe69 	bl	80015f8 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002928:	e019      	b.n	800295e <HAL_RCC_OscConfig+0x506>
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	08005e4c 	.word	0x08005e4c
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004
 800293c:	42470020 	.word	0x42470020
 8002940:	42470680 	.word	0x42470680
 8002944:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fe fe56 	bl	80015f8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0a3      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 8002960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0ee      	beq.n	8002948 <HAL_RCC_OscConfig+0x4f0>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7fe fe44 	bl	80015f8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002972:	e00a      	b.n	800298a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe fe40 	bl	80015f8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e08d      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1ee      	bne.n	8002974 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002996:	7ffb      	ldrb	r3, [r7, #31]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299c:	4b44      	ldr	r3, [pc, #272]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	4a43      	ldr	r2, [pc, #268]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 80029a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d079      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d056      	beq.n	8002a64 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d13b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <HAL_RCC_OscConfig+0x65c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe fe18 	bl	80015f8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fe14 	bl	80015f8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e063      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029de:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ea:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	4319      	orrs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	430b      	orrs	r3, r1
 8002a02:	492b      	ldr	r1, [pc, #172]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <HAL_RCC_OscConfig+0x65c>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fdf3 	bl	80015f8 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe fdef 	bl	80015f8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e03e      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a28:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x5be>
 8002a34:	e036      	b.n	8002aa4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCC_OscConfig+0x65c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fddc 	bl	80015f8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fdd8 	bl	80015f8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e027      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5ec>
 8002a62:	e01f      	b.n	8002aa4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e01a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <HAL_RCC_OscConfig+0x658>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	42470060 	.word	0x42470060

08002ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e11a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b8f      	ldr	r3, [pc, #572]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d919      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_RCC_ClockConfig+0x34>
 8002ae0:	4b8a      	ldr	r3, [pc, #552]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a89      	ldr	r2, [pc, #548]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b87      	ldr	r3, [pc, #540]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 0201 	bic.w	r2, r3, #1
 8002af4:	4985      	ldr	r1, [pc, #532]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afc:	4b83      	ldr	r3, [pc, #524]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0f9      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1a:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	497a      	ldr	r1, [pc, #488]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 808e 	beq.w	8002c56 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b42:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d121      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0d7      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d115      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0cb      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b72:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0bf      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b82:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0b7      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	495c      	ldr	r1, [pc, #368]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fd28 	bl	80015f8 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d112      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe fd20 	bl	80015f8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e09b      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bca:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d1ee      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xfc>
 8002bd6:	e03e      	b.n	8002c56 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d112      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be2:	f7fe fd09 	bl	80015f8 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e084      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf8:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d1ee      	bne.n	8002be2 <HAL_RCC_ClockConfig+0x12a>
 8002c04:	e027      	b.n	8002c56 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d11d      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fe fcf2 	bl	80015f8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e06d      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c26:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d1ee      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x158>
 8002c32:	e010      	b.n	8002c56 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7fe fce0 	bl	80015f8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e05b      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ee      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d219      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x1be>
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	4923      	ldr	r1, [pc, #140]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <HAL_RCC_ClockConfig+0x254>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e034      	b.n	8002d02 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4917      	ldr	r1, [pc, #92]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490f      	ldr	r1, [pc, #60]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f823 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_RCC_ClockConfig+0x258>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490b      	ldr	r1, [pc, #44]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x264>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc32 	bl	8001560 <HAL_InitTick>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d00:	7afb      	ldrb	r3, [r7, #11]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023c00 	.word	0x40023c00
 8002d10:	40023800 	.word	0x40023800
 8002d14:	08005e4c 	.word	0x08005e4c
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b092      	sub	sp, #72	; 0x48
 8002d26:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d28:	4b79      	ldr	r3, [pc, #484]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	d00d      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x34>
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	f200 80d5 	bhi.w	8002ee8 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x28>
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0x2e>
 8002d46:	e0cf      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b72      	ldr	r3, [pc, #456]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002d4a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002d4c:	e0da      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4e:	4b72      	ldr	r3, [pc, #456]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002d50:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002d52:	e0d7      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d56:	0c9b      	lsrs	r3, r3, #18
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002d5e:	5c9b      	ldrb	r3, [r3, r2]
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d64:	0d9b      	lsrs	r3, r3, #22
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d6e:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d05d      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4611      	mov	r1, r2
 8002d82:	4604      	mov	r4, r0
 8002d84:	460d      	mov	r5, r1
 8002d86:	4622      	mov	r2, r4
 8002d88:	462b      	mov	r3, r5
 8002d8a:	f04f 0000 	mov.w	r0, #0
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	0159      	lsls	r1, r3, #5
 8002d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d98:	0150      	lsls	r0, r2, #5
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4621      	mov	r1, r4
 8002da0:	1a51      	subs	r1, r2, r1
 8002da2:	6139      	str	r1, [r7, #16]
 8002da4:	4629      	mov	r1, r5
 8002da6:	eb63 0301 	sbc.w	r3, r3, r1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db8:	4659      	mov	r1, fp
 8002dba:	018b      	lsls	r3, r1, #6
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	018a      	lsls	r2, r1, #6
 8002dc6:	46d4      	mov	ip, sl
 8002dc8:	ebb2 080c 	subs.w	r8, r2, ip
 8002dcc:	4659      	mov	r1, fp
 8002dce:	eb63 0901 	sbc.w	r9, r3, r1
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de6:	4690      	mov	r8, r2
 8002de8:	4699      	mov	r9, r3
 8002dea:	4623      	mov	r3, r4
 8002dec:	eb18 0303 	adds.w	r3, r8, r3
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	462b      	mov	r3, r5
 8002df4:	eb49 0303 	adc.w	r3, r9, r3
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e06:	4629      	mov	r1, r5
 8002e08:	024b      	lsls	r3, r1, #9
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	4604      	mov	r4, r0
 8002e10:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002e14:	4601      	mov	r1, r0
 8002e16:	024a      	lsls	r2, r1, #9
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1e:	2200      	movs	r2, #0
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e28:	f7fd fe96 	bl	8000b58 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	647b      	str	r3, [r7, #68]	; 0x44
 8002e34:	e055      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	2200      	movs	r2, #0
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e3e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e42:	4642      	mov	r2, r8
 8002e44:	464b      	mov	r3, r9
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e54:	0150      	lsls	r0, r2, #5
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	46c4      	mov	ip, r8
 8002e5c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002e60:	4640      	mov	r0, r8
 8002e62:	4649      	mov	r1, r9
 8002e64:	468c      	mov	ip, r1
 8002e66:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e76:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e7a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e7e:	ebb2 040a 	subs.w	r4, r2, sl
 8002e82:	eb63 050b 	sbc.w	r5, r3, fp
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	00eb      	lsls	r3, r5, #3
 8002e90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e94:	00e2      	lsls	r2, r4, #3
 8002e96:	4614      	mov	r4, r2
 8002e98:	461d      	mov	r5, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	18e3      	adds	r3, r4, r3
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	eb45 0303 	adc.w	r3, r5, r3
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	028b      	lsls	r3, r1, #10
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	028a      	lsls	r2, r1, #10
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	61fa      	str	r2, [r7, #28]
 8002ed2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed6:	f7fd fe3f 	bl	8000b58 <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4613      	mov	r3, r2
 8002ee0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002ee6:	e00d      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0b5b      	lsrs	r3, r3, #13
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002f02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3748      	adds	r7, #72	; 0x48
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	007a1200 	.word	0x007a1200
 8002f1c:	08005e40 	.word	0x08005e40

08002f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f38:	f7ff fff2 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08005e5c 	.word	0x08005e5c

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f60:	f7ff ffde 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0adb      	lsrs	r3, r3, #11
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4903      	ldr	r1, [pc, #12]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08005e5c 	.word	0x08005e5c

08002f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f90:	4b29      	ldr	r3, [pc, #164]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d12c      	bne.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e016      	b.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb4:	4b20      	ldr	r3, [pc, #128]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6253      	str	r3, [r2, #36]	; 0x24
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002fd4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	4a17      	ldr	r2, [pc, #92]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002fe8:	d105      	bne.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ff0:	d101      	bne.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003002:	f043 0304 	orr.w	r3, r3, #4
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 0201 	bic.w	r2, r3, #1
 8003010:	490b      	ldr	r1, [pc, #44]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000
 8003040:	40023c00 	.word	0x40023c00

08003044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e042      	b.n	80030dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe f924 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f91d 	bl	80032c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800309c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b20      	cmp	r3, #32
 8003102:	d16d      	bne.n	80031e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Transmit+0x2c>
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e066      	b.n	80031e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2221      	movs	r2, #33	; 0x21
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003122:	f7fe fa69 	bl	80015f8 <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313c:	d108      	bne.n	8003150 <HAL_UART_Transmit+0x6c>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	e003      	b.n	8003158 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003158:	e02a      	b.n	80031b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2200      	movs	r2, #0
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f840 	bl	80031ea <UART_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e036      	b.n	80031e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003188:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3302      	adds	r3, #2
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e007      	b.n	80031a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	3301      	adds	r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1cf      	bne.n	800315a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f810 	bl	80031ea <UART_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e006      	b.n	80031e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b090      	sub	sp, #64	; 0x40
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fa:	e050      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d04c      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0x30>
 800320a:	f7fe f9f5 	bl	80015f8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003216:	429a      	cmp	r2, r3
 8003218:	d241      	bcs.n	800329e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800323a:	637a      	str	r2, [r7, #52]	; 0x34
 800323c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e5      	bne.n	800321a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	613b      	str	r3, [r7, #16]
   return(result);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	63bb      	str	r3, [r7, #56]	; 0x38
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800326e:	623a      	str	r2, [r7, #32]
 8003270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	69f9      	ldr	r1, [r7, #28]
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	61bb      	str	r3, [r7, #24]
   return(result);
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e5      	bne.n	800324e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e00f      	b.n	80032be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4013      	ands	r3, r2
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d09f      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3740      	adds	r7, #64	; 0x40
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003308:	f023 030c 	bic.w	r3, r3, #12
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	430b      	orrs	r3, r1
 8003314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a55      	ldr	r2, [pc, #340]	; (8003488 <UART_SetConfig+0x1c0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d103      	bne.n	800333e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003336:	f7ff fe11 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	e002      	b.n	8003344 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800333e:	f7ff fdf9 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8003342:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334c:	d14c      	bne.n	80033e8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009a      	lsls	r2, r3, #2
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	4a49      	ldr	r2, [pc, #292]	; (800348c <UART_SetConfig+0x1c4>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	0119      	lsls	r1, r3, #4
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009a      	lsls	r2, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fbb2 f2f3 	udiv	r2, r2, r3
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <UART_SetConfig+0x1c4>)
 8003386:	fba3 0302 	umull	r0, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2064      	movs	r0, #100	; 0x64
 800338e:	fb00 f303 	mul.w	r3, r0, r3
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	3332      	adds	r3, #50	; 0x32
 8003398:	4a3c      	ldr	r2, [pc, #240]	; (800348c <UART_SetConfig+0x1c4>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033a6:	4419      	add	r1, r3
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009a      	lsls	r2, r3, #2
 80033b2:	441a      	add	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <UART_SetConfig+0x1c4>)
 80033c0:	fba3 0302 	umull	r0, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	2064      	movs	r0, #100	; 0x64
 80033c8:	fb00 f303 	mul.w	r3, r0, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	3332      	adds	r3, #50	; 0x32
 80033d2:	4a2e      	ldr	r2, [pc, #184]	; (800348c <UART_SetConfig+0x1c4>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	f003 0207 	and.w	r2, r3, #7
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	440a      	add	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033e6:	e04a      	b.n	800347e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	4a23      	ldr	r2, [pc, #140]	; (800348c <UART_SetConfig+0x1c4>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	0119      	lsls	r1, r3, #4
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009a      	lsls	r2, r3, #2
 8003412:	441a      	add	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	fbb2 f2f3 	udiv	r2, r2, r3
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <UART_SetConfig+0x1c4>)
 8003420:	fba3 0302 	umull	r0, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2064      	movs	r0, #100	; 0x64
 8003428:	fb00 f303 	mul.w	r3, r0, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <UART_SetConfig+0x1c4>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343e:	4419      	add	r1, r3
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009a      	lsls	r2, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	fbb2 f2f3 	udiv	r2, r2, r3
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <UART_SetConfig+0x1c4>)
 8003458:	fba3 0302 	umull	r0, r3, r3, r2
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	2064      	movs	r0, #100	; 0x64
 8003460:	fb00 f303 	mul.w	r3, r0, r3
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	3332      	adds	r3, #50	; 0x32
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <UART_SetConfig+0x1c4>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	440a      	add	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40013800 	.word	0x40013800
 800348c:	51eb851f 	.word	0x51eb851f

08003490 <__cvt>:
 8003490:	2b00      	cmp	r3, #0
 8003492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003496:	461f      	mov	r7, r3
 8003498:	bfbb      	ittet	lt
 800349a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800349e:	461f      	movlt	r7, r3
 80034a0:	2300      	movge	r3, #0
 80034a2:	232d      	movlt	r3, #45	; 0x2d
 80034a4:	b088      	sub	sp, #32
 80034a6:	4614      	mov	r4, r2
 80034a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034ac:	7013      	strb	r3, [r2, #0]
 80034ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80034b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80034b4:	f023 0820 	bic.w	r8, r3, #32
 80034b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034bc:	d005      	beq.n	80034ca <__cvt+0x3a>
 80034be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80034c2:	d100      	bne.n	80034c6 <__cvt+0x36>
 80034c4:	3501      	adds	r5, #1
 80034c6:	2302      	movs	r3, #2
 80034c8:	e000      	b.n	80034cc <__cvt+0x3c>
 80034ca:	2303      	movs	r3, #3
 80034cc:	aa07      	add	r2, sp, #28
 80034ce:	9204      	str	r2, [sp, #16]
 80034d0:	aa06      	add	r2, sp, #24
 80034d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80034d6:	e9cd 3500 	strd	r3, r5, [sp]
 80034da:	4622      	mov	r2, r4
 80034dc:	463b      	mov	r3, r7
 80034de:	f000 fe63 	bl	80041a8 <_dtoa_r>
 80034e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034e6:	4606      	mov	r6, r0
 80034e8:	d102      	bne.n	80034f0 <__cvt+0x60>
 80034ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034ec:	07db      	lsls	r3, r3, #31
 80034ee:	d522      	bpl.n	8003536 <__cvt+0xa6>
 80034f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034f4:	eb06 0905 	add.w	r9, r6, r5
 80034f8:	d110      	bne.n	800351c <__cvt+0x8c>
 80034fa:	7833      	ldrb	r3, [r6, #0]
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d10a      	bne.n	8003516 <__cvt+0x86>
 8003500:	2200      	movs	r2, #0
 8003502:	2300      	movs	r3, #0
 8003504:	4620      	mov	r0, r4
 8003506:	4639      	mov	r1, r7
 8003508:	f7fd fa66 	bl	80009d8 <__aeabi_dcmpeq>
 800350c:	b918      	cbnz	r0, 8003516 <__cvt+0x86>
 800350e:	f1c5 0501 	rsb	r5, r5, #1
 8003512:	f8ca 5000 	str.w	r5, [sl]
 8003516:	f8da 3000 	ldr.w	r3, [sl]
 800351a:	4499      	add	r9, r3
 800351c:	2200      	movs	r2, #0
 800351e:	2300      	movs	r3, #0
 8003520:	4620      	mov	r0, r4
 8003522:	4639      	mov	r1, r7
 8003524:	f7fd fa58 	bl	80009d8 <__aeabi_dcmpeq>
 8003528:	b108      	cbz	r0, 800352e <__cvt+0x9e>
 800352a:	f8cd 901c 	str.w	r9, [sp, #28]
 800352e:	2230      	movs	r2, #48	; 0x30
 8003530:	9b07      	ldr	r3, [sp, #28]
 8003532:	454b      	cmp	r3, r9
 8003534:	d307      	bcc.n	8003546 <__cvt+0xb6>
 8003536:	4630      	mov	r0, r6
 8003538:	9b07      	ldr	r3, [sp, #28]
 800353a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800353c:	1b9b      	subs	r3, r3, r6
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	b008      	add	sp, #32
 8003542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003546:	1c59      	adds	r1, r3, #1
 8003548:	9107      	str	r1, [sp, #28]
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e7f0      	b.n	8003530 <__cvt+0xa0>

0800354e <__exponent>:
 800354e:	4603      	mov	r3, r0
 8003550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003552:	2900      	cmp	r1, #0
 8003554:	f803 2b02 	strb.w	r2, [r3], #2
 8003558:	bfb6      	itet	lt
 800355a:	222d      	movlt	r2, #45	; 0x2d
 800355c:	222b      	movge	r2, #43	; 0x2b
 800355e:	4249      	neglt	r1, r1
 8003560:	2909      	cmp	r1, #9
 8003562:	7042      	strb	r2, [r0, #1]
 8003564:	dd2a      	ble.n	80035bc <__exponent+0x6e>
 8003566:	f10d 0207 	add.w	r2, sp, #7
 800356a:	4617      	mov	r7, r2
 800356c:	260a      	movs	r6, #10
 800356e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003572:	4694      	mov	ip, r2
 8003574:	fb06 1415 	mls	r4, r6, r5, r1
 8003578:	3430      	adds	r4, #48	; 0x30
 800357a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800357e:	460c      	mov	r4, r1
 8003580:	2c63      	cmp	r4, #99	; 0x63
 8003582:	4629      	mov	r1, r5
 8003584:	f102 32ff 	add.w	r2, r2, #4294967295
 8003588:	dcf1      	bgt.n	800356e <__exponent+0x20>
 800358a:	3130      	adds	r1, #48	; 0x30
 800358c:	f1ac 0402 	sub.w	r4, ip, #2
 8003590:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003594:	4622      	mov	r2, r4
 8003596:	1c41      	adds	r1, r0, #1
 8003598:	42ba      	cmp	r2, r7
 800359a:	d30a      	bcc.n	80035b2 <__exponent+0x64>
 800359c:	f10d 0209 	add.w	r2, sp, #9
 80035a0:	eba2 020c 	sub.w	r2, r2, ip
 80035a4:	42bc      	cmp	r4, r7
 80035a6:	bf88      	it	hi
 80035a8:	2200      	movhi	r2, #0
 80035aa:	4413      	add	r3, r2
 80035ac:	1a18      	subs	r0, r3, r0
 80035ae:	b003      	add	sp, #12
 80035b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80035b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80035ba:	e7ed      	b.n	8003598 <__exponent+0x4a>
 80035bc:	2330      	movs	r3, #48	; 0x30
 80035be:	3130      	adds	r1, #48	; 0x30
 80035c0:	7083      	strb	r3, [r0, #2]
 80035c2:	70c1      	strb	r1, [r0, #3]
 80035c4:	1d03      	adds	r3, r0, #4
 80035c6:	e7f1      	b.n	80035ac <__exponent+0x5e>

080035c8 <_printf_float>:
 80035c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035cc:	b091      	sub	sp, #68	; 0x44
 80035ce:	460c      	mov	r4, r1
 80035d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80035d4:	4616      	mov	r6, r2
 80035d6:	461f      	mov	r7, r3
 80035d8:	4605      	mov	r5, r0
 80035da:	f000 fcd7 	bl	8003f8c <_localeconv_r>
 80035de:	6803      	ldr	r3, [r0, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	9309      	str	r3, [sp, #36]	; 0x24
 80035e4:	f7fc fdcc 	bl	8000180 <strlen>
 80035e8:	2300      	movs	r3, #0
 80035ea:	930e      	str	r3, [sp, #56]	; 0x38
 80035ec:	f8d8 3000 	ldr.w	r3, [r8]
 80035f0:	900a      	str	r0, [sp, #40]	; 0x28
 80035f2:	3307      	adds	r3, #7
 80035f4:	f023 0307 	bic.w	r3, r3, #7
 80035f8:	f103 0208 	add.w	r2, r3, #8
 80035fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003600:	f8d4 b000 	ldr.w	fp, [r4]
 8003604:	f8c8 2000 	str.w	r2, [r8]
 8003608:	e9d3 a800 	ldrd	sl, r8, [r3]
 800360c:	4652      	mov	r2, sl
 800360e:	4643      	mov	r3, r8
 8003610:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003614:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003618:	930b      	str	r3, [sp, #44]	; 0x2c
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	4650      	mov	r0, sl
 8003620:	4b9c      	ldr	r3, [pc, #624]	; (8003894 <_printf_float+0x2cc>)
 8003622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003624:	f7fd fa0a 	bl	8000a3c <__aeabi_dcmpun>
 8003628:	bb70      	cbnz	r0, 8003688 <_printf_float+0xc0>
 800362a:	f04f 32ff 	mov.w	r2, #4294967295
 800362e:	4650      	mov	r0, sl
 8003630:	4b98      	ldr	r3, [pc, #608]	; (8003894 <_printf_float+0x2cc>)
 8003632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003634:	f7fd f9e4 	bl	8000a00 <__aeabi_dcmple>
 8003638:	bb30      	cbnz	r0, 8003688 <_printf_float+0xc0>
 800363a:	2200      	movs	r2, #0
 800363c:	2300      	movs	r3, #0
 800363e:	4650      	mov	r0, sl
 8003640:	4641      	mov	r1, r8
 8003642:	f7fd f9d3 	bl	80009ec <__aeabi_dcmplt>
 8003646:	b110      	cbz	r0, 800364e <_printf_float+0x86>
 8003648:	232d      	movs	r3, #45	; 0x2d
 800364a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800364e:	4a92      	ldr	r2, [pc, #584]	; (8003898 <_printf_float+0x2d0>)
 8003650:	4b92      	ldr	r3, [pc, #584]	; (800389c <_printf_float+0x2d4>)
 8003652:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003656:	bf94      	ite	ls
 8003658:	4690      	movls	r8, r2
 800365a:	4698      	movhi	r8, r3
 800365c:	2303      	movs	r3, #3
 800365e:	f04f 0a00 	mov.w	sl, #0
 8003662:	6123      	str	r3, [r4, #16]
 8003664:	f02b 0304 	bic.w	r3, fp, #4
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	4633      	mov	r3, r6
 800366c:	4621      	mov	r1, r4
 800366e:	4628      	mov	r0, r5
 8003670:	9700      	str	r7, [sp, #0]
 8003672:	aa0f      	add	r2, sp, #60	; 0x3c
 8003674:	f000 f9d6 	bl	8003a24 <_printf_common>
 8003678:	3001      	adds	r0, #1
 800367a:	f040 8090 	bne.w	800379e <_printf_float+0x1d6>
 800367e:	f04f 30ff 	mov.w	r0, #4294967295
 8003682:	b011      	add	sp, #68	; 0x44
 8003684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003688:	4652      	mov	r2, sl
 800368a:	4643      	mov	r3, r8
 800368c:	4650      	mov	r0, sl
 800368e:	4641      	mov	r1, r8
 8003690:	f7fd f9d4 	bl	8000a3c <__aeabi_dcmpun>
 8003694:	b148      	cbz	r0, 80036aa <_printf_float+0xe2>
 8003696:	f1b8 0f00 	cmp.w	r8, #0
 800369a:	bfb8      	it	lt
 800369c:	232d      	movlt	r3, #45	; 0x2d
 800369e:	4a80      	ldr	r2, [pc, #512]	; (80038a0 <_printf_float+0x2d8>)
 80036a0:	bfb8      	it	lt
 80036a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80036a6:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <_printf_float+0x2dc>)
 80036a8:	e7d3      	b.n	8003652 <_printf_float+0x8a>
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	d142      	bne.n	800373a <_printf_float+0x172>
 80036b4:	2306      	movs	r3, #6
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	9206      	str	r2, [sp, #24]
 80036bc:	aa0e      	add	r2, sp, #56	; 0x38
 80036be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80036c2:	aa0d      	add	r2, sp, #52	; 0x34
 80036c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80036c8:	9203      	str	r2, [sp, #12]
 80036ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80036ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	4652      	mov	r2, sl
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	4628      	mov	r0, r5
 80036dc:	4643      	mov	r3, r8
 80036de:	910b      	str	r1, [sp, #44]	; 0x2c
 80036e0:	f7ff fed6 	bl	8003490 <__cvt>
 80036e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036e6:	4680      	mov	r8, r0
 80036e8:	2947      	cmp	r1, #71	; 0x47
 80036ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036ec:	d108      	bne.n	8003700 <_printf_float+0x138>
 80036ee:	1cc8      	adds	r0, r1, #3
 80036f0:	db02      	blt.n	80036f8 <_printf_float+0x130>
 80036f2:	6863      	ldr	r3, [r4, #4]
 80036f4:	4299      	cmp	r1, r3
 80036f6:	dd40      	ble.n	800377a <_printf_float+0x1b2>
 80036f8:	f1a9 0902 	sub.w	r9, r9, #2
 80036fc:	fa5f f989 	uxtb.w	r9, r9
 8003700:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003704:	d81f      	bhi.n	8003746 <_printf_float+0x17e>
 8003706:	464a      	mov	r2, r9
 8003708:	3901      	subs	r1, #1
 800370a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800370e:	910d      	str	r1, [sp, #52]	; 0x34
 8003710:	f7ff ff1d 	bl	800354e <__exponent>
 8003714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003716:	4682      	mov	sl, r0
 8003718:	1813      	adds	r3, r2, r0
 800371a:	2a01      	cmp	r2, #1
 800371c:	6123      	str	r3, [r4, #16]
 800371e:	dc02      	bgt.n	8003726 <_printf_float+0x15e>
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	07d2      	lsls	r2, r2, #31
 8003724:	d501      	bpl.n	800372a <_printf_float+0x162>
 8003726:	3301      	adds	r3, #1
 8003728:	6123      	str	r3, [r4, #16]
 800372a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800372e:	2b00      	cmp	r3, #0
 8003730:	d09b      	beq.n	800366a <_printf_float+0xa2>
 8003732:	232d      	movs	r3, #45	; 0x2d
 8003734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003738:	e797      	b.n	800366a <_printf_float+0xa2>
 800373a:	2947      	cmp	r1, #71	; 0x47
 800373c:	d1bc      	bne.n	80036b8 <_printf_float+0xf0>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ba      	bne.n	80036b8 <_printf_float+0xf0>
 8003742:	2301      	movs	r3, #1
 8003744:	e7b7      	b.n	80036b6 <_printf_float+0xee>
 8003746:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800374a:	d118      	bne.n	800377e <_printf_float+0x1b6>
 800374c:	2900      	cmp	r1, #0
 800374e:	6863      	ldr	r3, [r4, #4]
 8003750:	dd0b      	ble.n	800376a <_printf_float+0x1a2>
 8003752:	6121      	str	r1, [r4, #16]
 8003754:	b913      	cbnz	r3, 800375c <_printf_float+0x194>
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	07d0      	lsls	r0, r2, #31
 800375a:	d502      	bpl.n	8003762 <_printf_float+0x19a>
 800375c:	3301      	adds	r3, #1
 800375e:	440b      	add	r3, r1
 8003760:	6123      	str	r3, [r4, #16]
 8003762:	f04f 0a00 	mov.w	sl, #0
 8003766:	65a1      	str	r1, [r4, #88]	; 0x58
 8003768:	e7df      	b.n	800372a <_printf_float+0x162>
 800376a:	b913      	cbnz	r3, 8003772 <_printf_float+0x1aa>
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	07d2      	lsls	r2, r2, #31
 8003770:	d501      	bpl.n	8003776 <_printf_float+0x1ae>
 8003772:	3302      	adds	r3, #2
 8003774:	e7f4      	b.n	8003760 <_printf_float+0x198>
 8003776:	2301      	movs	r3, #1
 8003778:	e7f2      	b.n	8003760 <_printf_float+0x198>
 800377a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800377e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003780:	4299      	cmp	r1, r3
 8003782:	db05      	blt.n	8003790 <_printf_float+0x1c8>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	6121      	str	r1, [r4, #16]
 8003788:	07d8      	lsls	r0, r3, #31
 800378a:	d5ea      	bpl.n	8003762 <_printf_float+0x19a>
 800378c:	1c4b      	adds	r3, r1, #1
 800378e:	e7e7      	b.n	8003760 <_printf_float+0x198>
 8003790:	2900      	cmp	r1, #0
 8003792:	bfcc      	ite	gt
 8003794:	2201      	movgt	r2, #1
 8003796:	f1c1 0202 	rsble	r2, r1, #2
 800379a:	4413      	add	r3, r2
 800379c:	e7e0      	b.n	8003760 <_printf_float+0x198>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	055a      	lsls	r2, r3, #21
 80037a2:	d407      	bmi.n	80037b4 <_printf_float+0x1ec>
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	4642      	mov	r2, r8
 80037a8:	4631      	mov	r1, r6
 80037aa:	4628      	mov	r0, r5
 80037ac:	47b8      	blx	r7
 80037ae:	3001      	adds	r0, #1
 80037b0:	d12b      	bne.n	800380a <_printf_float+0x242>
 80037b2:	e764      	b.n	800367e <_printf_float+0xb6>
 80037b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80037b8:	f240 80dd 	bls.w	8003976 <_printf_float+0x3ae>
 80037bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037c0:	2200      	movs	r2, #0
 80037c2:	2300      	movs	r3, #0
 80037c4:	f7fd f908 	bl	80009d8 <__aeabi_dcmpeq>
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d033      	beq.n	8003834 <_printf_float+0x26c>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4631      	mov	r1, r6
 80037d0:	4628      	mov	r0, r5
 80037d2:	4a35      	ldr	r2, [pc, #212]	; (80038a8 <_printf_float+0x2e0>)
 80037d4:	47b8      	blx	r7
 80037d6:	3001      	adds	r0, #1
 80037d8:	f43f af51 	beq.w	800367e <_printf_float+0xb6>
 80037dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037e0:	429a      	cmp	r2, r3
 80037e2:	db02      	blt.n	80037ea <_printf_float+0x222>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	07d8      	lsls	r0, r3, #31
 80037e8:	d50f      	bpl.n	800380a <_printf_float+0x242>
 80037ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037ee:	4631      	mov	r1, r6
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b8      	blx	r7
 80037f4:	3001      	adds	r0, #1
 80037f6:	f43f af42 	beq.w	800367e <_printf_float+0xb6>
 80037fa:	f04f 0800 	mov.w	r8, #0
 80037fe:	f104 091a 	add.w	r9, r4, #26
 8003802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003804:	3b01      	subs	r3, #1
 8003806:	4543      	cmp	r3, r8
 8003808:	dc09      	bgt.n	800381e <_printf_float+0x256>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	079b      	lsls	r3, r3, #30
 800380e:	f100 8104 	bmi.w	8003a1a <_printf_float+0x452>
 8003812:	68e0      	ldr	r0, [r4, #12]
 8003814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003816:	4298      	cmp	r0, r3
 8003818:	bfb8      	it	lt
 800381a:	4618      	movlt	r0, r3
 800381c:	e731      	b.n	8003682 <_printf_float+0xba>
 800381e:	2301      	movs	r3, #1
 8003820:	464a      	mov	r2, r9
 8003822:	4631      	mov	r1, r6
 8003824:	4628      	mov	r0, r5
 8003826:	47b8      	blx	r7
 8003828:	3001      	adds	r0, #1
 800382a:	f43f af28 	beq.w	800367e <_printf_float+0xb6>
 800382e:	f108 0801 	add.w	r8, r8, #1
 8003832:	e7e6      	b.n	8003802 <_printf_float+0x23a>
 8003834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003836:	2b00      	cmp	r3, #0
 8003838:	dc38      	bgt.n	80038ac <_printf_float+0x2e4>
 800383a:	2301      	movs	r3, #1
 800383c:	4631      	mov	r1, r6
 800383e:	4628      	mov	r0, r5
 8003840:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <_printf_float+0x2e0>)
 8003842:	47b8      	blx	r7
 8003844:	3001      	adds	r0, #1
 8003846:	f43f af1a 	beq.w	800367e <_printf_float+0xb6>
 800384a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800384e:	4313      	orrs	r3, r2
 8003850:	d102      	bne.n	8003858 <_printf_float+0x290>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	07d9      	lsls	r1, r3, #31
 8003856:	d5d8      	bpl.n	800380a <_printf_float+0x242>
 8003858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	f43f af0b 	beq.w	800367e <_printf_float+0xb6>
 8003868:	f04f 0900 	mov.w	r9, #0
 800386c:	f104 0a1a 	add.w	sl, r4, #26
 8003870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003872:	425b      	negs	r3, r3
 8003874:	454b      	cmp	r3, r9
 8003876:	dc01      	bgt.n	800387c <_printf_float+0x2b4>
 8003878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800387a:	e794      	b.n	80037a6 <_printf_float+0x1de>
 800387c:	2301      	movs	r3, #1
 800387e:	4652      	mov	r2, sl
 8003880:	4631      	mov	r1, r6
 8003882:	4628      	mov	r0, r5
 8003884:	47b8      	blx	r7
 8003886:	3001      	adds	r0, #1
 8003888:	f43f aef9 	beq.w	800367e <_printf_float+0xb6>
 800388c:	f109 0901 	add.w	r9, r9, #1
 8003890:	e7ee      	b.n	8003870 <_printf_float+0x2a8>
 8003892:	bf00      	nop
 8003894:	7fefffff 	.word	0x7fefffff
 8003898:	08005e64 	.word	0x08005e64
 800389c:	08005e68 	.word	0x08005e68
 80038a0:	08005e6c 	.word	0x08005e6c
 80038a4:	08005e70 	.word	0x08005e70
 80038a8:	08005e74 	.word	0x08005e74
 80038ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038b0:	429a      	cmp	r2, r3
 80038b2:	bfa8      	it	ge
 80038b4:	461a      	movge	r2, r3
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	4691      	mov	r9, r2
 80038ba:	dc37      	bgt.n	800392c <_printf_float+0x364>
 80038bc:	f04f 0b00 	mov.w	fp, #0
 80038c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038c4:	f104 021a 	add.w	r2, r4, #26
 80038c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80038cc:	ebaa 0309 	sub.w	r3, sl, r9
 80038d0:	455b      	cmp	r3, fp
 80038d2:	dc33      	bgt.n	800393c <_printf_float+0x374>
 80038d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038d8:	429a      	cmp	r2, r3
 80038da:	db3b      	blt.n	8003954 <_printf_float+0x38c>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	07da      	lsls	r2, r3, #31
 80038e0:	d438      	bmi.n	8003954 <_printf_float+0x38c>
 80038e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80038e6:	eba2 0903 	sub.w	r9, r2, r3
 80038ea:	eba2 020a 	sub.w	r2, r2, sl
 80038ee:	4591      	cmp	r9, r2
 80038f0:	bfa8      	it	ge
 80038f2:	4691      	movge	r9, r2
 80038f4:	f1b9 0f00 	cmp.w	r9, #0
 80038f8:	dc34      	bgt.n	8003964 <_printf_float+0x39c>
 80038fa:	f04f 0800 	mov.w	r8, #0
 80038fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003902:	f104 0a1a 	add.w	sl, r4, #26
 8003906:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	eba3 0309 	sub.w	r3, r3, r9
 8003910:	4543      	cmp	r3, r8
 8003912:	f77f af7a 	ble.w	800380a <_printf_float+0x242>
 8003916:	2301      	movs	r3, #1
 8003918:	4652      	mov	r2, sl
 800391a:	4631      	mov	r1, r6
 800391c:	4628      	mov	r0, r5
 800391e:	47b8      	blx	r7
 8003920:	3001      	adds	r0, #1
 8003922:	f43f aeac 	beq.w	800367e <_printf_float+0xb6>
 8003926:	f108 0801 	add.w	r8, r8, #1
 800392a:	e7ec      	b.n	8003906 <_printf_float+0x33e>
 800392c:	4613      	mov	r3, r2
 800392e:	4631      	mov	r1, r6
 8003930:	4642      	mov	r2, r8
 8003932:	4628      	mov	r0, r5
 8003934:	47b8      	blx	r7
 8003936:	3001      	adds	r0, #1
 8003938:	d1c0      	bne.n	80038bc <_printf_float+0x2f4>
 800393a:	e6a0      	b.n	800367e <_printf_float+0xb6>
 800393c:	2301      	movs	r3, #1
 800393e:	4631      	mov	r1, r6
 8003940:	4628      	mov	r0, r5
 8003942:	920b      	str	r2, [sp, #44]	; 0x2c
 8003944:	47b8      	blx	r7
 8003946:	3001      	adds	r0, #1
 8003948:	f43f ae99 	beq.w	800367e <_printf_float+0xb6>
 800394c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800394e:	f10b 0b01 	add.w	fp, fp, #1
 8003952:	e7b9      	b.n	80038c8 <_printf_float+0x300>
 8003954:	4631      	mov	r1, r6
 8003956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800395a:	4628      	mov	r0, r5
 800395c:	47b8      	blx	r7
 800395e:	3001      	adds	r0, #1
 8003960:	d1bf      	bne.n	80038e2 <_printf_float+0x31a>
 8003962:	e68c      	b.n	800367e <_printf_float+0xb6>
 8003964:	464b      	mov	r3, r9
 8003966:	4631      	mov	r1, r6
 8003968:	4628      	mov	r0, r5
 800396a:	eb08 020a 	add.w	r2, r8, sl
 800396e:	47b8      	blx	r7
 8003970:	3001      	adds	r0, #1
 8003972:	d1c2      	bne.n	80038fa <_printf_float+0x332>
 8003974:	e683      	b.n	800367e <_printf_float+0xb6>
 8003976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003978:	2a01      	cmp	r2, #1
 800397a:	dc01      	bgt.n	8003980 <_printf_float+0x3b8>
 800397c:	07db      	lsls	r3, r3, #31
 800397e:	d539      	bpl.n	80039f4 <_printf_float+0x42c>
 8003980:	2301      	movs	r3, #1
 8003982:	4642      	mov	r2, r8
 8003984:	4631      	mov	r1, r6
 8003986:	4628      	mov	r0, r5
 8003988:	47b8      	blx	r7
 800398a:	3001      	adds	r0, #1
 800398c:	f43f ae77 	beq.w	800367e <_printf_float+0xb6>
 8003990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003994:	4631      	mov	r1, r6
 8003996:	4628      	mov	r0, r5
 8003998:	47b8      	blx	r7
 800399a:	3001      	adds	r0, #1
 800399c:	f43f ae6f 	beq.w	800367e <_printf_float+0xb6>
 80039a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039a4:	2200      	movs	r2, #0
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80039ac:	f7fd f814 	bl	80009d8 <__aeabi_dcmpeq>
 80039b0:	b9d8      	cbnz	r0, 80039ea <_printf_float+0x422>
 80039b2:	f109 33ff 	add.w	r3, r9, #4294967295
 80039b6:	f108 0201 	add.w	r2, r8, #1
 80039ba:	4631      	mov	r1, r6
 80039bc:	4628      	mov	r0, r5
 80039be:	47b8      	blx	r7
 80039c0:	3001      	adds	r0, #1
 80039c2:	d10e      	bne.n	80039e2 <_printf_float+0x41a>
 80039c4:	e65b      	b.n	800367e <_printf_float+0xb6>
 80039c6:	2301      	movs	r3, #1
 80039c8:	464a      	mov	r2, r9
 80039ca:	4631      	mov	r1, r6
 80039cc:	4628      	mov	r0, r5
 80039ce:	47b8      	blx	r7
 80039d0:	3001      	adds	r0, #1
 80039d2:	f43f ae54 	beq.w	800367e <_printf_float+0xb6>
 80039d6:	f108 0801 	add.w	r8, r8, #1
 80039da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039dc:	3b01      	subs	r3, #1
 80039de:	4543      	cmp	r3, r8
 80039e0:	dcf1      	bgt.n	80039c6 <_printf_float+0x3fe>
 80039e2:	4653      	mov	r3, sl
 80039e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039e8:	e6de      	b.n	80037a8 <_printf_float+0x1e0>
 80039ea:	f04f 0800 	mov.w	r8, #0
 80039ee:	f104 091a 	add.w	r9, r4, #26
 80039f2:	e7f2      	b.n	80039da <_printf_float+0x412>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4642      	mov	r2, r8
 80039f8:	e7df      	b.n	80039ba <_printf_float+0x3f2>
 80039fa:	2301      	movs	r3, #1
 80039fc:	464a      	mov	r2, r9
 80039fe:	4631      	mov	r1, r6
 8003a00:	4628      	mov	r0, r5
 8003a02:	47b8      	blx	r7
 8003a04:	3001      	adds	r0, #1
 8003a06:	f43f ae3a 	beq.w	800367e <_printf_float+0xb6>
 8003a0a:	f108 0801 	add.w	r8, r8, #1
 8003a0e:	68e3      	ldr	r3, [r4, #12]
 8003a10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a12:	1a5b      	subs	r3, r3, r1
 8003a14:	4543      	cmp	r3, r8
 8003a16:	dcf0      	bgt.n	80039fa <_printf_float+0x432>
 8003a18:	e6fb      	b.n	8003812 <_printf_float+0x24a>
 8003a1a:	f04f 0800 	mov.w	r8, #0
 8003a1e:	f104 0919 	add.w	r9, r4, #25
 8003a22:	e7f4      	b.n	8003a0e <_printf_float+0x446>

08003a24 <_printf_common>:
 8003a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	4616      	mov	r6, r2
 8003a2a:	4699      	mov	r9, r3
 8003a2c:	688a      	ldr	r2, [r1, #8]
 8003a2e:	690b      	ldr	r3, [r1, #16]
 8003a30:	4607      	mov	r7, r0
 8003a32:	4293      	cmp	r3, r2
 8003a34:	bfb8      	it	lt
 8003a36:	4613      	movlt	r3, r2
 8003a38:	6033      	str	r3, [r6, #0]
 8003a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a3e:	460c      	mov	r4, r1
 8003a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a44:	b10a      	cbz	r2, 8003a4a <_printf_common+0x26>
 8003a46:	3301      	adds	r3, #1
 8003a48:	6033      	str	r3, [r6, #0]
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	0699      	lsls	r1, r3, #26
 8003a4e:	bf42      	ittt	mi
 8003a50:	6833      	ldrmi	r3, [r6, #0]
 8003a52:	3302      	addmi	r3, #2
 8003a54:	6033      	strmi	r3, [r6, #0]
 8003a56:	6825      	ldr	r5, [r4, #0]
 8003a58:	f015 0506 	ands.w	r5, r5, #6
 8003a5c:	d106      	bne.n	8003a6c <_printf_common+0x48>
 8003a5e:	f104 0a19 	add.w	sl, r4, #25
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	6832      	ldr	r2, [r6, #0]
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	42ab      	cmp	r3, r5
 8003a6a:	dc2b      	bgt.n	8003ac4 <_printf_common+0xa0>
 8003a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a70:	1e13      	subs	r3, r2, #0
 8003a72:	6822      	ldr	r2, [r4, #0]
 8003a74:	bf18      	it	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	0692      	lsls	r2, r2, #26
 8003a7a:	d430      	bmi.n	8003ade <_printf_common+0xba>
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a84:	47c0      	blx	r8
 8003a86:	3001      	adds	r0, #1
 8003a88:	d023      	beq.n	8003ad2 <_printf_common+0xae>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	6922      	ldr	r2, [r4, #16]
 8003a8e:	f003 0306 	and.w	r3, r3, #6
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf14      	ite	ne
 8003a96:	2500      	movne	r5, #0
 8003a98:	6833      	ldreq	r3, [r6, #0]
 8003a9a:	f04f 0600 	mov.w	r6, #0
 8003a9e:	bf08      	it	eq
 8003aa0:	68e5      	ldreq	r5, [r4, #12]
 8003aa2:	f104 041a 	add.w	r4, r4, #26
 8003aa6:	bf08      	it	eq
 8003aa8:	1aed      	subeq	r5, r5, r3
 8003aaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003aae:	bf08      	it	eq
 8003ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	bfc4      	itt	gt
 8003ab8:	1a9b      	subgt	r3, r3, r2
 8003aba:	18ed      	addgt	r5, r5, r3
 8003abc:	42b5      	cmp	r5, r6
 8003abe:	d11a      	bne.n	8003af6 <_printf_common+0xd2>
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	e008      	b.n	8003ad6 <_printf_common+0xb2>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4652      	mov	r2, sl
 8003ac8:	4649      	mov	r1, r9
 8003aca:	4638      	mov	r0, r7
 8003acc:	47c0      	blx	r8
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d103      	bne.n	8003ada <_printf_common+0xb6>
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ada:	3501      	adds	r5, #1
 8003adc:	e7c1      	b.n	8003a62 <_printf_common+0x3e>
 8003ade:	2030      	movs	r0, #48	; 0x30
 8003ae0:	18e1      	adds	r1, r4, r3
 8003ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003aec:	4422      	add	r2, r4
 8003aee:	3302      	adds	r3, #2
 8003af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003af4:	e7c2      	b.n	8003a7c <_printf_common+0x58>
 8003af6:	2301      	movs	r3, #1
 8003af8:	4622      	mov	r2, r4
 8003afa:	4649      	mov	r1, r9
 8003afc:	4638      	mov	r0, r7
 8003afe:	47c0      	blx	r8
 8003b00:	3001      	adds	r0, #1
 8003b02:	d0e6      	beq.n	8003ad2 <_printf_common+0xae>
 8003b04:	3601      	adds	r6, #1
 8003b06:	e7d9      	b.n	8003abc <_printf_common+0x98>

08003b08 <_printf_i>:
 8003b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	7e0f      	ldrb	r7, [r1, #24]
 8003b0e:	4691      	mov	r9, r2
 8003b10:	2f78      	cmp	r7, #120	; 0x78
 8003b12:	4680      	mov	r8, r0
 8003b14:	460c      	mov	r4, r1
 8003b16:	469a      	mov	sl, r3
 8003b18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b1e:	d807      	bhi.n	8003b30 <_printf_i+0x28>
 8003b20:	2f62      	cmp	r7, #98	; 0x62
 8003b22:	d80a      	bhi.n	8003b3a <_printf_i+0x32>
 8003b24:	2f00      	cmp	r7, #0
 8003b26:	f000 80d5 	beq.w	8003cd4 <_printf_i+0x1cc>
 8003b2a:	2f58      	cmp	r7, #88	; 0x58
 8003b2c:	f000 80c1 	beq.w	8003cb2 <_printf_i+0x1aa>
 8003b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b38:	e03a      	b.n	8003bb0 <_printf_i+0xa8>
 8003b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b3e:	2b15      	cmp	r3, #21
 8003b40:	d8f6      	bhi.n	8003b30 <_printf_i+0x28>
 8003b42:	a101      	add	r1, pc, #4	; (adr r1, 8003b48 <_printf_i+0x40>)
 8003b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b48:	08003ba1 	.word	0x08003ba1
 8003b4c:	08003bb5 	.word	0x08003bb5
 8003b50:	08003b31 	.word	0x08003b31
 8003b54:	08003b31 	.word	0x08003b31
 8003b58:	08003b31 	.word	0x08003b31
 8003b5c:	08003b31 	.word	0x08003b31
 8003b60:	08003bb5 	.word	0x08003bb5
 8003b64:	08003b31 	.word	0x08003b31
 8003b68:	08003b31 	.word	0x08003b31
 8003b6c:	08003b31 	.word	0x08003b31
 8003b70:	08003b31 	.word	0x08003b31
 8003b74:	08003cbb 	.word	0x08003cbb
 8003b78:	08003be1 	.word	0x08003be1
 8003b7c:	08003c75 	.word	0x08003c75
 8003b80:	08003b31 	.word	0x08003b31
 8003b84:	08003b31 	.word	0x08003b31
 8003b88:	08003cdd 	.word	0x08003cdd
 8003b8c:	08003b31 	.word	0x08003b31
 8003b90:	08003be1 	.word	0x08003be1
 8003b94:	08003b31 	.word	0x08003b31
 8003b98:	08003b31 	.word	0x08003b31
 8003b9c:	08003c7d 	.word	0x08003c7d
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	602a      	str	r2, [r5, #0]
 8003ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0a0      	b.n	8003cf6 <_printf_i+0x1ee>
 8003bb4:	6820      	ldr	r0, [r4, #0]
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	0607      	lsls	r7, r0, #24
 8003bba:	f103 0104 	add.w	r1, r3, #4
 8003bbe:	6029      	str	r1, [r5, #0]
 8003bc0:	d501      	bpl.n	8003bc6 <_printf_i+0xbe>
 8003bc2:	681e      	ldr	r6, [r3, #0]
 8003bc4:	e003      	b.n	8003bce <_printf_i+0xc6>
 8003bc6:	0646      	lsls	r6, r0, #25
 8003bc8:	d5fb      	bpl.n	8003bc2 <_printf_i+0xba>
 8003bca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003bce:	2e00      	cmp	r6, #0
 8003bd0:	da03      	bge.n	8003bda <_printf_i+0xd2>
 8003bd2:	232d      	movs	r3, #45	; 0x2d
 8003bd4:	4276      	negs	r6, r6
 8003bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bda:	230a      	movs	r3, #10
 8003bdc:	4859      	ldr	r0, [pc, #356]	; (8003d44 <_printf_i+0x23c>)
 8003bde:	e012      	b.n	8003c06 <_printf_i+0xfe>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	1d19      	adds	r1, r3, #4
 8003be6:	6029      	str	r1, [r5, #0]
 8003be8:	0605      	lsls	r5, r0, #24
 8003bea:	d501      	bpl.n	8003bf0 <_printf_i+0xe8>
 8003bec:	681e      	ldr	r6, [r3, #0]
 8003bee:	e002      	b.n	8003bf6 <_printf_i+0xee>
 8003bf0:	0641      	lsls	r1, r0, #25
 8003bf2:	d5fb      	bpl.n	8003bec <_printf_i+0xe4>
 8003bf4:	881e      	ldrh	r6, [r3, #0]
 8003bf6:	2f6f      	cmp	r7, #111	; 0x6f
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2308      	moveq	r3, #8
 8003bfc:	230a      	movne	r3, #10
 8003bfe:	4851      	ldr	r0, [pc, #324]	; (8003d44 <_printf_i+0x23c>)
 8003c00:	2100      	movs	r1, #0
 8003c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c06:	6865      	ldr	r5, [r4, #4]
 8003c08:	2d00      	cmp	r5, #0
 8003c0a:	bfa8      	it	ge
 8003c0c:	6821      	ldrge	r1, [r4, #0]
 8003c0e:	60a5      	str	r5, [r4, #8]
 8003c10:	bfa4      	itt	ge
 8003c12:	f021 0104 	bicge.w	r1, r1, #4
 8003c16:	6021      	strge	r1, [r4, #0]
 8003c18:	b90e      	cbnz	r6, 8003c1e <_printf_i+0x116>
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	d04b      	beq.n	8003cb6 <_printf_i+0x1ae>
 8003c1e:	4615      	mov	r5, r2
 8003c20:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c24:	fb03 6711 	mls	r7, r3, r1, r6
 8003c28:	5dc7      	ldrb	r7, [r0, r7]
 8003c2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c2e:	4637      	mov	r7, r6
 8003c30:	42bb      	cmp	r3, r7
 8003c32:	460e      	mov	r6, r1
 8003c34:	d9f4      	bls.n	8003c20 <_printf_i+0x118>
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d10b      	bne.n	8003c52 <_printf_i+0x14a>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	07de      	lsls	r6, r3, #31
 8003c3e:	d508      	bpl.n	8003c52 <_printf_i+0x14a>
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	6861      	ldr	r1, [r4, #4]
 8003c44:	4299      	cmp	r1, r3
 8003c46:	bfde      	ittt	le
 8003c48:	2330      	movle	r3, #48	; 0x30
 8003c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c52:	1b52      	subs	r2, r2, r5
 8003c54:	6122      	str	r2, [r4, #16]
 8003c56:	464b      	mov	r3, r9
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	f8cd a000 	str.w	sl, [sp]
 8003c60:	aa03      	add	r2, sp, #12
 8003c62:	f7ff fedf 	bl	8003a24 <_printf_common>
 8003c66:	3001      	adds	r0, #1
 8003c68:	d14a      	bne.n	8003d00 <_printf_i+0x1f8>
 8003c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6e:	b004      	add	sp, #16
 8003c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	f043 0320 	orr.w	r3, r3, #32
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	2778      	movs	r7, #120	; 0x78
 8003c7e:	4832      	ldr	r0, [pc, #200]	; (8003d48 <_printf_i+0x240>)
 8003c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	6829      	ldr	r1, [r5, #0]
 8003c88:	061f      	lsls	r7, r3, #24
 8003c8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c8e:	d402      	bmi.n	8003c96 <_printf_i+0x18e>
 8003c90:	065f      	lsls	r7, r3, #25
 8003c92:	bf48      	it	mi
 8003c94:	b2b6      	uxthmi	r6, r6
 8003c96:	07df      	lsls	r7, r3, #31
 8003c98:	bf48      	it	mi
 8003c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003c9e:	6029      	str	r1, [r5, #0]
 8003ca0:	bf48      	it	mi
 8003ca2:	6023      	strmi	r3, [r4, #0]
 8003ca4:	b91e      	cbnz	r6, 8003cae <_printf_i+0x1a6>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	f023 0320 	bic.w	r3, r3, #32
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	2310      	movs	r3, #16
 8003cb0:	e7a6      	b.n	8003c00 <_printf_i+0xf8>
 8003cb2:	4824      	ldr	r0, [pc, #144]	; (8003d44 <_printf_i+0x23c>)
 8003cb4:	e7e4      	b.n	8003c80 <_printf_i+0x178>
 8003cb6:	4615      	mov	r5, r2
 8003cb8:	e7bd      	b.n	8003c36 <_printf_i+0x12e>
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	6826      	ldr	r6, [r4, #0]
 8003cbe:	1d18      	adds	r0, r3, #4
 8003cc0:	6961      	ldr	r1, [r4, #20]
 8003cc2:	6028      	str	r0, [r5, #0]
 8003cc4:	0635      	lsls	r5, r6, #24
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	d501      	bpl.n	8003cce <_printf_i+0x1c6>
 8003cca:	6019      	str	r1, [r3, #0]
 8003ccc:	e002      	b.n	8003cd4 <_printf_i+0x1cc>
 8003cce:	0670      	lsls	r0, r6, #25
 8003cd0:	d5fb      	bpl.n	8003cca <_printf_i+0x1c2>
 8003cd2:	8019      	strh	r1, [r3, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4615      	mov	r5, r2
 8003cd8:	6123      	str	r3, [r4, #16]
 8003cda:	e7bc      	b.n	8003c56 <_printf_i+0x14e>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	1d1a      	adds	r2, r3, #4
 8003ce2:	602a      	str	r2, [r5, #0]
 8003ce4:	681d      	ldr	r5, [r3, #0]
 8003ce6:	6862      	ldr	r2, [r4, #4]
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f000 f9c6 	bl	800407a <memchr>
 8003cee:	b108      	cbz	r0, 8003cf4 <_printf_i+0x1ec>
 8003cf0:	1b40      	subs	r0, r0, r5
 8003cf2:	6060      	str	r0, [r4, #4]
 8003cf4:	6863      	ldr	r3, [r4, #4]
 8003cf6:	6123      	str	r3, [r4, #16]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cfe:	e7aa      	b.n	8003c56 <_printf_i+0x14e>
 8003d00:	462a      	mov	r2, r5
 8003d02:	4649      	mov	r1, r9
 8003d04:	4640      	mov	r0, r8
 8003d06:	6923      	ldr	r3, [r4, #16]
 8003d08:	47d0      	blx	sl
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d0ad      	beq.n	8003c6a <_printf_i+0x162>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	079b      	lsls	r3, r3, #30
 8003d12:	d413      	bmi.n	8003d3c <_printf_i+0x234>
 8003d14:	68e0      	ldr	r0, [r4, #12]
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	4298      	cmp	r0, r3
 8003d1a:	bfb8      	it	lt
 8003d1c:	4618      	movlt	r0, r3
 8003d1e:	e7a6      	b.n	8003c6e <_printf_i+0x166>
 8003d20:	2301      	movs	r3, #1
 8003d22:	4632      	mov	r2, r6
 8003d24:	4649      	mov	r1, r9
 8003d26:	4640      	mov	r0, r8
 8003d28:	47d0      	blx	sl
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d09d      	beq.n	8003c6a <_printf_i+0x162>
 8003d2e:	3501      	adds	r5, #1
 8003d30:	68e3      	ldr	r3, [r4, #12]
 8003d32:	9903      	ldr	r1, [sp, #12]
 8003d34:	1a5b      	subs	r3, r3, r1
 8003d36:	42ab      	cmp	r3, r5
 8003d38:	dcf2      	bgt.n	8003d20 <_printf_i+0x218>
 8003d3a:	e7eb      	b.n	8003d14 <_printf_i+0x20c>
 8003d3c:	2500      	movs	r5, #0
 8003d3e:	f104 0619 	add.w	r6, r4, #25
 8003d42:	e7f5      	b.n	8003d30 <_printf_i+0x228>
 8003d44:	08005e76 	.word	0x08005e76
 8003d48:	08005e87 	.word	0x08005e87

08003d4c <std>:
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	b510      	push	{r4, lr}
 8003d50:	4604      	mov	r4, r0
 8003d52:	e9c0 3300 	strd	r3, r3, [r0]
 8003d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d5a:	6083      	str	r3, [r0, #8]
 8003d5c:	8181      	strh	r1, [r0, #12]
 8003d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d60:	81c2      	strh	r2, [r0, #14]
 8003d62:	6183      	str	r3, [r0, #24]
 8003d64:	4619      	mov	r1, r3
 8003d66:	2208      	movs	r2, #8
 8003d68:	305c      	adds	r0, #92	; 0x5c
 8003d6a:	f000 f906 	bl	8003f7a <memset>
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <std+0x58>)
 8003d70:	6224      	str	r4, [r4, #32]
 8003d72:	6263      	str	r3, [r4, #36]	; 0x24
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <std+0x5c>)
 8003d76:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <std+0x60>)
 8003d7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <std+0x64>)
 8003d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <std+0x68>)
 8003d82:	429c      	cmp	r4, r3
 8003d84:	d006      	beq.n	8003d94 <std+0x48>
 8003d86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003d8a:	4294      	cmp	r4, r2
 8003d8c:	d002      	beq.n	8003d94 <std+0x48>
 8003d8e:	33d0      	adds	r3, #208	; 0xd0
 8003d90:	429c      	cmp	r4, r3
 8003d92:	d105      	bne.n	8003da0 <std+0x54>
 8003d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d9c:	f000 b96a 	b.w	8004074 <__retarget_lock_init_recursive>
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	bf00      	nop
 8003da4:	08003ef5 	.word	0x08003ef5
 8003da8:	08003f17 	.word	0x08003f17
 8003dac:	08003f4f 	.word	0x08003f4f
 8003db0:	08003f73 	.word	0x08003f73
 8003db4:	20000294 	.word	0x20000294

08003db8 <stdio_exit_handler>:
 8003db8:	4a02      	ldr	r2, [pc, #8]	; (8003dc4 <stdio_exit_handler+0xc>)
 8003dba:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <stdio_exit_handler+0x10>)
 8003dbc:	4803      	ldr	r0, [pc, #12]	; (8003dcc <stdio_exit_handler+0x14>)
 8003dbe:	f000 b869 	b.w	8003e94 <_fwalk_sglue>
 8003dc2:	bf00      	nop
 8003dc4:	2000000c 	.word	0x2000000c
 8003dc8:	080059e1 	.word	0x080059e1
 8003dcc:	20000018 	.word	0x20000018

08003dd0 <cleanup_stdio>:
 8003dd0:	6841      	ldr	r1, [r0, #4]
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <cleanup_stdio+0x34>)
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	4299      	cmp	r1, r3
 8003dd8:	4604      	mov	r4, r0
 8003dda:	d001      	beq.n	8003de0 <cleanup_stdio+0x10>
 8003ddc:	f001 fe00 	bl	80059e0 <_fflush_r>
 8003de0:	68a1      	ldr	r1, [r4, #8]
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <cleanup_stdio+0x38>)
 8003de4:	4299      	cmp	r1, r3
 8003de6:	d002      	beq.n	8003dee <cleanup_stdio+0x1e>
 8003de8:	4620      	mov	r0, r4
 8003dea:	f001 fdf9 	bl	80059e0 <_fflush_r>
 8003dee:	68e1      	ldr	r1, [r4, #12]
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <cleanup_stdio+0x3c>)
 8003df2:	4299      	cmp	r1, r3
 8003df4:	d004      	beq.n	8003e00 <cleanup_stdio+0x30>
 8003df6:	4620      	mov	r0, r4
 8003df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfc:	f001 bdf0 	b.w	80059e0 <_fflush_r>
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	bf00      	nop
 8003e04:	20000294 	.word	0x20000294
 8003e08:	200002fc 	.word	0x200002fc
 8003e0c:	20000364 	.word	0x20000364

08003e10 <global_stdio_init.part.0>:
 8003e10:	b510      	push	{r4, lr}
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <global_stdio_init.part.0+0x30>)
 8003e14:	4c0b      	ldr	r4, [pc, #44]	; (8003e44 <global_stdio_init.part.0+0x34>)
 8003e16:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <global_stdio_init.part.0+0x38>)
 8003e18:	4620      	mov	r0, r4
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	2104      	movs	r1, #4
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f7ff ff94 	bl	8003d4c <std>
 8003e24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2109      	movs	r1, #9
 8003e2c:	f7ff ff8e 	bl	8003d4c <std>
 8003e30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e34:	2202      	movs	r2, #2
 8003e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e3a:	2112      	movs	r1, #18
 8003e3c:	f7ff bf86 	b.w	8003d4c <std>
 8003e40:	200003cc 	.word	0x200003cc
 8003e44:	20000294 	.word	0x20000294
 8003e48:	08003db9 	.word	0x08003db9

08003e4c <__sfp_lock_acquire>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	; (8003e54 <__sfp_lock_acquire+0x8>)
 8003e4e:	f000 b912 	b.w	8004076 <__retarget_lock_acquire_recursive>
 8003e52:	bf00      	nop
 8003e54:	200003d5 	.word	0x200003d5

08003e58 <__sfp_lock_release>:
 8003e58:	4801      	ldr	r0, [pc, #4]	; (8003e60 <__sfp_lock_release+0x8>)
 8003e5a:	f000 b90d 	b.w	8004078 <__retarget_lock_release_recursive>
 8003e5e:	bf00      	nop
 8003e60:	200003d5 	.word	0x200003d5

08003e64 <__sinit>:
 8003e64:	b510      	push	{r4, lr}
 8003e66:	4604      	mov	r4, r0
 8003e68:	f7ff fff0 	bl	8003e4c <__sfp_lock_acquire>
 8003e6c:	6a23      	ldr	r3, [r4, #32]
 8003e6e:	b11b      	cbz	r3, 8003e78 <__sinit+0x14>
 8003e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e74:	f7ff bff0 	b.w	8003e58 <__sfp_lock_release>
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <__sinit+0x28>)
 8003e7a:	6223      	str	r3, [r4, #32]
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <__sinit+0x2c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f5      	bne.n	8003e70 <__sinit+0xc>
 8003e84:	f7ff ffc4 	bl	8003e10 <global_stdio_init.part.0>
 8003e88:	e7f2      	b.n	8003e70 <__sinit+0xc>
 8003e8a:	bf00      	nop
 8003e8c:	08003dd1 	.word	0x08003dd1
 8003e90:	200003cc 	.word	0x200003cc

08003e94 <_fwalk_sglue>:
 8003e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e98:	4607      	mov	r7, r0
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	4614      	mov	r4, r2
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ea8:	d505      	bpl.n	8003eb6 <_fwalk_sglue+0x22>
 8003eaa:	6824      	ldr	r4, [r4, #0]
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	d1f7      	bne.n	8003ea0 <_fwalk_sglue+0xc>
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eb6:	89ab      	ldrh	r3, [r5, #12]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d907      	bls.n	8003ecc <_fwalk_sglue+0x38>
 8003ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	d003      	beq.n	8003ecc <_fwalk_sglue+0x38>
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	47c0      	blx	r8
 8003eca:	4306      	orrs	r6, r0
 8003ecc:	3568      	adds	r5, #104	; 0x68
 8003ece:	e7e9      	b.n	8003ea4 <_fwalk_sglue+0x10>

08003ed0 <iprintf>:
 8003ed0:	b40f      	push	{r0, r1, r2, r3}
 8003ed2:	b507      	push	{r0, r1, r2, lr}
 8003ed4:	4906      	ldr	r1, [pc, #24]	; (8003ef0 <iprintf+0x20>)
 8003ed6:	ab04      	add	r3, sp, #16
 8003ed8:	6808      	ldr	r0, [r1, #0]
 8003eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ede:	6881      	ldr	r1, [r0, #8]
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	f001 fbe1 	bl	80056a8 <_vfiprintf_r>
 8003ee6:	b003      	add	sp, #12
 8003ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eec:	b004      	add	sp, #16
 8003eee:	4770      	bx	lr
 8003ef0:	20000064 	.word	0x20000064

08003ef4 <__sread>:
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003efc:	f000 f86c 	bl	8003fd8 <_read_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	bfab      	itete	ge
 8003f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f06:	89a3      	ldrhlt	r3, [r4, #12]
 8003f08:	181b      	addge	r3, r3, r0
 8003f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f0e:	bfac      	ite	ge
 8003f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f12:	81a3      	strhlt	r3, [r4, #12]
 8003f14:	bd10      	pop	{r4, pc}

08003f16 <__swrite>:
 8003f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1a:	461f      	mov	r7, r3
 8003f1c:	898b      	ldrh	r3, [r1, #12]
 8003f1e:	4605      	mov	r5, r0
 8003f20:	05db      	lsls	r3, r3, #23
 8003f22:	460c      	mov	r4, r1
 8003f24:	4616      	mov	r6, r2
 8003f26:	d505      	bpl.n	8003f34 <__swrite+0x1e>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f30:	f000 f840 	bl	8003fb4 <_lseek_r>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	4632      	mov	r2, r6
 8003f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f3c:	81a3      	strh	r3, [r4, #12]
 8003f3e:	4628      	mov	r0, r5
 8003f40:	463b      	mov	r3, r7
 8003f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4a:	f000 b857 	b.w	8003ffc <_write_r>

08003f4e <__sseek>:
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	460c      	mov	r4, r1
 8003f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f56:	f000 f82d 	bl	8003fb4 <_lseek_r>
 8003f5a:	1c43      	adds	r3, r0, #1
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	bf15      	itete	ne
 8003f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f6a:	81a3      	strheq	r3, [r4, #12]
 8003f6c:	bf18      	it	ne
 8003f6e:	81a3      	strhne	r3, [r4, #12]
 8003f70:	bd10      	pop	{r4, pc}

08003f72 <__sclose>:
 8003f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f76:	f000 b80d 	b.w	8003f94 <_close_r>

08003f7a <memset>:
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4402      	add	r2, r0
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d100      	bne.n	8003f84 <memset+0xa>
 8003f82:	4770      	bx	lr
 8003f84:	f803 1b01 	strb.w	r1, [r3], #1
 8003f88:	e7f9      	b.n	8003f7e <memset+0x4>
	...

08003f8c <_localeconv_r>:
 8003f8c:	4800      	ldr	r0, [pc, #0]	; (8003f90 <_localeconv_r+0x4>)
 8003f8e:	4770      	bx	lr
 8003f90:	20000158 	.word	0x20000158

08003f94 <_close_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	2300      	movs	r3, #0
 8003f98:	4d05      	ldr	r5, [pc, #20]	; (8003fb0 <_close_r+0x1c>)
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	602b      	str	r3, [r5, #0]
 8003fa0:	f7fd fa33 	bl	800140a <_close>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d102      	bne.n	8003fae <_close_r+0x1a>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	b103      	cbz	r3, 8003fae <_close_r+0x1a>
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	200003d0 	.word	0x200003d0

08003fb4 <_lseek_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4d05      	ldr	r5, [pc, #20]	; (8003fd4 <_lseek_r+0x20>)
 8003fc0:	602a      	str	r2, [r5, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f7fd fa45 	bl	8001452 <_lseek>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_lseek_r+0x1e>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_lseek_r+0x1e>
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	200003d0 	.word	0x200003d0

08003fd8 <_read_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	4611      	mov	r1, r2
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4d05      	ldr	r5, [pc, #20]	; (8003ff8 <_read_r+0x20>)
 8003fe4:	602a      	str	r2, [r5, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f7fd f9f2 	bl	80013d0 <_read>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_read_r+0x1e>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_read_r+0x1e>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	200003d0 	.word	0x200003d0

08003ffc <_write_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	2200      	movs	r2, #0
 8004006:	4d05      	ldr	r5, [pc, #20]	; (800401c <_write_r+0x20>)
 8004008:	602a      	str	r2, [r5, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f7fc ff24 	bl	8000e58 <_write>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_write_r+0x1e>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_write_r+0x1e>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	200003d0 	.word	0x200003d0

08004020 <__errno>:
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <__errno+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000064 	.word	0x20000064

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	2600      	movs	r6, #0
 8004030:	4d0c      	ldr	r5, [pc, #48]	; (8004064 <__libc_init_array+0x38>)
 8004032:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004034:	1b64      	subs	r4, r4, r5
 8004036:	10a4      	asrs	r4, r4, #2
 8004038:	42a6      	cmp	r6, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	f001 fee0 	bl	8005e00 <_init>
 8004040:	2600      	movs	r6, #0
 8004042:	4d0a      	ldr	r5, [pc, #40]	; (800406c <__libc_init_array+0x40>)
 8004044:	4c0a      	ldr	r4, [pc, #40]	; (8004070 <__libc_init_array+0x44>)
 8004046:	1b64      	subs	r4, r4, r5
 8004048:	10a4      	asrs	r4, r4, #2
 800404a:	42a6      	cmp	r6, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f855 3b04 	ldr.w	r3, [r5], #4
 8004054:	4798      	blx	r3
 8004056:	3601      	adds	r6, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f855 3b04 	ldr.w	r3, [r5], #4
 800405e:	4798      	blx	r3
 8004060:	3601      	adds	r6, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	080061dc 	.word	0x080061dc
 8004068:	080061dc 	.word	0x080061dc
 800406c:	080061dc 	.word	0x080061dc
 8004070:	080061e0 	.word	0x080061e0

08004074 <__retarget_lock_init_recursive>:
 8004074:	4770      	bx	lr

08004076 <__retarget_lock_acquire_recursive>:
 8004076:	4770      	bx	lr

08004078 <__retarget_lock_release_recursive>:
 8004078:	4770      	bx	lr

0800407a <memchr>:
 800407a:	4603      	mov	r3, r0
 800407c:	b510      	push	{r4, lr}
 800407e:	b2c9      	uxtb	r1, r1
 8004080:	4402      	add	r2, r0
 8004082:	4293      	cmp	r3, r2
 8004084:	4618      	mov	r0, r3
 8004086:	d101      	bne.n	800408c <memchr+0x12>
 8004088:	2000      	movs	r0, #0
 800408a:	e003      	b.n	8004094 <memchr+0x1a>
 800408c:	7804      	ldrb	r4, [r0, #0]
 800408e:	3301      	adds	r3, #1
 8004090:	428c      	cmp	r4, r1
 8004092:	d1f6      	bne.n	8004082 <memchr+0x8>
 8004094:	bd10      	pop	{r4, pc}

08004096 <quorem>:
 8004096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	6903      	ldr	r3, [r0, #16]
 800409c:	690c      	ldr	r4, [r1, #16]
 800409e:	4607      	mov	r7, r0
 80040a0:	42a3      	cmp	r3, r4
 80040a2:	db7f      	blt.n	80041a4 <quorem+0x10e>
 80040a4:	3c01      	subs	r4, #1
 80040a6:	f100 0514 	add.w	r5, r0, #20
 80040aa:	f101 0814 	add.w	r8, r1, #20
 80040ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040bc:	3301      	adds	r3, #1
 80040be:	429a      	cmp	r2, r3
 80040c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80040c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80040c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040cc:	d331      	bcc.n	8004132 <quorem+0x9c>
 80040ce:	f04f 0e00 	mov.w	lr, #0
 80040d2:	4640      	mov	r0, r8
 80040d4:	46ac      	mov	ip, r5
 80040d6:	46f2      	mov	sl, lr
 80040d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80040dc:	b293      	uxth	r3, r2
 80040de:	fb06 e303 	mla	r3, r6, r3, lr
 80040e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80040e6:	0c1a      	lsrs	r2, r3, #16
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	fb06 220e 	mla	r2, r6, lr, r2
 80040ee:	ebaa 0303 	sub.w	r3, sl, r3
 80040f2:	f8dc a000 	ldr.w	sl, [ip]
 80040f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80040fa:	fa1f fa8a 	uxth.w	sl, sl
 80040fe:	4453      	add	r3, sl
 8004100:	f8dc a000 	ldr.w	sl, [ip]
 8004104:	b292      	uxth	r2, r2
 8004106:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800410a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800410e:	b29b      	uxth	r3, r3
 8004110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004114:	4581      	cmp	r9, r0
 8004116:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800411a:	f84c 3b04 	str.w	r3, [ip], #4
 800411e:	d2db      	bcs.n	80040d8 <quorem+0x42>
 8004120:	f855 300b 	ldr.w	r3, [r5, fp]
 8004124:	b92b      	cbnz	r3, 8004132 <quorem+0x9c>
 8004126:	9b01      	ldr	r3, [sp, #4]
 8004128:	3b04      	subs	r3, #4
 800412a:	429d      	cmp	r5, r3
 800412c:	461a      	mov	r2, r3
 800412e:	d32d      	bcc.n	800418c <quorem+0xf6>
 8004130:	613c      	str	r4, [r7, #16]
 8004132:	4638      	mov	r0, r7
 8004134:	f001 f992 	bl	800545c <__mcmp>
 8004138:	2800      	cmp	r0, #0
 800413a:	db23      	blt.n	8004184 <quorem+0xee>
 800413c:	4629      	mov	r1, r5
 800413e:	2000      	movs	r0, #0
 8004140:	3601      	adds	r6, #1
 8004142:	f858 2b04 	ldr.w	r2, [r8], #4
 8004146:	f8d1 c000 	ldr.w	ip, [r1]
 800414a:	b293      	uxth	r3, r2
 800414c:	1ac3      	subs	r3, r0, r3
 800414e:	0c12      	lsrs	r2, r2, #16
 8004150:	fa1f f08c 	uxth.w	r0, ip
 8004154:	4403      	add	r3, r0
 8004156:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800415a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800415e:	b29b      	uxth	r3, r3
 8004160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004164:	45c1      	cmp	r9, r8
 8004166:	ea4f 4022 	mov.w	r0, r2, asr #16
 800416a:	f841 3b04 	str.w	r3, [r1], #4
 800416e:	d2e8      	bcs.n	8004142 <quorem+0xac>
 8004170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004178:	b922      	cbnz	r2, 8004184 <quorem+0xee>
 800417a:	3b04      	subs	r3, #4
 800417c:	429d      	cmp	r5, r3
 800417e:	461a      	mov	r2, r3
 8004180:	d30a      	bcc.n	8004198 <quorem+0x102>
 8004182:	613c      	str	r4, [r7, #16]
 8004184:	4630      	mov	r0, r6
 8004186:	b003      	add	sp, #12
 8004188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	3b04      	subs	r3, #4
 8004190:	2a00      	cmp	r2, #0
 8004192:	d1cd      	bne.n	8004130 <quorem+0x9a>
 8004194:	3c01      	subs	r4, #1
 8004196:	e7c8      	b.n	800412a <quorem+0x94>
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	3b04      	subs	r3, #4
 800419c:	2a00      	cmp	r2, #0
 800419e:	d1f0      	bne.n	8004182 <quorem+0xec>
 80041a0:	3c01      	subs	r4, #1
 80041a2:	e7eb      	b.n	800417c <quorem+0xe6>
 80041a4:	2000      	movs	r0, #0
 80041a6:	e7ee      	b.n	8004186 <quorem+0xf0>

080041a8 <_dtoa_r>:
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	4616      	mov	r6, r2
 80041ae:	461f      	mov	r7, r3
 80041b0:	69c4      	ldr	r4, [r0, #28]
 80041b2:	b099      	sub	sp, #100	; 0x64
 80041b4:	4605      	mov	r5, r0
 80041b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80041ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80041be:	b974      	cbnz	r4, 80041de <_dtoa_r+0x36>
 80041c0:	2010      	movs	r0, #16
 80041c2:	f000 fe1d 	bl	8004e00 <malloc>
 80041c6:	4602      	mov	r2, r0
 80041c8:	61e8      	str	r0, [r5, #28]
 80041ca:	b920      	cbnz	r0, 80041d6 <_dtoa_r+0x2e>
 80041cc:	21ef      	movs	r1, #239	; 0xef
 80041ce:	4bac      	ldr	r3, [pc, #688]	; (8004480 <_dtoa_r+0x2d8>)
 80041d0:	48ac      	ldr	r0, [pc, #688]	; (8004484 <_dtoa_r+0x2dc>)
 80041d2:	f001 fce1 	bl	8005b98 <__assert_func>
 80041d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80041da:	6004      	str	r4, [r0, #0]
 80041dc:	60c4      	str	r4, [r0, #12]
 80041de:	69eb      	ldr	r3, [r5, #28]
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	b151      	cbz	r1, 80041fa <_dtoa_r+0x52>
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	2301      	movs	r3, #1
 80041e8:	4093      	lsls	r3, r2
 80041ea:	604a      	str	r2, [r1, #4]
 80041ec:	608b      	str	r3, [r1, #8]
 80041ee:	4628      	mov	r0, r5
 80041f0:	f000 fefa 	bl	8004fe8 <_Bfree>
 80041f4:	2200      	movs	r2, #0
 80041f6:	69eb      	ldr	r3, [r5, #28]
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	1e3b      	subs	r3, r7, #0
 80041fc:	bfaf      	iteee	ge
 80041fe:	2300      	movge	r3, #0
 8004200:	2201      	movlt	r2, #1
 8004202:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004206:	9305      	strlt	r3, [sp, #20]
 8004208:	bfa8      	it	ge
 800420a:	f8c8 3000 	strge.w	r3, [r8]
 800420e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004212:	4b9d      	ldr	r3, [pc, #628]	; (8004488 <_dtoa_r+0x2e0>)
 8004214:	bfb8      	it	lt
 8004216:	f8c8 2000 	strlt.w	r2, [r8]
 800421a:	ea33 0309 	bics.w	r3, r3, r9
 800421e:	d119      	bne.n	8004254 <_dtoa_r+0xac>
 8004220:	f242 730f 	movw	r3, #9999	; 0x270f
 8004224:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800422c:	4333      	orrs	r3, r6
 800422e:	f000 8589 	beq.w	8004d44 <_dtoa_r+0xb9c>
 8004232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004234:	b953      	cbnz	r3, 800424c <_dtoa_r+0xa4>
 8004236:	4b95      	ldr	r3, [pc, #596]	; (800448c <_dtoa_r+0x2e4>)
 8004238:	e023      	b.n	8004282 <_dtoa_r+0xda>
 800423a:	4b95      	ldr	r3, [pc, #596]	; (8004490 <_dtoa_r+0x2e8>)
 800423c:	9303      	str	r3, [sp, #12]
 800423e:	3308      	adds	r3, #8
 8004240:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	9803      	ldr	r0, [sp, #12]
 8004246:	b019      	add	sp, #100	; 0x64
 8004248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424c:	4b8f      	ldr	r3, [pc, #572]	; (800448c <_dtoa_r+0x2e4>)
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	3303      	adds	r3, #3
 8004252:	e7f5      	b.n	8004240 <_dtoa_r+0x98>
 8004254:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004258:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800425c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004260:	2200      	movs	r2, #0
 8004262:	2300      	movs	r3, #0
 8004264:	f7fc fbb8 	bl	80009d8 <__aeabi_dcmpeq>
 8004268:	4680      	mov	r8, r0
 800426a:	b160      	cbz	r0, 8004286 <_dtoa_r+0xde>
 800426c:	2301      	movs	r3, #1
 800426e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8562 	beq.w	8004d3e <_dtoa_r+0xb96>
 800427a:	4b86      	ldr	r3, [pc, #536]	; (8004494 <_dtoa_r+0x2ec>)
 800427c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	3b01      	subs	r3, #1
 8004282:	9303      	str	r3, [sp, #12]
 8004284:	e7de      	b.n	8004244 <_dtoa_r+0x9c>
 8004286:	ab16      	add	r3, sp, #88	; 0x58
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	ab17      	add	r3, sp, #92	; 0x5c
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4628      	mov	r0, r5
 8004290:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004294:	f001 f98a 	bl	80055ac <__d2b>
 8004298:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800429c:	4682      	mov	sl, r0
 800429e:	2c00      	cmp	r4, #0
 80042a0:	d07e      	beq.n	80043a0 <_dtoa_r+0x1f8>
 80042a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80042ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80042b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80042b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80042bc:	4619      	mov	r1, r3
 80042be:	2200      	movs	r2, #0
 80042c0:	4b75      	ldr	r3, [pc, #468]	; (8004498 <_dtoa_r+0x2f0>)
 80042c2:	f7fb ff69 	bl	8000198 <__aeabi_dsub>
 80042c6:	a368      	add	r3, pc, #416	; (adr r3, 8004468 <_dtoa_r+0x2c0>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fc f91c 	bl	8000508 <__aeabi_dmul>
 80042d0:	a367      	add	r3, pc, #412	; (adr r3, 8004470 <_dtoa_r+0x2c8>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fb ff61 	bl	800019c <__adddf3>
 80042da:	4606      	mov	r6, r0
 80042dc:	4620      	mov	r0, r4
 80042de:	460f      	mov	r7, r1
 80042e0:	f7fc f8a8 	bl	8000434 <__aeabi_i2d>
 80042e4:	a364      	add	r3, pc, #400	; (adr r3, 8004478 <_dtoa_r+0x2d0>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f7fc f90d 	bl	8000508 <__aeabi_dmul>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4630      	mov	r0, r6
 80042f4:	4639      	mov	r1, r7
 80042f6:	f7fb ff51 	bl	800019c <__adddf3>
 80042fa:	4606      	mov	r6, r0
 80042fc:	460f      	mov	r7, r1
 80042fe:	f7fc fbb3 	bl	8000a68 <__aeabi_d2iz>
 8004302:	2200      	movs	r2, #0
 8004304:	4683      	mov	fp, r0
 8004306:	2300      	movs	r3, #0
 8004308:	4630      	mov	r0, r6
 800430a:	4639      	mov	r1, r7
 800430c:	f7fc fb6e 	bl	80009ec <__aeabi_dcmplt>
 8004310:	b148      	cbz	r0, 8004326 <_dtoa_r+0x17e>
 8004312:	4658      	mov	r0, fp
 8004314:	f7fc f88e 	bl	8000434 <__aeabi_i2d>
 8004318:	4632      	mov	r2, r6
 800431a:	463b      	mov	r3, r7
 800431c:	f7fc fb5c 	bl	80009d8 <__aeabi_dcmpeq>
 8004320:	b908      	cbnz	r0, 8004326 <_dtoa_r+0x17e>
 8004322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004326:	f1bb 0f16 	cmp.w	fp, #22
 800432a:	d857      	bhi.n	80043dc <_dtoa_r+0x234>
 800432c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004330:	4b5a      	ldr	r3, [pc, #360]	; (800449c <_dtoa_r+0x2f4>)
 8004332:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fc fb57 	bl	80009ec <__aeabi_dcmplt>
 800433e:	2800      	cmp	r0, #0
 8004340:	d04e      	beq.n	80043e0 <_dtoa_r+0x238>
 8004342:	2300      	movs	r3, #0
 8004344:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004348:	930f      	str	r3, [sp, #60]	; 0x3c
 800434a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800434c:	1b1b      	subs	r3, r3, r4
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	bf46      	itte	mi
 8004352:	f1c3 0901 	rsbmi	r9, r3, #1
 8004356:	2300      	movmi	r3, #0
 8004358:	f04f 0900 	movpl.w	r9, #0
 800435c:	9209      	str	r2, [sp, #36]	; 0x24
 800435e:	bf48      	it	mi
 8004360:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004362:	f1bb 0f00 	cmp.w	fp, #0
 8004366:	db3d      	blt.n	80043e4 <_dtoa_r+0x23c>
 8004368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800436e:	445b      	add	r3, fp
 8004370:	9309      	str	r3, [sp, #36]	; 0x24
 8004372:	2300      	movs	r3, #0
 8004374:	930a      	str	r3, [sp, #40]	; 0x28
 8004376:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004378:	2b09      	cmp	r3, #9
 800437a:	d867      	bhi.n	800444c <_dtoa_r+0x2a4>
 800437c:	2b05      	cmp	r3, #5
 800437e:	bfc4      	itt	gt
 8004380:	3b04      	subgt	r3, #4
 8004382:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004386:	bfc8      	it	gt
 8004388:	2400      	movgt	r4, #0
 800438a:	f1a3 0302 	sub.w	r3, r3, #2
 800438e:	bfd8      	it	le
 8004390:	2401      	movle	r4, #1
 8004392:	2b03      	cmp	r3, #3
 8004394:	f200 8086 	bhi.w	80044a4 <_dtoa_r+0x2fc>
 8004398:	e8df f003 	tbb	[pc, r3]
 800439c:	5637392c 	.word	0x5637392c
 80043a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80043a4:	441c      	add	r4, r3
 80043a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	bfc1      	itttt	gt
 80043ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80043b2:	fa09 f903 	lslgt.w	r9, r9, r3
 80043b6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80043ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 80043be:	bfd6      	itet	le
 80043c0:	f1c3 0320 	rsble	r3, r3, #32
 80043c4:	ea49 0003 	orrgt.w	r0, r9, r3
 80043c8:	fa06 f003 	lslle.w	r0, r6, r3
 80043cc:	f7fc f822 	bl	8000414 <__aeabi_ui2d>
 80043d0:	2201      	movs	r2, #1
 80043d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80043d6:	3c01      	subs	r4, #1
 80043d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80043da:	e76f      	b.n	80042bc <_dtoa_r+0x114>
 80043dc:	2301      	movs	r3, #1
 80043de:	e7b3      	b.n	8004348 <_dtoa_r+0x1a0>
 80043e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80043e2:	e7b2      	b.n	800434a <_dtoa_r+0x1a2>
 80043e4:	f1cb 0300 	rsb	r3, fp, #0
 80043e8:	930a      	str	r3, [sp, #40]	; 0x28
 80043ea:	2300      	movs	r3, #0
 80043ec:	eba9 090b 	sub.w	r9, r9, fp
 80043f0:	930e      	str	r3, [sp, #56]	; 0x38
 80043f2:	e7c0      	b.n	8004376 <_dtoa_r+0x1ce>
 80043f4:	2300      	movs	r3, #0
 80043f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80043f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	dc55      	bgt.n	80044aa <_dtoa_r+0x302>
 80043fe:	2301      	movs	r3, #1
 8004400:	461a      	mov	r2, r3
 8004402:	9306      	str	r3, [sp, #24]
 8004404:	9308      	str	r3, [sp, #32]
 8004406:	9223      	str	r2, [sp, #140]	; 0x8c
 8004408:	e00b      	b.n	8004422 <_dtoa_r+0x27a>
 800440a:	2301      	movs	r3, #1
 800440c:	e7f3      	b.n	80043f6 <_dtoa_r+0x24e>
 800440e:	2300      	movs	r3, #0
 8004410:	930b      	str	r3, [sp, #44]	; 0x2c
 8004412:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004414:	445b      	add	r3, fp
 8004416:	9306      	str	r3, [sp, #24]
 8004418:	3301      	adds	r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	9308      	str	r3, [sp, #32]
 800441e:	bfb8      	it	lt
 8004420:	2301      	movlt	r3, #1
 8004422:	2100      	movs	r1, #0
 8004424:	2204      	movs	r2, #4
 8004426:	69e8      	ldr	r0, [r5, #28]
 8004428:	f102 0614 	add.w	r6, r2, #20
 800442c:	429e      	cmp	r6, r3
 800442e:	d940      	bls.n	80044b2 <_dtoa_r+0x30a>
 8004430:	6041      	str	r1, [r0, #4]
 8004432:	4628      	mov	r0, r5
 8004434:	f000 fd98 	bl	8004f68 <_Balloc>
 8004438:	9003      	str	r0, [sp, #12]
 800443a:	2800      	cmp	r0, #0
 800443c:	d13c      	bne.n	80044b8 <_dtoa_r+0x310>
 800443e:	4602      	mov	r2, r0
 8004440:	f240 11af 	movw	r1, #431	; 0x1af
 8004444:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <_dtoa_r+0x2f8>)
 8004446:	e6c3      	b.n	80041d0 <_dtoa_r+0x28>
 8004448:	2301      	movs	r3, #1
 800444a:	e7e1      	b.n	8004410 <_dtoa_r+0x268>
 800444c:	2401      	movs	r4, #1
 800444e:	2300      	movs	r3, #0
 8004450:	940b      	str	r4, [sp, #44]	; 0x2c
 8004452:	9322      	str	r3, [sp, #136]	; 0x88
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
 8004458:	2200      	movs	r2, #0
 800445a:	9306      	str	r3, [sp, #24]
 800445c:	9308      	str	r3, [sp, #32]
 800445e:	2312      	movs	r3, #18
 8004460:	e7d1      	b.n	8004406 <_dtoa_r+0x25e>
 8004462:	bf00      	nop
 8004464:	f3af 8000 	nop.w
 8004468:	636f4361 	.word	0x636f4361
 800446c:	3fd287a7 	.word	0x3fd287a7
 8004470:	8b60c8b3 	.word	0x8b60c8b3
 8004474:	3fc68a28 	.word	0x3fc68a28
 8004478:	509f79fb 	.word	0x509f79fb
 800447c:	3fd34413 	.word	0x3fd34413
 8004480:	08005ea5 	.word	0x08005ea5
 8004484:	08005ebc 	.word	0x08005ebc
 8004488:	7ff00000 	.word	0x7ff00000
 800448c:	08005ea1 	.word	0x08005ea1
 8004490:	08005e98 	.word	0x08005e98
 8004494:	08005e75 	.word	0x08005e75
 8004498:	3ff80000 	.word	0x3ff80000
 800449c:	08005fa8 	.word	0x08005fa8
 80044a0:	08005f14 	.word	0x08005f14
 80044a4:	2301      	movs	r3, #1
 80044a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80044a8:	e7d4      	b.n	8004454 <_dtoa_r+0x2ac>
 80044aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044ac:	9306      	str	r3, [sp, #24]
 80044ae:	9308      	str	r3, [sp, #32]
 80044b0:	e7b7      	b.n	8004422 <_dtoa_r+0x27a>
 80044b2:	3101      	adds	r1, #1
 80044b4:	0052      	lsls	r2, r2, #1
 80044b6:	e7b7      	b.n	8004428 <_dtoa_r+0x280>
 80044b8:	69eb      	ldr	r3, [r5, #28]
 80044ba:	9a03      	ldr	r2, [sp, #12]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	9b08      	ldr	r3, [sp, #32]
 80044c0:	2b0e      	cmp	r3, #14
 80044c2:	f200 80a8 	bhi.w	8004616 <_dtoa_r+0x46e>
 80044c6:	2c00      	cmp	r4, #0
 80044c8:	f000 80a5 	beq.w	8004616 <_dtoa_r+0x46e>
 80044cc:	f1bb 0f00 	cmp.w	fp, #0
 80044d0:	dd34      	ble.n	800453c <_dtoa_r+0x394>
 80044d2:	4b9a      	ldr	r3, [pc, #616]	; (800473c <_dtoa_r+0x594>)
 80044d4:	f00b 020f 	and.w	r2, fp, #15
 80044d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80044e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80044e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80044ec:	d016      	beq.n	800451c <_dtoa_r+0x374>
 80044ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044f2:	4b93      	ldr	r3, [pc, #588]	; (8004740 <_dtoa_r+0x598>)
 80044f4:	2703      	movs	r7, #3
 80044f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044fa:	f7fc f92f 	bl	800075c <__aeabi_ddiv>
 80044fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004502:	f004 040f 	and.w	r4, r4, #15
 8004506:	4e8e      	ldr	r6, [pc, #568]	; (8004740 <_dtoa_r+0x598>)
 8004508:	b954      	cbnz	r4, 8004520 <_dtoa_r+0x378>
 800450a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800450e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004512:	f7fc f923 	bl	800075c <__aeabi_ddiv>
 8004516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800451a:	e029      	b.n	8004570 <_dtoa_r+0x3c8>
 800451c:	2702      	movs	r7, #2
 800451e:	e7f2      	b.n	8004506 <_dtoa_r+0x35e>
 8004520:	07e1      	lsls	r1, r4, #31
 8004522:	d508      	bpl.n	8004536 <_dtoa_r+0x38e>
 8004524:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004528:	e9d6 2300 	ldrd	r2, r3, [r6]
 800452c:	f7fb ffec 	bl	8000508 <__aeabi_dmul>
 8004530:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004534:	3701      	adds	r7, #1
 8004536:	1064      	asrs	r4, r4, #1
 8004538:	3608      	adds	r6, #8
 800453a:	e7e5      	b.n	8004508 <_dtoa_r+0x360>
 800453c:	f000 80a5 	beq.w	800468a <_dtoa_r+0x4e2>
 8004540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004544:	f1cb 0400 	rsb	r4, fp, #0
 8004548:	4b7c      	ldr	r3, [pc, #496]	; (800473c <_dtoa_r+0x594>)
 800454a:	f004 020f 	and.w	r2, r4, #15
 800454e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	f7fb ffd7 	bl	8000508 <__aeabi_dmul>
 800455a:	2702      	movs	r7, #2
 800455c:	2300      	movs	r3, #0
 800455e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004562:	4e77      	ldr	r6, [pc, #476]	; (8004740 <_dtoa_r+0x598>)
 8004564:	1124      	asrs	r4, r4, #4
 8004566:	2c00      	cmp	r4, #0
 8004568:	f040 8084 	bne.w	8004674 <_dtoa_r+0x4cc>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1d2      	bne.n	8004516 <_dtoa_r+0x36e>
 8004570:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004574:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8087 	beq.w	800468e <_dtoa_r+0x4e6>
 8004580:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004584:	2200      	movs	r2, #0
 8004586:	4b6f      	ldr	r3, [pc, #444]	; (8004744 <_dtoa_r+0x59c>)
 8004588:	f7fc fa30 	bl	80009ec <__aeabi_dcmplt>
 800458c:	2800      	cmp	r0, #0
 800458e:	d07e      	beq.n	800468e <_dtoa_r+0x4e6>
 8004590:	9b08      	ldr	r3, [sp, #32]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d07b      	beq.n	800468e <_dtoa_r+0x4e6>
 8004596:	9b06      	ldr	r3, [sp, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	dd38      	ble.n	800460e <_dtoa_r+0x466>
 800459c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045a0:	2200      	movs	r2, #0
 80045a2:	4b69      	ldr	r3, [pc, #420]	; (8004748 <_dtoa_r+0x5a0>)
 80045a4:	f7fb ffb0 	bl	8000508 <__aeabi_dmul>
 80045a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045ac:	9c06      	ldr	r4, [sp, #24]
 80045ae:	f10b 38ff 	add.w	r8, fp, #4294967295
 80045b2:	3701      	adds	r7, #1
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7fb ff3d 	bl	8000434 <__aeabi_i2d>
 80045ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045be:	f7fb ffa3 	bl	8000508 <__aeabi_dmul>
 80045c2:	2200      	movs	r2, #0
 80045c4:	4b61      	ldr	r3, [pc, #388]	; (800474c <_dtoa_r+0x5a4>)
 80045c6:	f7fb fde9 	bl	800019c <__adddf3>
 80045ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80045ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045d2:	9611      	str	r6, [sp, #68]	; 0x44
 80045d4:	2c00      	cmp	r4, #0
 80045d6:	d15d      	bne.n	8004694 <_dtoa_r+0x4ec>
 80045d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045dc:	2200      	movs	r2, #0
 80045de:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <_dtoa_r+0x5a8>)
 80045e0:	f7fb fdda 	bl	8000198 <__aeabi_dsub>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045ec:	4633      	mov	r3, r6
 80045ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045f0:	f7fc fa1a 	bl	8000a28 <__aeabi_dcmpgt>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	f040 8295 	bne.w	8004b24 <_dtoa_r+0x97c>
 80045fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004600:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004604:	f7fc f9f2 	bl	80009ec <__aeabi_dcmplt>
 8004608:	2800      	cmp	r0, #0
 800460a:	f040 8289 	bne.w	8004b20 <_dtoa_r+0x978>
 800460e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004612:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004616:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004618:	2b00      	cmp	r3, #0
 800461a:	f2c0 8151 	blt.w	80048c0 <_dtoa_r+0x718>
 800461e:	f1bb 0f0e 	cmp.w	fp, #14
 8004622:	f300 814d 	bgt.w	80048c0 <_dtoa_r+0x718>
 8004626:	4b45      	ldr	r3, [pc, #276]	; (800473c <_dtoa_r+0x594>)
 8004628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800462c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004630:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004634:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004636:	2b00      	cmp	r3, #0
 8004638:	f280 80da 	bge.w	80047f0 <_dtoa_r+0x648>
 800463c:	9b08      	ldr	r3, [sp, #32]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f300 80d6 	bgt.w	80047f0 <_dtoa_r+0x648>
 8004644:	f040 826b 	bne.w	8004b1e <_dtoa_r+0x976>
 8004648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800464c:	2200      	movs	r2, #0
 800464e:	4b40      	ldr	r3, [pc, #256]	; (8004750 <_dtoa_r+0x5a8>)
 8004650:	f7fb ff5a 	bl	8000508 <__aeabi_dmul>
 8004654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004658:	f7fc f9dc 	bl	8000a14 <__aeabi_dcmpge>
 800465c:	9c08      	ldr	r4, [sp, #32]
 800465e:	4626      	mov	r6, r4
 8004660:	2800      	cmp	r0, #0
 8004662:	f040 8241 	bne.w	8004ae8 <_dtoa_r+0x940>
 8004666:	2331      	movs	r3, #49	; 0x31
 8004668:	9f03      	ldr	r7, [sp, #12]
 800466a:	f10b 0b01 	add.w	fp, fp, #1
 800466e:	f807 3b01 	strb.w	r3, [r7], #1
 8004672:	e23d      	b.n	8004af0 <_dtoa_r+0x948>
 8004674:	07e2      	lsls	r2, r4, #31
 8004676:	d505      	bpl.n	8004684 <_dtoa_r+0x4dc>
 8004678:	e9d6 2300 	ldrd	r2, r3, [r6]
 800467c:	f7fb ff44 	bl	8000508 <__aeabi_dmul>
 8004680:	2301      	movs	r3, #1
 8004682:	3701      	adds	r7, #1
 8004684:	1064      	asrs	r4, r4, #1
 8004686:	3608      	adds	r6, #8
 8004688:	e76d      	b.n	8004566 <_dtoa_r+0x3be>
 800468a:	2702      	movs	r7, #2
 800468c:	e770      	b.n	8004570 <_dtoa_r+0x3c8>
 800468e:	46d8      	mov	r8, fp
 8004690:	9c08      	ldr	r4, [sp, #32]
 8004692:	e78f      	b.n	80045b4 <_dtoa_r+0x40c>
 8004694:	9903      	ldr	r1, [sp, #12]
 8004696:	4b29      	ldr	r3, [pc, #164]	; (800473c <_dtoa_r+0x594>)
 8004698:	4421      	add	r1, r4
 800469a:	9112      	str	r1, [sp, #72]	; 0x48
 800469c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800469e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80046a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80046aa:	2900      	cmp	r1, #0
 80046ac:	d054      	beq.n	8004758 <_dtoa_r+0x5b0>
 80046ae:	2000      	movs	r0, #0
 80046b0:	4928      	ldr	r1, [pc, #160]	; (8004754 <_dtoa_r+0x5ac>)
 80046b2:	f7fc f853 	bl	800075c <__aeabi_ddiv>
 80046b6:	463b      	mov	r3, r7
 80046b8:	4632      	mov	r2, r6
 80046ba:	f7fb fd6d 	bl	8000198 <__aeabi_dsub>
 80046be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046c2:	9f03      	ldr	r7, [sp, #12]
 80046c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046c8:	f7fc f9ce 	bl	8000a68 <__aeabi_d2iz>
 80046cc:	4604      	mov	r4, r0
 80046ce:	f7fb feb1 	bl	8000434 <__aeabi_i2d>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046da:	f7fb fd5d 	bl	8000198 <__aeabi_dsub>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	3430      	adds	r4, #48	; 0x30
 80046e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046ec:	f807 4b01 	strb.w	r4, [r7], #1
 80046f0:	f7fc f97c 	bl	80009ec <__aeabi_dcmplt>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d173      	bne.n	80047e0 <_dtoa_r+0x638>
 80046f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046fc:	2000      	movs	r0, #0
 80046fe:	4911      	ldr	r1, [pc, #68]	; (8004744 <_dtoa_r+0x59c>)
 8004700:	f7fb fd4a 	bl	8000198 <__aeabi_dsub>
 8004704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004708:	f7fc f970 	bl	80009ec <__aeabi_dcmplt>
 800470c:	2800      	cmp	r0, #0
 800470e:	f040 80b6 	bne.w	800487e <_dtoa_r+0x6d6>
 8004712:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004714:	429f      	cmp	r7, r3
 8004716:	f43f af7a 	beq.w	800460e <_dtoa_r+0x466>
 800471a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800471e:	2200      	movs	r2, #0
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <_dtoa_r+0x5a0>)
 8004722:	f7fb fef1 	bl	8000508 <__aeabi_dmul>
 8004726:	2200      	movs	r2, #0
 8004728:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800472c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <_dtoa_r+0x5a0>)
 8004732:	f7fb fee9 	bl	8000508 <__aeabi_dmul>
 8004736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800473a:	e7c3      	b.n	80046c4 <_dtoa_r+0x51c>
 800473c:	08005fa8 	.word	0x08005fa8
 8004740:	08005f80 	.word	0x08005f80
 8004744:	3ff00000 	.word	0x3ff00000
 8004748:	40240000 	.word	0x40240000
 800474c:	401c0000 	.word	0x401c0000
 8004750:	40140000 	.word	0x40140000
 8004754:	3fe00000 	.word	0x3fe00000
 8004758:	4630      	mov	r0, r6
 800475a:	4639      	mov	r1, r7
 800475c:	f7fb fed4 	bl	8000508 <__aeabi_dmul>
 8004760:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004762:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004766:	9c03      	ldr	r4, [sp, #12]
 8004768:	9314      	str	r3, [sp, #80]	; 0x50
 800476a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800476e:	f7fc f97b 	bl	8000a68 <__aeabi_d2iz>
 8004772:	9015      	str	r0, [sp, #84]	; 0x54
 8004774:	f7fb fe5e 	bl	8000434 <__aeabi_i2d>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004780:	f7fb fd0a 	bl	8000198 <__aeabi_dsub>
 8004784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004786:	4606      	mov	r6, r0
 8004788:	3330      	adds	r3, #48	; 0x30
 800478a:	f804 3b01 	strb.w	r3, [r4], #1
 800478e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004790:	460f      	mov	r7, r1
 8004792:	429c      	cmp	r4, r3
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	d124      	bne.n	80047e4 <_dtoa_r+0x63c>
 800479a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800479e:	4baf      	ldr	r3, [pc, #700]	; (8004a5c <_dtoa_r+0x8b4>)
 80047a0:	f7fb fcfc 	bl	800019c <__adddf3>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4630      	mov	r0, r6
 80047aa:	4639      	mov	r1, r7
 80047ac:	f7fc f93c 	bl	8000a28 <__aeabi_dcmpgt>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d163      	bne.n	800487c <_dtoa_r+0x6d4>
 80047b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047b8:	2000      	movs	r0, #0
 80047ba:	49a8      	ldr	r1, [pc, #672]	; (8004a5c <_dtoa_r+0x8b4>)
 80047bc:	f7fb fcec 	bl	8000198 <__aeabi_dsub>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4630      	mov	r0, r6
 80047c6:	4639      	mov	r1, r7
 80047c8:	f7fc f910 	bl	80009ec <__aeabi_dcmplt>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f43f af1e 	beq.w	800460e <_dtoa_r+0x466>
 80047d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80047d4:	1e7b      	subs	r3, r7, #1
 80047d6:	9314      	str	r3, [sp, #80]	; 0x50
 80047d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80047dc:	2b30      	cmp	r3, #48	; 0x30
 80047de:	d0f8      	beq.n	80047d2 <_dtoa_r+0x62a>
 80047e0:	46c3      	mov	fp, r8
 80047e2:	e03b      	b.n	800485c <_dtoa_r+0x6b4>
 80047e4:	4b9e      	ldr	r3, [pc, #632]	; (8004a60 <_dtoa_r+0x8b8>)
 80047e6:	f7fb fe8f 	bl	8000508 <__aeabi_dmul>
 80047ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ee:	e7bc      	b.n	800476a <_dtoa_r+0x5c2>
 80047f0:	9f03      	ldr	r7, [sp, #12]
 80047f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80047f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047fa:	4640      	mov	r0, r8
 80047fc:	4649      	mov	r1, r9
 80047fe:	f7fb ffad 	bl	800075c <__aeabi_ddiv>
 8004802:	f7fc f931 	bl	8000a68 <__aeabi_d2iz>
 8004806:	4604      	mov	r4, r0
 8004808:	f7fb fe14 	bl	8000434 <__aeabi_i2d>
 800480c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004810:	f7fb fe7a 	bl	8000508 <__aeabi_dmul>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4640      	mov	r0, r8
 800481a:	4649      	mov	r1, r9
 800481c:	f7fb fcbc 	bl	8000198 <__aeabi_dsub>
 8004820:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004824:	f807 6b01 	strb.w	r6, [r7], #1
 8004828:	9e03      	ldr	r6, [sp, #12]
 800482a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800482e:	1bbe      	subs	r6, r7, r6
 8004830:	45b4      	cmp	ip, r6
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	d136      	bne.n	80048a6 <_dtoa_r+0x6fe>
 8004838:	f7fb fcb0 	bl	800019c <__adddf3>
 800483c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004840:	4680      	mov	r8, r0
 8004842:	4689      	mov	r9, r1
 8004844:	f7fc f8f0 	bl	8000a28 <__aeabi_dcmpgt>
 8004848:	bb58      	cbnz	r0, 80048a2 <_dtoa_r+0x6fa>
 800484a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800484e:	4640      	mov	r0, r8
 8004850:	4649      	mov	r1, r9
 8004852:	f7fc f8c1 	bl	80009d8 <__aeabi_dcmpeq>
 8004856:	b108      	cbz	r0, 800485c <_dtoa_r+0x6b4>
 8004858:	07e3      	lsls	r3, r4, #31
 800485a:	d422      	bmi.n	80048a2 <_dtoa_r+0x6fa>
 800485c:	4651      	mov	r1, sl
 800485e:	4628      	mov	r0, r5
 8004860:	f000 fbc2 	bl	8004fe8 <_Bfree>
 8004864:	2300      	movs	r3, #0
 8004866:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004868:	703b      	strb	r3, [r7, #0]
 800486a:	f10b 0301 	add.w	r3, fp, #1
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004872:	2b00      	cmp	r3, #0
 8004874:	f43f ace6 	beq.w	8004244 <_dtoa_r+0x9c>
 8004878:	601f      	str	r7, [r3, #0]
 800487a:	e4e3      	b.n	8004244 <_dtoa_r+0x9c>
 800487c:	4627      	mov	r7, r4
 800487e:	463b      	mov	r3, r7
 8004880:	461f      	mov	r7, r3
 8004882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004886:	2a39      	cmp	r2, #57	; 0x39
 8004888:	d107      	bne.n	800489a <_dtoa_r+0x6f2>
 800488a:	9a03      	ldr	r2, [sp, #12]
 800488c:	429a      	cmp	r2, r3
 800488e:	d1f7      	bne.n	8004880 <_dtoa_r+0x6d8>
 8004890:	2230      	movs	r2, #48	; 0x30
 8004892:	9903      	ldr	r1, [sp, #12]
 8004894:	f108 0801 	add.w	r8, r8, #1
 8004898:	700a      	strb	r2, [r1, #0]
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	3201      	adds	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e79e      	b.n	80047e0 <_dtoa_r+0x638>
 80048a2:	46d8      	mov	r8, fp
 80048a4:	e7eb      	b.n	800487e <_dtoa_r+0x6d6>
 80048a6:	2200      	movs	r2, #0
 80048a8:	4b6d      	ldr	r3, [pc, #436]	; (8004a60 <_dtoa_r+0x8b8>)
 80048aa:	f7fb fe2d 	bl	8000508 <__aeabi_dmul>
 80048ae:	2200      	movs	r2, #0
 80048b0:	2300      	movs	r3, #0
 80048b2:	4680      	mov	r8, r0
 80048b4:	4689      	mov	r9, r1
 80048b6:	f7fc f88f 	bl	80009d8 <__aeabi_dcmpeq>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d09b      	beq.n	80047f6 <_dtoa_r+0x64e>
 80048be:	e7cd      	b.n	800485c <_dtoa_r+0x6b4>
 80048c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	f000 80c4 	beq.w	8004a50 <_dtoa_r+0x8a8>
 80048c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80048ca:	2a01      	cmp	r2, #1
 80048cc:	f300 80a8 	bgt.w	8004a20 <_dtoa_r+0x878>
 80048d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048d2:	2a00      	cmp	r2, #0
 80048d4:	f000 80a0 	beq.w	8004a18 <_dtoa_r+0x870>
 80048d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048dc:	464f      	mov	r7, r9
 80048de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80048e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e2:	2101      	movs	r1, #1
 80048e4:	441a      	add	r2, r3
 80048e6:	4628      	mov	r0, r5
 80048e8:	4499      	add	r9, r3
 80048ea:	9209      	str	r2, [sp, #36]	; 0x24
 80048ec:	f000 fc32 	bl	8005154 <__i2b>
 80048f0:	4606      	mov	r6, r0
 80048f2:	b15f      	cbz	r7, 800490c <_dtoa_r+0x764>
 80048f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dd08      	ble.n	800490c <_dtoa_r+0x764>
 80048fa:	42bb      	cmp	r3, r7
 80048fc:	bfa8      	it	ge
 80048fe:	463b      	movge	r3, r7
 8004900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004902:	eba9 0903 	sub.w	r9, r9, r3
 8004906:	1aff      	subs	r7, r7, r3
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	9309      	str	r3, [sp, #36]	; 0x24
 800490c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800490e:	b1f3      	cbz	r3, 800494e <_dtoa_r+0x7a6>
 8004910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80a0 	beq.w	8004a58 <_dtoa_r+0x8b0>
 8004918:	2c00      	cmp	r4, #0
 800491a:	dd10      	ble.n	800493e <_dtoa_r+0x796>
 800491c:	4631      	mov	r1, r6
 800491e:	4622      	mov	r2, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fcd5 	bl	80052d0 <__pow5mult>
 8004926:	4652      	mov	r2, sl
 8004928:	4601      	mov	r1, r0
 800492a:	4606      	mov	r6, r0
 800492c:	4628      	mov	r0, r5
 800492e:	f000 fc27 	bl	8005180 <__multiply>
 8004932:	4680      	mov	r8, r0
 8004934:	4651      	mov	r1, sl
 8004936:	4628      	mov	r0, r5
 8004938:	f000 fb56 	bl	8004fe8 <_Bfree>
 800493c:	46c2      	mov	sl, r8
 800493e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004940:	1b1a      	subs	r2, r3, r4
 8004942:	d004      	beq.n	800494e <_dtoa_r+0x7a6>
 8004944:	4651      	mov	r1, sl
 8004946:	4628      	mov	r0, r5
 8004948:	f000 fcc2 	bl	80052d0 <__pow5mult>
 800494c:	4682      	mov	sl, r0
 800494e:	2101      	movs	r1, #1
 8004950:	4628      	mov	r0, r5
 8004952:	f000 fbff 	bl	8005154 <__i2b>
 8004956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004958:	4604      	mov	r4, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	f340 8082 	ble.w	8004a64 <_dtoa_r+0x8bc>
 8004960:	461a      	mov	r2, r3
 8004962:	4601      	mov	r1, r0
 8004964:	4628      	mov	r0, r5
 8004966:	f000 fcb3 	bl	80052d0 <__pow5mult>
 800496a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800496c:	4604      	mov	r4, r0
 800496e:	2b01      	cmp	r3, #1
 8004970:	dd7b      	ble.n	8004a6a <_dtoa_r+0x8c2>
 8004972:	f04f 0800 	mov.w	r8, #0
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800497c:	6918      	ldr	r0, [r3, #16]
 800497e:	f000 fb9b 	bl	80050b8 <__hi0bits>
 8004982:	f1c0 0020 	rsb	r0, r0, #32
 8004986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004988:	4418      	add	r0, r3
 800498a:	f010 001f 	ands.w	r0, r0, #31
 800498e:	f000 8092 	beq.w	8004ab6 <_dtoa_r+0x90e>
 8004992:	f1c0 0320 	rsb	r3, r0, #32
 8004996:	2b04      	cmp	r3, #4
 8004998:	f340 8085 	ble.w	8004aa6 <_dtoa_r+0x8fe>
 800499c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800499e:	f1c0 001c 	rsb	r0, r0, #28
 80049a2:	4403      	add	r3, r0
 80049a4:	4481      	add	r9, r0
 80049a6:	4407      	add	r7, r0
 80049a8:	9309      	str	r3, [sp, #36]	; 0x24
 80049aa:	f1b9 0f00 	cmp.w	r9, #0
 80049ae:	dd05      	ble.n	80049bc <_dtoa_r+0x814>
 80049b0:	4651      	mov	r1, sl
 80049b2:	464a      	mov	r2, r9
 80049b4:	4628      	mov	r0, r5
 80049b6:	f000 fce5 	bl	8005384 <__lshift>
 80049ba:	4682      	mov	sl, r0
 80049bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	dd05      	ble.n	80049ce <_dtoa_r+0x826>
 80049c2:	4621      	mov	r1, r4
 80049c4:	461a      	mov	r2, r3
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 fcdc 	bl	8005384 <__lshift>
 80049cc:	4604      	mov	r4, r0
 80049ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d072      	beq.n	8004aba <_dtoa_r+0x912>
 80049d4:	4621      	mov	r1, r4
 80049d6:	4650      	mov	r0, sl
 80049d8:	f000 fd40 	bl	800545c <__mcmp>
 80049dc:	2800      	cmp	r0, #0
 80049de:	da6c      	bge.n	8004aba <_dtoa_r+0x912>
 80049e0:	2300      	movs	r3, #0
 80049e2:	4651      	mov	r1, sl
 80049e4:	220a      	movs	r2, #10
 80049e6:	4628      	mov	r0, r5
 80049e8:	f000 fb20 	bl	800502c <__multadd>
 80049ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ee:	4682      	mov	sl, r0
 80049f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 81ac 	beq.w	8004d52 <_dtoa_r+0xbaa>
 80049fa:	2300      	movs	r3, #0
 80049fc:	4631      	mov	r1, r6
 80049fe:	220a      	movs	r2, #10
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 fb13 	bl	800502c <__multadd>
 8004a06:	9b06      	ldr	r3, [sp, #24]
 8004a08:	4606      	mov	r6, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f300 8093 	bgt.w	8004b36 <_dtoa_r+0x98e>
 8004a10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	dc59      	bgt.n	8004aca <_dtoa_r+0x922>
 8004a16:	e08e      	b.n	8004b36 <_dtoa_r+0x98e>
 8004a18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004a1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a1e:	e75d      	b.n	80048dc <_dtoa_r+0x734>
 8004a20:	9b08      	ldr	r3, [sp, #32]
 8004a22:	1e5c      	subs	r4, r3, #1
 8004a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a26:	42a3      	cmp	r3, r4
 8004a28:	bfbf      	itttt	lt
 8004a2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a2c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004a2e:	1ae3      	sublt	r3, r4, r3
 8004a30:	18d2      	addlt	r2, r2, r3
 8004a32:	bfa8      	it	ge
 8004a34:	1b1c      	subge	r4, r3, r4
 8004a36:	9b08      	ldr	r3, [sp, #32]
 8004a38:	bfbe      	ittt	lt
 8004a3a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004a3c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004a3e:	2400      	movlt	r4, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bfb5      	itete	lt
 8004a44:	eba9 0703 	sublt.w	r7, r9, r3
 8004a48:	464f      	movge	r7, r9
 8004a4a:	2300      	movlt	r3, #0
 8004a4c:	9b08      	ldrge	r3, [sp, #32]
 8004a4e:	e747      	b.n	80048e0 <_dtoa_r+0x738>
 8004a50:	464f      	mov	r7, r9
 8004a52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004a56:	e74c      	b.n	80048f2 <_dtoa_r+0x74a>
 8004a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a5a:	e773      	b.n	8004944 <_dtoa_r+0x79c>
 8004a5c:	3fe00000 	.word	0x3fe00000
 8004a60:	40240000 	.word	0x40240000
 8004a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	dc18      	bgt.n	8004a9c <_dtoa_r+0x8f4>
 8004a6a:	9b04      	ldr	r3, [sp, #16]
 8004a6c:	b9b3      	cbnz	r3, 8004a9c <_dtoa_r+0x8f4>
 8004a6e:	9b05      	ldr	r3, [sp, #20]
 8004a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a74:	b993      	cbnz	r3, 8004a9c <_dtoa_r+0x8f4>
 8004a76:	9b05      	ldr	r3, [sp, #20]
 8004a78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a7c:	0d1b      	lsrs	r3, r3, #20
 8004a7e:	051b      	lsls	r3, r3, #20
 8004a80:	b17b      	cbz	r3, 8004aa2 <_dtoa_r+0x8fa>
 8004a82:	f04f 0801 	mov.w	r8, #1
 8004a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a88:	f109 0901 	add.w	r9, r9, #1
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f47f af6f 	bne.w	8004976 <_dtoa_r+0x7ce>
 8004a98:	2001      	movs	r0, #1
 8004a9a:	e774      	b.n	8004986 <_dtoa_r+0x7de>
 8004a9c:	f04f 0800 	mov.w	r8, #0
 8004aa0:	e7f6      	b.n	8004a90 <_dtoa_r+0x8e8>
 8004aa2:	4698      	mov	r8, r3
 8004aa4:	e7f4      	b.n	8004a90 <_dtoa_r+0x8e8>
 8004aa6:	d080      	beq.n	80049aa <_dtoa_r+0x802>
 8004aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aaa:	331c      	adds	r3, #28
 8004aac:	441a      	add	r2, r3
 8004aae:	4499      	add	r9, r3
 8004ab0:	441f      	add	r7, r3
 8004ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ab4:	e779      	b.n	80049aa <_dtoa_r+0x802>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	e7f6      	b.n	8004aa8 <_dtoa_r+0x900>
 8004aba:	9b08      	ldr	r3, [sp, #32]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	dc34      	bgt.n	8004b2a <_dtoa_r+0x982>
 8004ac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	dd31      	ble.n	8004b2a <_dtoa_r+0x982>
 8004ac6:	9b08      	ldr	r3, [sp, #32]
 8004ac8:	9306      	str	r3, [sp, #24]
 8004aca:	9b06      	ldr	r3, [sp, #24]
 8004acc:	b963      	cbnz	r3, 8004ae8 <_dtoa_r+0x940>
 8004ace:	4621      	mov	r1, r4
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f000 faaa 	bl	800502c <__multadd>
 8004ad8:	4601      	mov	r1, r0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4650      	mov	r0, sl
 8004ade:	f000 fcbd 	bl	800545c <__mcmp>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	f73f adbf 	bgt.w	8004666 <_dtoa_r+0x4be>
 8004ae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004aea:	9f03      	ldr	r7, [sp, #12]
 8004aec:	ea6f 0b03 	mvn.w	fp, r3
 8004af0:	f04f 0800 	mov.w	r8, #0
 8004af4:	4621      	mov	r1, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 fa76 	bl	8004fe8 <_Bfree>
 8004afc:	2e00      	cmp	r6, #0
 8004afe:	f43f aead 	beq.w	800485c <_dtoa_r+0x6b4>
 8004b02:	f1b8 0f00 	cmp.w	r8, #0
 8004b06:	d005      	beq.n	8004b14 <_dtoa_r+0x96c>
 8004b08:	45b0      	cmp	r8, r6
 8004b0a:	d003      	beq.n	8004b14 <_dtoa_r+0x96c>
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 fa6a 	bl	8004fe8 <_Bfree>
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 fa66 	bl	8004fe8 <_Bfree>
 8004b1c:	e69e      	b.n	800485c <_dtoa_r+0x6b4>
 8004b1e:	2400      	movs	r4, #0
 8004b20:	4626      	mov	r6, r4
 8004b22:	e7e1      	b.n	8004ae8 <_dtoa_r+0x940>
 8004b24:	46c3      	mov	fp, r8
 8004b26:	4626      	mov	r6, r4
 8004b28:	e59d      	b.n	8004666 <_dtoa_r+0x4be>
 8004b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80c8 	beq.w	8004cc2 <_dtoa_r+0xb1a>
 8004b32:	9b08      	ldr	r3, [sp, #32]
 8004b34:	9306      	str	r3, [sp, #24]
 8004b36:	2f00      	cmp	r7, #0
 8004b38:	dd05      	ble.n	8004b46 <_dtoa_r+0x99e>
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	463a      	mov	r2, r7
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f000 fc20 	bl	8005384 <__lshift>
 8004b44:	4606      	mov	r6, r0
 8004b46:	f1b8 0f00 	cmp.w	r8, #0
 8004b4a:	d05b      	beq.n	8004c04 <_dtoa_r+0xa5c>
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	6871      	ldr	r1, [r6, #4]
 8004b50:	f000 fa0a 	bl	8004f68 <_Balloc>
 8004b54:	4607      	mov	r7, r0
 8004b56:	b928      	cbnz	r0, 8004b64 <_dtoa_r+0x9bc>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004b5e:	4b81      	ldr	r3, [pc, #516]	; (8004d64 <_dtoa_r+0xbbc>)
 8004b60:	f7ff bb36 	b.w	80041d0 <_dtoa_r+0x28>
 8004b64:	6932      	ldr	r2, [r6, #16]
 8004b66:	f106 010c 	add.w	r1, r6, #12
 8004b6a:	3202      	adds	r2, #2
 8004b6c:	0092      	lsls	r2, r2, #2
 8004b6e:	300c      	adds	r0, #12
 8004b70:	f001 f804 	bl	8005b7c <memcpy>
 8004b74:	2201      	movs	r2, #1
 8004b76:	4639      	mov	r1, r7
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 fc03 	bl	8005384 <__lshift>
 8004b7e:	46b0      	mov	r8, r6
 8004b80:	4606      	mov	r6, r0
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	9a03      	ldr	r2, [sp, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	9308      	str	r3, [sp, #32]
 8004b8a:	9b06      	ldr	r3, [sp, #24]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b90:	9b04      	ldr	r3, [sp, #16]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	930a      	str	r3, [sp, #40]	; 0x28
 8004b98:	9b08      	ldr	r3, [sp, #32]
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	4650      	mov	r0, sl
 8004ba0:	9304      	str	r3, [sp, #16]
 8004ba2:	f7ff fa78 	bl	8004096 <quorem>
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	9006      	str	r0, [sp, #24]
 8004baa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004bae:	4650      	mov	r0, sl
 8004bb0:	f000 fc54 	bl	800545c <__mcmp>
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	9009      	str	r0, [sp, #36]	; 0x24
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 fc6a 	bl	8005494 <__mdiff>
 8004bc0:	68c2      	ldr	r2, [r0, #12]
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	bb02      	cbnz	r2, 8004c08 <_dtoa_r+0xa60>
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	4650      	mov	r0, sl
 8004bca:	f000 fc47 	bl	800545c <__mcmp>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	920c      	str	r2, [sp, #48]	; 0x30
 8004bd6:	f000 fa07 	bl	8004fe8 <_Bfree>
 8004bda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bde:	9f08      	ldr	r7, [sp, #32]
 8004be0:	ea43 0102 	orr.w	r1, r3, r2
 8004be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be6:	4319      	orrs	r1, r3
 8004be8:	d110      	bne.n	8004c0c <_dtoa_r+0xa64>
 8004bea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004bee:	d029      	beq.n	8004c44 <_dtoa_r+0xa9c>
 8004bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	dd02      	ble.n	8004bfc <_dtoa_r+0xa54>
 8004bf6:	9b06      	ldr	r3, [sp, #24]
 8004bf8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004bfc:	9b04      	ldr	r3, [sp, #16]
 8004bfe:	f883 9000 	strb.w	r9, [r3]
 8004c02:	e777      	b.n	8004af4 <_dtoa_r+0x94c>
 8004c04:	4630      	mov	r0, r6
 8004c06:	e7ba      	b.n	8004b7e <_dtoa_r+0x9d6>
 8004c08:	2201      	movs	r2, #1
 8004c0a:	e7e1      	b.n	8004bd0 <_dtoa_r+0xa28>
 8004c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	db04      	blt.n	8004c1c <_dtoa_r+0xa74>
 8004c12:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004c14:	430b      	orrs	r3, r1
 8004c16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	d120      	bne.n	8004c5e <_dtoa_r+0xab6>
 8004c1c:	2a00      	cmp	r2, #0
 8004c1e:	dded      	ble.n	8004bfc <_dtoa_r+0xa54>
 8004c20:	4651      	mov	r1, sl
 8004c22:	2201      	movs	r2, #1
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 fbad 	bl	8005384 <__lshift>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4682      	mov	sl, r0
 8004c2e:	f000 fc15 	bl	800545c <__mcmp>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	dc03      	bgt.n	8004c3e <_dtoa_r+0xa96>
 8004c36:	d1e1      	bne.n	8004bfc <_dtoa_r+0xa54>
 8004c38:	f019 0f01 	tst.w	r9, #1
 8004c3c:	d0de      	beq.n	8004bfc <_dtoa_r+0xa54>
 8004c3e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004c42:	d1d8      	bne.n	8004bf6 <_dtoa_r+0xa4e>
 8004c44:	2339      	movs	r3, #57	; 0x39
 8004c46:	9a04      	ldr	r2, [sp, #16]
 8004c48:	7013      	strb	r3, [r2, #0]
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	461f      	mov	r7, r3
 8004c4e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	2a39      	cmp	r2, #57	; 0x39
 8004c56:	d06b      	beq.n	8004d30 <_dtoa_r+0xb88>
 8004c58:	3201      	adds	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e74a      	b.n	8004af4 <_dtoa_r+0x94c>
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	dd07      	ble.n	8004c72 <_dtoa_r+0xaca>
 8004c62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004c66:	d0ed      	beq.n	8004c44 <_dtoa_r+0xa9c>
 8004c68:	9a04      	ldr	r2, [sp, #16]
 8004c6a:	f109 0301 	add.w	r3, r9, #1
 8004c6e:	7013      	strb	r3, [r2, #0]
 8004c70:	e740      	b.n	8004af4 <_dtoa_r+0x94c>
 8004c72:	9b08      	ldr	r3, [sp, #32]
 8004c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c76:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d042      	beq.n	8004d04 <_dtoa_r+0xb5c>
 8004c7e:	4651      	mov	r1, sl
 8004c80:	2300      	movs	r3, #0
 8004c82:	220a      	movs	r2, #10
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f9d1 	bl	800502c <__multadd>
 8004c8a:	45b0      	cmp	r8, r6
 8004c8c:	4682      	mov	sl, r0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	f04f 020a 	mov.w	r2, #10
 8004c96:	4641      	mov	r1, r8
 8004c98:	4628      	mov	r0, r5
 8004c9a:	d107      	bne.n	8004cac <_dtoa_r+0xb04>
 8004c9c:	f000 f9c6 	bl	800502c <__multadd>
 8004ca0:	4680      	mov	r8, r0
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	9b08      	ldr	r3, [sp, #32]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	9308      	str	r3, [sp, #32]
 8004caa:	e775      	b.n	8004b98 <_dtoa_r+0x9f0>
 8004cac:	f000 f9be 	bl	800502c <__multadd>
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	4680      	mov	r8, r0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	220a      	movs	r2, #10
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f9b7 	bl	800502c <__multadd>
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	e7f0      	b.n	8004ca4 <_dtoa_r+0xafc>
 8004cc2:	9b08      	ldr	r3, [sp, #32]
 8004cc4:	9306      	str	r3, [sp, #24]
 8004cc6:	9f03      	ldr	r7, [sp, #12]
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4650      	mov	r0, sl
 8004ccc:	f7ff f9e3 	bl	8004096 <quorem>
 8004cd0:	9b03      	ldr	r3, [sp, #12]
 8004cd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004cd6:	f807 9b01 	strb.w	r9, [r7], #1
 8004cda:	1afa      	subs	r2, r7, r3
 8004cdc:	9b06      	ldr	r3, [sp, #24]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	dd07      	ble.n	8004cf2 <_dtoa_r+0xb4a>
 8004ce2:	4651      	mov	r1, sl
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	220a      	movs	r2, #10
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 f99f 	bl	800502c <__multadd>
 8004cee:	4682      	mov	sl, r0
 8004cf0:	e7ea      	b.n	8004cc8 <_dtoa_r+0xb20>
 8004cf2:	9b06      	ldr	r3, [sp, #24]
 8004cf4:	f04f 0800 	mov.w	r8, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfcc      	ite	gt
 8004cfc:	461f      	movgt	r7, r3
 8004cfe:	2701      	movle	r7, #1
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	441f      	add	r7, r3
 8004d04:	4651      	mov	r1, sl
 8004d06:	2201      	movs	r2, #1
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f000 fb3b 	bl	8005384 <__lshift>
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4682      	mov	sl, r0
 8004d12:	f000 fba3 	bl	800545c <__mcmp>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	dc97      	bgt.n	8004c4a <_dtoa_r+0xaa2>
 8004d1a:	d102      	bne.n	8004d22 <_dtoa_r+0xb7a>
 8004d1c:	f019 0f01 	tst.w	r9, #1
 8004d20:	d193      	bne.n	8004c4a <_dtoa_r+0xaa2>
 8004d22:	463b      	mov	r3, r7
 8004d24:	461f      	mov	r7, r3
 8004d26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d2a:	2a30      	cmp	r2, #48	; 0x30
 8004d2c:	d0fa      	beq.n	8004d24 <_dtoa_r+0xb7c>
 8004d2e:	e6e1      	b.n	8004af4 <_dtoa_r+0x94c>
 8004d30:	9a03      	ldr	r2, [sp, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d18a      	bne.n	8004c4c <_dtoa_r+0xaa4>
 8004d36:	2331      	movs	r3, #49	; 0x31
 8004d38:	f10b 0b01 	add.w	fp, fp, #1
 8004d3c:	e797      	b.n	8004c6e <_dtoa_r+0xac6>
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <_dtoa_r+0xbc0>)
 8004d40:	f7ff ba9f 	b.w	8004282 <_dtoa_r+0xda>
 8004d44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f47f aa77 	bne.w	800423a <_dtoa_r+0x92>
 8004d4c:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <_dtoa_r+0xbc4>)
 8004d4e:	f7ff ba98 	b.w	8004282 <_dtoa_r+0xda>
 8004d52:	9b06      	ldr	r3, [sp, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	dcb6      	bgt.n	8004cc6 <_dtoa_r+0xb1e>
 8004d58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	f73f aeb5 	bgt.w	8004aca <_dtoa_r+0x922>
 8004d60:	e7b1      	b.n	8004cc6 <_dtoa_r+0xb1e>
 8004d62:	bf00      	nop
 8004d64:	08005f14 	.word	0x08005f14
 8004d68:	08005e74 	.word	0x08005e74
 8004d6c:	08005e98 	.word	0x08005e98

08004d70 <_free_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d040      	beq.n	8004dfa <_free_r+0x8a>
 8004d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7c:	1f0c      	subs	r4, r1, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfb8      	it	lt
 8004d82:	18e4      	addlt	r4, r4, r3
 8004d84:	f000 f8e4 	bl	8004f50 <__malloc_lock>
 8004d88:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <_free_r+0x8c>)
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	b933      	cbnz	r3, 8004d9c <_free_r+0x2c>
 8004d8e:	6063      	str	r3, [r4, #4]
 8004d90:	6014      	str	r4, [r2, #0]
 8004d92:	4628      	mov	r0, r5
 8004d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d98:	f000 b8e0 	b.w	8004f5c <__malloc_unlock>
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d908      	bls.n	8004db2 <_free_r+0x42>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	1821      	adds	r1, r4, r0
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf01      	itttt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	1809      	addeq	r1, r1, r0
 8004dae:	6021      	streq	r1, [r4, #0]
 8004db0:	e7ed      	b.n	8004d8e <_free_r+0x1e>
 8004db2:	461a      	mov	r2, r3
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	b10b      	cbz	r3, 8004dbc <_free_r+0x4c>
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	d9fa      	bls.n	8004db2 <_free_r+0x42>
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	1850      	adds	r0, r2, r1
 8004dc0:	42a0      	cmp	r0, r4
 8004dc2:	d10b      	bne.n	8004ddc <_free_r+0x6c>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	4401      	add	r1, r0
 8004dc8:	1850      	adds	r0, r2, r1
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	d1e0      	bne.n	8004d92 <_free_r+0x22>
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4408      	add	r0, r1
 8004dd6:	6010      	str	r0, [r2, #0]
 8004dd8:	6053      	str	r3, [r2, #4]
 8004dda:	e7da      	b.n	8004d92 <_free_r+0x22>
 8004ddc:	d902      	bls.n	8004de4 <_free_r+0x74>
 8004dde:	230c      	movs	r3, #12
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	e7d6      	b.n	8004d92 <_free_r+0x22>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	1821      	adds	r1, r4, r0
 8004de8:	428b      	cmp	r3, r1
 8004dea:	bf01      	itttt	eq
 8004dec:	6819      	ldreq	r1, [r3, #0]
 8004dee:	685b      	ldreq	r3, [r3, #4]
 8004df0:	1809      	addeq	r1, r1, r0
 8004df2:	6021      	streq	r1, [r4, #0]
 8004df4:	6063      	str	r3, [r4, #4]
 8004df6:	6054      	str	r4, [r2, #4]
 8004df8:	e7cb      	b.n	8004d92 <_free_r+0x22>
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	200003d8 	.word	0x200003d8

08004e00 <malloc>:
 8004e00:	4b02      	ldr	r3, [pc, #8]	; (8004e0c <malloc+0xc>)
 8004e02:	4601      	mov	r1, r0
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	f000 b823 	b.w	8004e50 <_malloc_r>
 8004e0a:	bf00      	nop
 8004e0c:	20000064 	.word	0x20000064

08004e10 <sbrk_aligned>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	4e0e      	ldr	r6, [pc, #56]	; (8004e4c <sbrk_aligned+0x3c>)
 8004e14:	460c      	mov	r4, r1
 8004e16:	6831      	ldr	r1, [r6, #0]
 8004e18:	4605      	mov	r5, r0
 8004e1a:	b911      	cbnz	r1, 8004e22 <sbrk_aligned+0x12>
 8004e1c:	f000 fe9e 	bl	8005b5c <_sbrk_r>
 8004e20:	6030      	str	r0, [r6, #0]
 8004e22:	4621      	mov	r1, r4
 8004e24:	4628      	mov	r0, r5
 8004e26:	f000 fe99 	bl	8005b5c <_sbrk_r>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	d00a      	beq.n	8004e44 <sbrk_aligned+0x34>
 8004e2e:	1cc4      	adds	r4, r0, #3
 8004e30:	f024 0403 	bic.w	r4, r4, #3
 8004e34:	42a0      	cmp	r0, r4
 8004e36:	d007      	beq.n	8004e48 <sbrk_aligned+0x38>
 8004e38:	1a21      	subs	r1, r4, r0
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fe8e 	bl	8005b5c <_sbrk_r>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d101      	bne.n	8004e48 <sbrk_aligned+0x38>
 8004e44:	f04f 34ff 	mov.w	r4, #4294967295
 8004e48:	4620      	mov	r0, r4
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	200003dc 	.word	0x200003dc

08004e50 <_malloc_r>:
 8004e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e54:	1ccd      	adds	r5, r1, #3
 8004e56:	f025 0503 	bic.w	r5, r5, #3
 8004e5a:	3508      	adds	r5, #8
 8004e5c:	2d0c      	cmp	r5, #12
 8004e5e:	bf38      	it	cc
 8004e60:	250c      	movcc	r5, #12
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	4607      	mov	r7, r0
 8004e66:	db01      	blt.n	8004e6c <_malloc_r+0x1c>
 8004e68:	42a9      	cmp	r1, r5
 8004e6a:	d905      	bls.n	8004e78 <_malloc_r+0x28>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	2600      	movs	r6, #0
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4630      	mov	r0, r6
 8004e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f4c <_malloc_r+0xfc>
 8004e7c:	f000 f868 	bl	8004f50 <__malloc_lock>
 8004e80:	f8d8 3000 	ldr.w	r3, [r8]
 8004e84:	461c      	mov	r4, r3
 8004e86:	bb5c      	cbnz	r4, 8004ee0 <_malloc_r+0x90>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f7ff ffc0 	bl	8004e10 <sbrk_aligned>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	4604      	mov	r4, r0
 8004e94:	d155      	bne.n	8004f42 <_malloc_r+0xf2>
 8004e96:	f8d8 4000 	ldr.w	r4, [r8]
 8004e9a:	4626      	mov	r6, r4
 8004e9c:	2e00      	cmp	r6, #0
 8004e9e:	d145      	bne.n	8004f2c <_malloc_r+0xdc>
 8004ea0:	2c00      	cmp	r4, #0
 8004ea2:	d048      	beq.n	8004f36 <_malloc_r+0xe6>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	eb04 0903 	add.w	r9, r4, r3
 8004eae:	f000 fe55 	bl	8005b5c <_sbrk_r>
 8004eb2:	4581      	cmp	r9, r0
 8004eb4:	d13f      	bne.n	8004f36 <_malloc_r+0xe6>
 8004eb6:	6821      	ldr	r1, [r4, #0]
 8004eb8:	4638      	mov	r0, r7
 8004eba:	1a6d      	subs	r5, r5, r1
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	f7ff ffa7 	bl	8004e10 <sbrk_aligned>
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d037      	beq.n	8004f36 <_malloc_r+0xe6>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	442b      	add	r3, r5
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d038      	beq.n	8004f46 <_malloc_r+0xf6>
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	42a2      	cmp	r2, r4
 8004ed8:	d12b      	bne.n	8004f32 <_malloc_r+0xe2>
 8004eda:	2200      	movs	r2, #0
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	e00f      	b.n	8004f00 <_malloc_r+0xb0>
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	1b52      	subs	r2, r2, r5
 8004ee4:	d41f      	bmi.n	8004f26 <_malloc_r+0xd6>
 8004ee6:	2a0b      	cmp	r2, #11
 8004ee8:	d917      	bls.n	8004f1a <_malloc_r+0xca>
 8004eea:	1961      	adds	r1, r4, r5
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	6025      	str	r5, [r4, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	6059      	strne	r1, [r3, #4]
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	bf08      	it	eq
 8004ef8:	f8c8 1000 	streq.w	r1, [r8]
 8004efc:	5162      	str	r2, [r4, r5]
 8004efe:	604b      	str	r3, [r1, #4]
 8004f00:	4638      	mov	r0, r7
 8004f02:	f104 060b 	add.w	r6, r4, #11
 8004f06:	f000 f829 	bl	8004f5c <__malloc_unlock>
 8004f0a:	f026 0607 	bic.w	r6, r6, #7
 8004f0e:	1d23      	adds	r3, r4, #4
 8004f10:	1af2      	subs	r2, r6, r3
 8004f12:	d0ae      	beq.n	8004e72 <_malloc_r+0x22>
 8004f14:	1b9b      	subs	r3, r3, r6
 8004f16:	50a3      	str	r3, [r4, r2]
 8004f18:	e7ab      	b.n	8004e72 <_malloc_r+0x22>
 8004f1a:	42a3      	cmp	r3, r4
 8004f1c:	6862      	ldr	r2, [r4, #4]
 8004f1e:	d1dd      	bne.n	8004edc <_malloc_r+0x8c>
 8004f20:	f8c8 2000 	str.w	r2, [r8]
 8004f24:	e7ec      	b.n	8004f00 <_malloc_r+0xb0>
 8004f26:	4623      	mov	r3, r4
 8004f28:	6864      	ldr	r4, [r4, #4]
 8004f2a:	e7ac      	b.n	8004e86 <_malloc_r+0x36>
 8004f2c:	4634      	mov	r4, r6
 8004f2e:	6876      	ldr	r6, [r6, #4]
 8004f30:	e7b4      	b.n	8004e9c <_malloc_r+0x4c>
 8004f32:	4613      	mov	r3, r2
 8004f34:	e7cc      	b.n	8004ed0 <_malloc_r+0x80>
 8004f36:	230c      	movs	r3, #12
 8004f38:	4638      	mov	r0, r7
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	f000 f80e 	bl	8004f5c <__malloc_unlock>
 8004f40:	e797      	b.n	8004e72 <_malloc_r+0x22>
 8004f42:	6025      	str	r5, [r4, #0]
 8004f44:	e7dc      	b.n	8004f00 <_malloc_r+0xb0>
 8004f46:	605b      	str	r3, [r3, #4]
 8004f48:	deff      	udf	#255	; 0xff
 8004f4a:	bf00      	nop
 8004f4c:	200003d8 	.word	0x200003d8

08004f50 <__malloc_lock>:
 8004f50:	4801      	ldr	r0, [pc, #4]	; (8004f58 <__malloc_lock+0x8>)
 8004f52:	f7ff b890 	b.w	8004076 <__retarget_lock_acquire_recursive>
 8004f56:	bf00      	nop
 8004f58:	200003d4 	.word	0x200003d4

08004f5c <__malloc_unlock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	; (8004f64 <__malloc_unlock+0x8>)
 8004f5e:	f7ff b88b 	b.w	8004078 <__retarget_lock_release_recursive>
 8004f62:	bf00      	nop
 8004f64:	200003d4 	.word	0x200003d4

08004f68 <_Balloc>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	69c6      	ldr	r6, [r0, #28]
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	460d      	mov	r5, r1
 8004f70:	b976      	cbnz	r6, 8004f90 <_Balloc+0x28>
 8004f72:	2010      	movs	r0, #16
 8004f74:	f7ff ff44 	bl	8004e00 <malloc>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	61e0      	str	r0, [r4, #28]
 8004f7c:	b920      	cbnz	r0, 8004f88 <_Balloc+0x20>
 8004f7e:	216b      	movs	r1, #107	; 0x6b
 8004f80:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <_Balloc+0x78>)
 8004f82:	4818      	ldr	r0, [pc, #96]	; (8004fe4 <_Balloc+0x7c>)
 8004f84:	f000 fe08 	bl	8005b98 <__assert_func>
 8004f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f8c:	6006      	str	r6, [r0, #0]
 8004f8e:	60c6      	str	r6, [r0, #12]
 8004f90:	69e6      	ldr	r6, [r4, #28]
 8004f92:	68f3      	ldr	r3, [r6, #12]
 8004f94:	b183      	cbz	r3, 8004fb8 <_Balloc+0x50>
 8004f96:	69e3      	ldr	r3, [r4, #28]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f9e:	b9b8      	cbnz	r0, 8004fd0 <_Balloc+0x68>
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	fa01 f605 	lsl.w	r6, r1, r5
 8004fa6:	1d72      	adds	r2, r6, #5
 8004fa8:	4620      	mov	r0, r4
 8004faa:	0092      	lsls	r2, r2, #2
 8004fac:	f000 fe12 	bl	8005bd4 <_calloc_r>
 8004fb0:	b160      	cbz	r0, 8004fcc <_Balloc+0x64>
 8004fb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004fb6:	e00e      	b.n	8004fd6 <_Balloc+0x6e>
 8004fb8:	2221      	movs	r2, #33	; 0x21
 8004fba:	2104      	movs	r1, #4
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f000 fe09 	bl	8005bd4 <_calloc_r>
 8004fc2:	69e3      	ldr	r3, [r4, #28]
 8004fc4:	60f0      	str	r0, [r6, #12]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e4      	bne.n	8004f96 <_Balloc+0x2e>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	6802      	ldr	r2, [r0, #0]
 8004fd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004fdc:	e7f7      	b.n	8004fce <_Balloc+0x66>
 8004fde:	bf00      	nop
 8004fe0:	08005ea5 	.word	0x08005ea5
 8004fe4:	08005f25 	.word	0x08005f25

08004fe8 <_Bfree>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	69c6      	ldr	r6, [r0, #28]
 8004fec:	4605      	mov	r5, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	b976      	cbnz	r6, 8005010 <_Bfree+0x28>
 8004ff2:	2010      	movs	r0, #16
 8004ff4:	f7ff ff04 	bl	8004e00 <malloc>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	61e8      	str	r0, [r5, #28]
 8004ffc:	b920      	cbnz	r0, 8005008 <_Bfree+0x20>
 8004ffe:	218f      	movs	r1, #143	; 0x8f
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <_Bfree+0x3c>)
 8005002:	4809      	ldr	r0, [pc, #36]	; (8005028 <_Bfree+0x40>)
 8005004:	f000 fdc8 	bl	8005b98 <__assert_func>
 8005008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800500c:	6006      	str	r6, [r0, #0]
 800500e:	60c6      	str	r6, [r0, #12]
 8005010:	b13c      	cbz	r4, 8005022 <_Bfree+0x3a>
 8005012:	69eb      	ldr	r3, [r5, #28]
 8005014:	6862      	ldr	r2, [r4, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800501c:	6021      	str	r1, [r4, #0]
 800501e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	08005ea5 	.word	0x08005ea5
 8005028:	08005f25 	.word	0x08005f25

0800502c <__multadd>:
 800502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005030:	4607      	mov	r7, r0
 8005032:	460c      	mov	r4, r1
 8005034:	461e      	mov	r6, r3
 8005036:	2000      	movs	r0, #0
 8005038:	690d      	ldr	r5, [r1, #16]
 800503a:	f101 0c14 	add.w	ip, r1, #20
 800503e:	f8dc 3000 	ldr.w	r3, [ip]
 8005042:	3001      	adds	r0, #1
 8005044:	b299      	uxth	r1, r3
 8005046:	fb02 6101 	mla	r1, r2, r1, r6
 800504a:	0c1e      	lsrs	r6, r3, #16
 800504c:	0c0b      	lsrs	r3, r1, #16
 800504e:	fb02 3306 	mla	r3, r2, r6, r3
 8005052:	b289      	uxth	r1, r1
 8005054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005058:	4285      	cmp	r5, r0
 800505a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800505e:	f84c 1b04 	str.w	r1, [ip], #4
 8005062:	dcec      	bgt.n	800503e <__multadd+0x12>
 8005064:	b30e      	cbz	r6, 80050aa <__multadd+0x7e>
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	42ab      	cmp	r3, r5
 800506a:	dc19      	bgt.n	80050a0 <__multadd+0x74>
 800506c:	6861      	ldr	r1, [r4, #4]
 800506e:	4638      	mov	r0, r7
 8005070:	3101      	adds	r1, #1
 8005072:	f7ff ff79 	bl	8004f68 <_Balloc>
 8005076:	4680      	mov	r8, r0
 8005078:	b928      	cbnz	r0, 8005086 <__multadd+0x5a>
 800507a:	4602      	mov	r2, r0
 800507c:	21ba      	movs	r1, #186	; 0xba
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <__multadd+0x84>)
 8005080:	480c      	ldr	r0, [pc, #48]	; (80050b4 <__multadd+0x88>)
 8005082:	f000 fd89 	bl	8005b98 <__assert_func>
 8005086:	6922      	ldr	r2, [r4, #16]
 8005088:	f104 010c 	add.w	r1, r4, #12
 800508c:	3202      	adds	r2, #2
 800508e:	0092      	lsls	r2, r2, #2
 8005090:	300c      	adds	r0, #12
 8005092:	f000 fd73 	bl	8005b7c <memcpy>
 8005096:	4621      	mov	r1, r4
 8005098:	4638      	mov	r0, r7
 800509a:	f7ff ffa5 	bl	8004fe8 <_Bfree>
 800509e:	4644      	mov	r4, r8
 80050a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050a4:	3501      	adds	r5, #1
 80050a6:	615e      	str	r6, [r3, #20]
 80050a8:	6125      	str	r5, [r4, #16]
 80050aa:	4620      	mov	r0, r4
 80050ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b0:	08005f14 	.word	0x08005f14
 80050b4:	08005f25 	.word	0x08005f25

080050b8 <__hi0bits>:
 80050b8:	0c02      	lsrs	r2, r0, #16
 80050ba:	0412      	lsls	r2, r2, #16
 80050bc:	4603      	mov	r3, r0
 80050be:	b9ca      	cbnz	r2, 80050f4 <__hi0bits+0x3c>
 80050c0:	0403      	lsls	r3, r0, #16
 80050c2:	2010      	movs	r0, #16
 80050c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80050c8:	bf04      	itt	eq
 80050ca:	021b      	lsleq	r3, r3, #8
 80050cc:	3008      	addeq	r0, #8
 80050ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80050d2:	bf04      	itt	eq
 80050d4:	011b      	lsleq	r3, r3, #4
 80050d6:	3004      	addeq	r0, #4
 80050d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80050dc:	bf04      	itt	eq
 80050de:	009b      	lsleq	r3, r3, #2
 80050e0:	3002      	addeq	r0, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	db05      	blt.n	80050f2 <__hi0bits+0x3a>
 80050e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80050ea:	f100 0001 	add.w	r0, r0, #1
 80050ee:	bf08      	it	eq
 80050f0:	2020      	moveq	r0, #32
 80050f2:	4770      	bx	lr
 80050f4:	2000      	movs	r0, #0
 80050f6:	e7e5      	b.n	80050c4 <__hi0bits+0xc>

080050f8 <__lo0bits>:
 80050f8:	6803      	ldr	r3, [r0, #0]
 80050fa:	4602      	mov	r2, r0
 80050fc:	f013 0007 	ands.w	r0, r3, #7
 8005100:	d00b      	beq.n	800511a <__lo0bits+0x22>
 8005102:	07d9      	lsls	r1, r3, #31
 8005104:	d421      	bmi.n	800514a <__lo0bits+0x52>
 8005106:	0798      	lsls	r0, r3, #30
 8005108:	bf49      	itett	mi
 800510a:	085b      	lsrmi	r3, r3, #1
 800510c:	089b      	lsrpl	r3, r3, #2
 800510e:	2001      	movmi	r0, #1
 8005110:	6013      	strmi	r3, [r2, #0]
 8005112:	bf5c      	itt	pl
 8005114:	2002      	movpl	r0, #2
 8005116:	6013      	strpl	r3, [r2, #0]
 8005118:	4770      	bx	lr
 800511a:	b299      	uxth	r1, r3
 800511c:	b909      	cbnz	r1, 8005122 <__lo0bits+0x2a>
 800511e:	2010      	movs	r0, #16
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	b2d9      	uxtb	r1, r3
 8005124:	b909      	cbnz	r1, 800512a <__lo0bits+0x32>
 8005126:	3008      	adds	r0, #8
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	0719      	lsls	r1, r3, #28
 800512c:	bf04      	itt	eq
 800512e:	091b      	lsreq	r3, r3, #4
 8005130:	3004      	addeq	r0, #4
 8005132:	0799      	lsls	r1, r3, #30
 8005134:	bf04      	itt	eq
 8005136:	089b      	lsreq	r3, r3, #2
 8005138:	3002      	addeq	r0, #2
 800513a:	07d9      	lsls	r1, r3, #31
 800513c:	d403      	bmi.n	8005146 <__lo0bits+0x4e>
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	f100 0001 	add.w	r0, r0, #1
 8005144:	d003      	beq.n	800514e <__lo0bits+0x56>
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	4770      	bx	lr
 800514a:	2000      	movs	r0, #0
 800514c:	4770      	bx	lr
 800514e:	2020      	movs	r0, #32
 8005150:	4770      	bx	lr
	...

08005154 <__i2b>:
 8005154:	b510      	push	{r4, lr}
 8005156:	460c      	mov	r4, r1
 8005158:	2101      	movs	r1, #1
 800515a:	f7ff ff05 	bl	8004f68 <_Balloc>
 800515e:	4602      	mov	r2, r0
 8005160:	b928      	cbnz	r0, 800516e <__i2b+0x1a>
 8005162:	f240 1145 	movw	r1, #325	; 0x145
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <__i2b+0x24>)
 8005168:	4804      	ldr	r0, [pc, #16]	; (800517c <__i2b+0x28>)
 800516a:	f000 fd15 	bl	8005b98 <__assert_func>
 800516e:	2301      	movs	r3, #1
 8005170:	6144      	str	r4, [r0, #20]
 8005172:	6103      	str	r3, [r0, #16]
 8005174:	bd10      	pop	{r4, pc}
 8005176:	bf00      	nop
 8005178:	08005f14 	.word	0x08005f14
 800517c:	08005f25 	.word	0x08005f25

08005180 <__multiply>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	4691      	mov	r9, r2
 8005186:	690a      	ldr	r2, [r1, #16]
 8005188:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800518c:	460c      	mov	r4, r1
 800518e:	429a      	cmp	r2, r3
 8005190:	bfbe      	ittt	lt
 8005192:	460b      	movlt	r3, r1
 8005194:	464c      	movlt	r4, r9
 8005196:	4699      	movlt	r9, r3
 8005198:	6927      	ldr	r7, [r4, #16]
 800519a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800519e:	68a3      	ldr	r3, [r4, #8]
 80051a0:	6861      	ldr	r1, [r4, #4]
 80051a2:	eb07 060a 	add.w	r6, r7, sl
 80051a6:	42b3      	cmp	r3, r6
 80051a8:	b085      	sub	sp, #20
 80051aa:	bfb8      	it	lt
 80051ac:	3101      	addlt	r1, #1
 80051ae:	f7ff fedb 	bl	8004f68 <_Balloc>
 80051b2:	b930      	cbnz	r0, 80051c2 <__multiply+0x42>
 80051b4:	4602      	mov	r2, r0
 80051b6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80051ba:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <__multiply+0x148>)
 80051bc:	4843      	ldr	r0, [pc, #268]	; (80052cc <__multiply+0x14c>)
 80051be:	f000 fceb 	bl	8005b98 <__assert_func>
 80051c2:	f100 0514 	add.w	r5, r0, #20
 80051c6:	462b      	mov	r3, r5
 80051c8:	2200      	movs	r2, #0
 80051ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80051ce:	4543      	cmp	r3, r8
 80051d0:	d321      	bcc.n	8005216 <__multiply+0x96>
 80051d2:	f104 0314 	add.w	r3, r4, #20
 80051d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80051da:	f109 0314 	add.w	r3, r9, #20
 80051de:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80051e2:	9202      	str	r2, [sp, #8]
 80051e4:	1b3a      	subs	r2, r7, r4
 80051e6:	3a15      	subs	r2, #21
 80051e8:	f022 0203 	bic.w	r2, r2, #3
 80051ec:	3204      	adds	r2, #4
 80051ee:	f104 0115 	add.w	r1, r4, #21
 80051f2:	428f      	cmp	r7, r1
 80051f4:	bf38      	it	cc
 80051f6:	2204      	movcc	r2, #4
 80051f8:	9201      	str	r2, [sp, #4]
 80051fa:	9a02      	ldr	r2, [sp, #8]
 80051fc:	9303      	str	r3, [sp, #12]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d80c      	bhi.n	800521c <__multiply+0x9c>
 8005202:	2e00      	cmp	r6, #0
 8005204:	dd03      	ble.n	800520e <__multiply+0x8e>
 8005206:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800520a:	2b00      	cmp	r3, #0
 800520c:	d05a      	beq.n	80052c4 <__multiply+0x144>
 800520e:	6106      	str	r6, [r0, #16]
 8005210:	b005      	add	sp, #20
 8005212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005216:	f843 2b04 	str.w	r2, [r3], #4
 800521a:	e7d8      	b.n	80051ce <__multiply+0x4e>
 800521c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005220:	f1ba 0f00 	cmp.w	sl, #0
 8005224:	d023      	beq.n	800526e <__multiply+0xee>
 8005226:	46a9      	mov	r9, r5
 8005228:	f04f 0c00 	mov.w	ip, #0
 800522c:	f104 0e14 	add.w	lr, r4, #20
 8005230:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005234:	f8d9 1000 	ldr.w	r1, [r9]
 8005238:	fa1f fb82 	uxth.w	fp, r2
 800523c:	b289      	uxth	r1, r1
 800523e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005242:	4461      	add	r1, ip
 8005244:	f8d9 c000 	ldr.w	ip, [r9]
 8005248:	0c12      	lsrs	r2, r2, #16
 800524a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800524e:	fb0a c202 	mla	r2, sl, r2, ip
 8005252:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005256:	b289      	uxth	r1, r1
 8005258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800525c:	4577      	cmp	r7, lr
 800525e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005262:	f849 1b04 	str.w	r1, [r9], #4
 8005266:	d8e3      	bhi.n	8005230 <__multiply+0xb0>
 8005268:	9a01      	ldr	r2, [sp, #4]
 800526a:	f845 c002 	str.w	ip, [r5, r2]
 800526e:	9a03      	ldr	r2, [sp, #12]
 8005270:	3304      	adds	r3, #4
 8005272:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005276:	f1b9 0f00 	cmp.w	r9, #0
 800527a:	d021      	beq.n	80052c0 <__multiply+0x140>
 800527c:	46ae      	mov	lr, r5
 800527e:	f04f 0a00 	mov.w	sl, #0
 8005282:	6829      	ldr	r1, [r5, #0]
 8005284:	f104 0c14 	add.w	ip, r4, #20
 8005288:	f8bc b000 	ldrh.w	fp, [ip]
 800528c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005290:	b289      	uxth	r1, r1
 8005292:	fb09 220b 	mla	r2, r9, fp, r2
 8005296:	4452      	add	r2, sl
 8005298:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800529c:	f84e 1b04 	str.w	r1, [lr], #4
 80052a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80052a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80052a8:	f8be 1000 	ldrh.w	r1, [lr]
 80052ac:	4567      	cmp	r7, ip
 80052ae:	fb09 110a 	mla	r1, r9, sl, r1
 80052b2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80052b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80052ba:	d8e5      	bhi.n	8005288 <__multiply+0x108>
 80052bc:	9a01      	ldr	r2, [sp, #4]
 80052be:	50a9      	str	r1, [r5, r2]
 80052c0:	3504      	adds	r5, #4
 80052c2:	e79a      	b.n	80051fa <__multiply+0x7a>
 80052c4:	3e01      	subs	r6, #1
 80052c6:	e79c      	b.n	8005202 <__multiply+0x82>
 80052c8:	08005f14 	.word	0x08005f14
 80052cc:	08005f25 	.word	0x08005f25

080052d0 <__pow5mult>:
 80052d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d4:	4615      	mov	r5, r2
 80052d6:	f012 0203 	ands.w	r2, r2, #3
 80052da:	4606      	mov	r6, r0
 80052dc:	460f      	mov	r7, r1
 80052de:	d007      	beq.n	80052f0 <__pow5mult+0x20>
 80052e0:	4c25      	ldr	r4, [pc, #148]	; (8005378 <__pow5mult+0xa8>)
 80052e2:	3a01      	subs	r2, #1
 80052e4:	2300      	movs	r3, #0
 80052e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052ea:	f7ff fe9f 	bl	800502c <__multadd>
 80052ee:	4607      	mov	r7, r0
 80052f0:	10ad      	asrs	r5, r5, #2
 80052f2:	d03d      	beq.n	8005370 <__pow5mult+0xa0>
 80052f4:	69f4      	ldr	r4, [r6, #28]
 80052f6:	b97c      	cbnz	r4, 8005318 <__pow5mult+0x48>
 80052f8:	2010      	movs	r0, #16
 80052fa:	f7ff fd81 	bl	8004e00 <malloc>
 80052fe:	4602      	mov	r2, r0
 8005300:	61f0      	str	r0, [r6, #28]
 8005302:	b928      	cbnz	r0, 8005310 <__pow5mult+0x40>
 8005304:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005308:	4b1c      	ldr	r3, [pc, #112]	; (800537c <__pow5mult+0xac>)
 800530a:	481d      	ldr	r0, [pc, #116]	; (8005380 <__pow5mult+0xb0>)
 800530c:	f000 fc44 	bl	8005b98 <__assert_func>
 8005310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005314:	6004      	str	r4, [r0, #0]
 8005316:	60c4      	str	r4, [r0, #12]
 8005318:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800531c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005320:	b94c      	cbnz	r4, 8005336 <__pow5mult+0x66>
 8005322:	f240 2171 	movw	r1, #625	; 0x271
 8005326:	4630      	mov	r0, r6
 8005328:	f7ff ff14 	bl	8005154 <__i2b>
 800532c:	2300      	movs	r3, #0
 800532e:	4604      	mov	r4, r0
 8005330:	f8c8 0008 	str.w	r0, [r8, #8]
 8005334:	6003      	str	r3, [r0, #0]
 8005336:	f04f 0900 	mov.w	r9, #0
 800533a:	07eb      	lsls	r3, r5, #31
 800533c:	d50a      	bpl.n	8005354 <__pow5mult+0x84>
 800533e:	4639      	mov	r1, r7
 8005340:	4622      	mov	r2, r4
 8005342:	4630      	mov	r0, r6
 8005344:	f7ff ff1c 	bl	8005180 <__multiply>
 8005348:	4680      	mov	r8, r0
 800534a:	4639      	mov	r1, r7
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff fe4b 	bl	8004fe8 <_Bfree>
 8005352:	4647      	mov	r7, r8
 8005354:	106d      	asrs	r5, r5, #1
 8005356:	d00b      	beq.n	8005370 <__pow5mult+0xa0>
 8005358:	6820      	ldr	r0, [r4, #0]
 800535a:	b938      	cbnz	r0, 800536c <__pow5mult+0x9c>
 800535c:	4622      	mov	r2, r4
 800535e:	4621      	mov	r1, r4
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff ff0d 	bl	8005180 <__multiply>
 8005366:	6020      	str	r0, [r4, #0]
 8005368:	f8c0 9000 	str.w	r9, [r0]
 800536c:	4604      	mov	r4, r0
 800536e:	e7e4      	b.n	800533a <__pow5mult+0x6a>
 8005370:	4638      	mov	r0, r7
 8005372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005376:	bf00      	nop
 8005378:	08006070 	.word	0x08006070
 800537c:	08005ea5 	.word	0x08005ea5
 8005380:	08005f25 	.word	0x08005f25

08005384 <__lshift>:
 8005384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	460c      	mov	r4, r1
 800538a:	4607      	mov	r7, r0
 800538c:	4691      	mov	r9, r2
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	6849      	ldr	r1, [r1, #4]
 8005392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005396:	68a3      	ldr	r3, [r4, #8]
 8005398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800539c:	f108 0601 	add.w	r6, r8, #1
 80053a0:	42b3      	cmp	r3, r6
 80053a2:	db0b      	blt.n	80053bc <__lshift+0x38>
 80053a4:	4638      	mov	r0, r7
 80053a6:	f7ff fddf 	bl	8004f68 <_Balloc>
 80053aa:	4605      	mov	r5, r0
 80053ac:	b948      	cbnz	r0, 80053c2 <__lshift+0x3e>
 80053ae:	4602      	mov	r2, r0
 80053b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80053b4:	4b27      	ldr	r3, [pc, #156]	; (8005454 <__lshift+0xd0>)
 80053b6:	4828      	ldr	r0, [pc, #160]	; (8005458 <__lshift+0xd4>)
 80053b8:	f000 fbee 	bl	8005b98 <__assert_func>
 80053bc:	3101      	adds	r1, #1
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	e7ee      	b.n	80053a0 <__lshift+0x1c>
 80053c2:	2300      	movs	r3, #0
 80053c4:	f100 0114 	add.w	r1, r0, #20
 80053c8:	f100 0210 	add.w	r2, r0, #16
 80053cc:	4618      	mov	r0, r3
 80053ce:	4553      	cmp	r3, sl
 80053d0:	db33      	blt.n	800543a <__lshift+0xb6>
 80053d2:	6920      	ldr	r0, [r4, #16]
 80053d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053d8:	f104 0314 	add.w	r3, r4, #20
 80053dc:	f019 091f 	ands.w	r9, r9, #31
 80053e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80053e8:	d02b      	beq.n	8005442 <__lshift+0xbe>
 80053ea:	468a      	mov	sl, r1
 80053ec:	2200      	movs	r2, #0
 80053ee:	f1c9 0e20 	rsb	lr, r9, #32
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	fa00 f009 	lsl.w	r0, r0, r9
 80053f8:	4310      	orrs	r0, r2
 80053fa:	f84a 0b04 	str.w	r0, [sl], #4
 80053fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005402:	459c      	cmp	ip, r3
 8005404:	fa22 f20e 	lsr.w	r2, r2, lr
 8005408:	d8f3      	bhi.n	80053f2 <__lshift+0x6e>
 800540a:	ebac 0304 	sub.w	r3, ip, r4
 800540e:	3b15      	subs	r3, #21
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	3304      	adds	r3, #4
 8005416:	f104 0015 	add.w	r0, r4, #21
 800541a:	4584      	cmp	ip, r0
 800541c:	bf38      	it	cc
 800541e:	2304      	movcc	r3, #4
 8005420:	50ca      	str	r2, [r1, r3]
 8005422:	b10a      	cbz	r2, 8005428 <__lshift+0xa4>
 8005424:	f108 0602 	add.w	r6, r8, #2
 8005428:	3e01      	subs	r6, #1
 800542a:	4638      	mov	r0, r7
 800542c:	4621      	mov	r1, r4
 800542e:	612e      	str	r6, [r5, #16]
 8005430:	f7ff fdda 	bl	8004fe8 <_Bfree>
 8005434:	4628      	mov	r0, r5
 8005436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543a:	f842 0f04 	str.w	r0, [r2, #4]!
 800543e:	3301      	adds	r3, #1
 8005440:	e7c5      	b.n	80053ce <__lshift+0x4a>
 8005442:	3904      	subs	r1, #4
 8005444:	f853 2b04 	ldr.w	r2, [r3], #4
 8005448:	459c      	cmp	ip, r3
 800544a:	f841 2f04 	str.w	r2, [r1, #4]!
 800544e:	d8f9      	bhi.n	8005444 <__lshift+0xc0>
 8005450:	e7ea      	b.n	8005428 <__lshift+0xa4>
 8005452:	bf00      	nop
 8005454:	08005f14 	.word	0x08005f14
 8005458:	08005f25 	.word	0x08005f25

0800545c <__mcmp>:
 800545c:	4603      	mov	r3, r0
 800545e:	690a      	ldr	r2, [r1, #16]
 8005460:	6900      	ldr	r0, [r0, #16]
 8005462:	b530      	push	{r4, r5, lr}
 8005464:	1a80      	subs	r0, r0, r2
 8005466:	d10d      	bne.n	8005484 <__mcmp+0x28>
 8005468:	3314      	adds	r3, #20
 800546a:	3114      	adds	r1, #20
 800546c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005470:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800547c:	4295      	cmp	r5, r2
 800547e:	d002      	beq.n	8005486 <__mcmp+0x2a>
 8005480:	d304      	bcc.n	800548c <__mcmp+0x30>
 8005482:	2001      	movs	r0, #1
 8005484:	bd30      	pop	{r4, r5, pc}
 8005486:	42a3      	cmp	r3, r4
 8005488:	d3f4      	bcc.n	8005474 <__mcmp+0x18>
 800548a:	e7fb      	b.n	8005484 <__mcmp+0x28>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	e7f8      	b.n	8005484 <__mcmp+0x28>
	...

08005494 <__mdiff>:
 8005494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	460d      	mov	r5, r1
 800549a:	4607      	mov	r7, r0
 800549c:	4611      	mov	r1, r2
 800549e:	4628      	mov	r0, r5
 80054a0:	4614      	mov	r4, r2
 80054a2:	f7ff ffdb 	bl	800545c <__mcmp>
 80054a6:	1e06      	subs	r6, r0, #0
 80054a8:	d111      	bne.n	80054ce <__mdiff+0x3a>
 80054aa:	4631      	mov	r1, r6
 80054ac:	4638      	mov	r0, r7
 80054ae:	f7ff fd5b 	bl	8004f68 <_Balloc>
 80054b2:	4602      	mov	r2, r0
 80054b4:	b928      	cbnz	r0, 80054c2 <__mdiff+0x2e>
 80054b6:	f240 2137 	movw	r1, #567	; 0x237
 80054ba:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <__mdiff+0x110>)
 80054bc:	483a      	ldr	r0, [pc, #232]	; (80055a8 <__mdiff+0x114>)
 80054be:	f000 fb6b 	bl	8005b98 <__assert_func>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80054c8:	4610      	mov	r0, r2
 80054ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ce:	bfa4      	itt	ge
 80054d0:	4623      	movge	r3, r4
 80054d2:	462c      	movge	r4, r5
 80054d4:	4638      	mov	r0, r7
 80054d6:	6861      	ldr	r1, [r4, #4]
 80054d8:	bfa6      	itte	ge
 80054da:	461d      	movge	r5, r3
 80054dc:	2600      	movge	r6, #0
 80054de:	2601      	movlt	r6, #1
 80054e0:	f7ff fd42 	bl	8004f68 <_Balloc>
 80054e4:	4602      	mov	r2, r0
 80054e6:	b918      	cbnz	r0, 80054f0 <__mdiff+0x5c>
 80054e8:	f240 2145 	movw	r1, #581	; 0x245
 80054ec:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <__mdiff+0x110>)
 80054ee:	e7e5      	b.n	80054bc <__mdiff+0x28>
 80054f0:	f102 0814 	add.w	r8, r2, #20
 80054f4:	46c2      	mov	sl, r8
 80054f6:	f04f 0c00 	mov.w	ip, #0
 80054fa:	6927      	ldr	r7, [r4, #16]
 80054fc:	60c6      	str	r6, [r0, #12]
 80054fe:	692e      	ldr	r6, [r5, #16]
 8005500:	f104 0014 	add.w	r0, r4, #20
 8005504:	f105 0914 	add.w	r9, r5, #20
 8005508:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800550c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005510:	3410      	adds	r4, #16
 8005512:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005516:	f859 3b04 	ldr.w	r3, [r9], #4
 800551a:	fa1f f18b 	uxth.w	r1, fp
 800551e:	4461      	add	r1, ip
 8005520:	fa1f fc83 	uxth.w	ip, r3
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	eba1 010c 	sub.w	r1, r1, ip
 800552a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800552e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005532:	b289      	uxth	r1, r1
 8005534:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005538:	454e      	cmp	r6, r9
 800553a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800553e:	f84a 1b04 	str.w	r1, [sl], #4
 8005542:	d8e6      	bhi.n	8005512 <__mdiff+0x7e>
 8005544:	1b73      	subs	r3, r6, r5
 8005546:	3b15      	subs	r3, #21
 8005548:	f023 0303 	bic.w	r3, r3, #3
 800554c:	3515      	adds	r5, #21
 800554e:	3304      	adds	r3, #4
 8005550:	42ae      	cmp	r6, r5
 8005552:	bf38      	it	cc
 8005554:	2304      	movcc	r3, #4
 8005556:	4418      	add	r0, r3
 8005558:	4443      	add	r3, r8
 800555a:	461e      	mov	r6, r3
 800555c:	4605      	mov	r5, r0
 800555e:	4575      	cmp	r5, lr
 8005560:	d30e      	bcc.n	8005580 <__mdiff+0xec>
 8005562:	f10e 0103 	add.w	r1, lr, #3
 8005566:	1a09      	subs	r1, r1, r0
 8005568:	f021 0103 	bic.w	r1, r1, #3
 800556c:	3803      	subs	r0, #3
 800556e:	4586      	cmp	lr, r0
 8005570:	bf38      	it	cc
 8005572:	2100      	movcc	r1, #0
 8005574:	440b      	add	r3, r1
 8005576:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800557a:	b189      	cbz	r1, 80055a0 <__mdiff+0x10c>
 800557c:	6117      	str	r7, [r2, #16]
 800557e:	e7a3      	b.n	80054c8 <__mdiff+0x34>
 8005580:	f855 8b04 	ldr.w	r8, [r5], #4
 8005584:	fa1f f188 	uxth.w	r1, r8
 8005588:	4461      	add	r1, ip
 800558a:	140c      	asrs	r4, r1, #16
 800558c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005590:	b289      	uxth	r1, r1
 8005592:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005596:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800559a:	f846 1b04 	str.w	r1, [r6], #4
 800559e:	e7de      	b.n	800555e <__mdiff+0xca>
 80055a0:	3f01      	subs	r7, #1
 80055a2:	e7e8      	b.n	8005576 <__mdiff+0xe2>
 80055a4:	08005f14 	.word	0x08005f14
 80055a8:	08005f25 	.word	0x08005f25

080055ac <__d2b>:
 80055ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ae:	2101      	movs	r1, #1
 80055b0:	4617      	mov	r7, r2
 80055b2:	461c      	mov	r4, r3
 80055b4:	9e08      	ldr	r6, [sp, #32]
 80055b6:	f7ff fcd7 	bl	8004f68 <_Balloc>
 80055ba:	4605      	mov	r5, r0
 80055bc:	b930      	cbnz	r0, 80055cc <__d2b+0x20>
 80055be:	4602      	mov	r2, r0
 80055c0:	f240 310f 	movw	r1, #783	; 0x30f
 80055c4:	4b22      	ldr	r3, [pc, #136]	; (8005650 <__d2b+0xa4>)
 80055c6:	4823      	ldr	r0, [pc, #140]	; (8005654 <__d2b+0xa8>)
 80055c8:	f000 fae6 	bl	8005b98 <__assert_func>
 80055cc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80055d0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80055d4:	bb24      	cbnz	r4, 8005620 <__d2b+0x74>
 80055d6:	2f00      	cmp	r7, #0
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	d026      	beq.n	800562a <__d2b+0x7e>
 80055dc:	4668      	mov	r0, sp
 80055de:	9700      	str	r7, [sp, #0]
 80055e0:	f7ff fd8a 	bl	80050f8 <__lo0bits>
 80055e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80055e8:	b1e8      	cbz	r0, 8005626 <__d2b+0x7a>
 80055ea:	f1c0 0320 	rsb	r3, r0, #32
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	430b      	orrs	r3, r1
 80055f4:	40c2      	lsrs	r2, r0
 80055f6:	616b      	str	r3, [r5, #20]
 80055f8:	9201      	str	r2, [sp, #4]
 80055fa:	9b01      	ldr	r3, [sp, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf14      	ite	ne
 8005600:	2102      	movne	r1, #2
 8005602:	2101      	moveq	r1, #1
 8005604:	61ab      	str	r3, [r5, #24]
 8005606:	6129      	str	r1, [r5, #16]
 8005608:	b1bc      	cbz	r4, 800563a <__d2b+0x8e>
 800560a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800560e:	4404      	add	r4, r0
 8005610:	6034      	str	r4, [r6, #0]
 8005612:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005618:	6018      	str	r0, [r3, #0]
 800561a:	4628      	mov	r0, r5
 800561c:	b003      	add	sp, #12
 800561e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005624:	e7d7      	b.n	80055d6 <__d2b+0x2a>
 8005626:	6169      	str	r1, [r5, #20]
 8005628:	e7e7      	b.n	80055fa <__d2b+0x4e>
 800562a:	a801      	add	r0, sp, #4
 800562c:	f7ff fd64 	bl	80050f8 <__lo0bits>
 8005630:	9b01      	ldr	r3, [sp, #4]
 8005632:	2101      	movs	r1, #1
 8005634:	616b      	str	r3, [r5, #20]
 8005636:	3020      	adds	r0, #32
 8005638:	e7e5      	b.n	8005606 <__d2b+0x5a>
 800563a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800563e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005642:	6030      	str	r0, [r6, #0]
 8005644:	6918      	ldr	r0, [r3, #16]
 8005646:	f7ff fd37 	bl	80050b8 <__hi0bits>
 800564a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800564e:	e7e2      	b.n	8005616 <__d2b+0x6a>
 8005650:	08005f14 	.word	0x08005f14
 8005654:	08005f25 	.word	0x08005f25

08005658 <__sfputc_r>:
 8005658:	6893      	ldr	r3, [r2, #8]
 800565a:	b410      	push	{r4}
 800565c:	3b01      	subs	r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	6093      	str	r3, [r2, #8]
 8005662:	da07      	bge.n	8005674 <__sfputc_r+0x1c>
 8005664:	6994      	ldr	r4, [r2, #24]
 8005666:	42a3      	cmp	r3, r4
 8005668:	db01      	blt.n	800566e <__sfputc_r+0x16>
 800566a:	290a      	cmp	r1, #10
 800566c:	d102      	bne.n	8005674 <__sfputc_r+0x1c>
 800566e:	bc10      	pop	{r4}
 8005670:	f000 b9de 	b.w	8005a30 <__swbuf_r>
 8005674:	6813      	ldr	r3, [r2, #0]
 8005676:	1c58      	adds	r0, r3, #1
 8005678:	6010      	str	r0, [r2, #0]
 800567a:	7019      	strb	r1, [r3, #0]
 800567c:	4608      	mov	r0, r1
 800567e:	bc10      	pop	{r4}
 8005680:	4770      	bx	lr

08005682 <__sfputs_r>:
 8005682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005684:	4606      	mov	r6, r0
 8005686:	460f      	mov	r7, r1
 8005688:	4614      	mov	r4, r2
 800568a:	18d5      	adds	r5, r2, r3
 800568c:	42ac      	cmp	r4, r5
 800568e:	d101      	bne.n	8005694 <__sfputs_r+0x12>
 8005690:	2000      	movs	r0, #0
 8005692:	e007      	b.n	80056a4 <__sfputs_r+0x22>
 8005694:	463a      	mov	r2, r7
 8005696:	4630      	mov	r0, r6
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	f7ff ffdc 	bl	8005658 <__sfputc_r>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d1f3      	bne.n	800568c <__sfputs_r+0xa>
 80056a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056a8 <_vfiprintf_r>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	460d      	mov	r5, r1
 80056ae:	4614      	mov	r4, r2
 80056b0:	4698      	mov	r8, r3
 80056b2:	4606      	mov	r6, r0
 80056b4:	b09d      	sub	sp, #116	; 0x74
 80056b6:	b118      	cbz	r0, 80056c0 <_vfiprintf_r+0x18>
 80056b8:	6a03      	ldr	r3, [r0, #32]
 80056ba:	b90b      	cbnz	r3, 80056c0 <_vfiprintf_r+0x18>
 80056bc:	f7fe fbd2 	bl	8003e64 <__sinit>
 80056c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c2:	07d9      	lsls	r1, r3, #31
 80056c4:	d405      	bmi.n	80056d2 <_vfiprintf_r+0x2a>
 80056c6:	89ab      	ldrh	r3, [r5, #12]
 80056c8:	059a      	lsls	r2, r3, #22
 80056ca:	d402      	bmi.n	80056d2 <_vfiprintf_r+0x2a>
 80056cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ce:	f7fe fcd2 	bl	8004076 <__retarget_lock_acquire_recursive>
 80056d2:	89ab      	ldrh	r3, [r5, #12]
 80056d4:	071b      	lsls	r3, r3, #28
 80056d6:	d501      	bpl.n	80056dc <_vfiprintf_r+0x34>
 80056d8:	692b      	ldr	r3, [r5, #16]
 80056da:	b99b      	cbnz	r3, 8005704 <_vfiprintf_r+0x5c>
 80056dc:	4629      	mov	r1, r5
 80056de:	4630      	mov	r0, r6
 80056e0:	f000 f9e4 	bl	8005aac <__swsetup_r>
 80056e4:	b170      	cbz	r0, 8005704 <_vfiprintf_r+0x5c>
 80056e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e8:	07dc      	lsls	r4, r3, #31
 80056ea:	d504      	bpl.n	80056f6 <_vfiprintf_r+0x4e>
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	b01d      	add	sp, #116	; 0x74
 80056f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	0598      	lsls	r0, r3, #22
 80056fa:	d4f7      	bmi.n	80056ec <_vfiprintf_r+0x44>
 80056fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056fe:	f7fe fcbb 	bl	8004078 <__retarget_lock_release_recursive>
 8005702:	e7f3      	b.n	80056ec <_vfiprintf_r+0x44>
 8005704:	2300      	movs	r3, #0
 8005706:	9309      	str	r3, [sp, #36]	; 0x24
 8005708:	2320      	movs	r3, #32
 800570a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800570e:	2330      	movs	r3, #48	; 0x30
 8005710:	f04f 0901 	mov.w	r9, #1
 8005714:	f8cd 800c 	str.w	r8, [sp, #12]
 8005718:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80058c8 <_vfiprintf_r+0x220>
 800571c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005720:	4623      	mov	r3, r4
 8005722:	469a      	mov	sl, r3
 8005724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005728:	b10a      	cbz	r2, 800572e <_vfiprintf_r+0x86>
 800572a:	2a25      	cmp	r2, #37	; 0x25
 800572c:	d1f9      	bne.n	8005722 <_vfiprintf_r+0x7a>
 800572e:	ebba 0b04 	subs.w	fp, sl, r4
 8005732:	d00b      	beq.n	800574c <_vfiprintf_r+0xa4>
 8005734:	465b      	mov	r3, fp
 8005736:	4622      	mov	r2, r4
 8005738:	4629      	mov	r1, r5
 800573a:	4630      	mov	r0, r6
 800573c:	f7ff ffa1 	bl	8005682 <__sfputs_r>
 8005740:	3001      	adds	r0, #1
 8005742:	f000 80a9 	beq.w	8005898 <_vfiprintf_r+0x1f0>
 8005746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005748:	445a      	add	r2, fp
 800574a:	9209      	str	r2, [sp, #36]	; 0x24
 800574c:	f89a 3000 	ldrb.w	r3, [sl]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80a1 	beq.w	8005898 <_vfiprintf_r+0x1f0>
 8005756:	2300      	movs	r3, #0
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005760:	f10a 0a01 	add.w	sl, sl, #1
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	9307      	str	r3, [sp, #28]
 8005768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800576c:	931a      	str	r3, [sp, #104]	; 0x68
 800576e:	4654      	mov	r4, sl
 8005770:	2205      	movs	r2, #5
 8005772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005776:	4854      	ldr	r0, [pc, #336]	; (80058c8 <_vfiprintf_r+0x220>)
 8005778:	f7fe fc7f 	bl	800407a <memchr>
 800577c:	9a04      	ldr	r2, [sp, #16]
 800577e:	b9d8      	cbnz	r0, 80057b8 <_vfiprintf_r+0x110>
 8005780:	06d1      	lsls	r1, r2, #27
 8005782:	bf44      	itt	mi
 8005784:	2320      	movmi	r3, #32
 8005786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800578a:	0713      	lsls	r3, r2, #28
 800578c:	bf44      	itt	mi
 800578e:	232b      	movmi	r3, #43	; 0x2b
 8005790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005794:	f89a 3000 	ldrb.w	r3, [sl]
 8005798:	2b2a      	cmp	r3, #42	; 0x2a
 800579a:	d015      	beq.n	80057c8 <_vfiprintf_r+0x120>
 800579c:	4654      	mov	r4, sl
 800579e:	2000      	movs	r0, #0
 80057a0:	f04f 0c0a 	mov.w	ip, #10
 80057a4:	9a07      	ldr	r2, [sp, #28]
 80057a6:	4621      	mov	r1, r4
 80057a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ac:	3b30      	subs	r3, #48	; 0x30
 80057ae:	2b09      	cmp	r3, #9
 80057b0:	d94d      	bls.n	800584e <_vfiprintf_r+0x1a6>
 80057b2:	b1b0      	cbz	r0, 80057e2 <_vfiprintf_r+0x13a>
 80057b4:	9207      	str	r2, [sp, #28]
 80057b6:	e014      	b.n	80057e2 <_vfiprintf_r+0x13a>
 80057b8:	eba0 0308 	sub.w	r3, r0, r8
 80057bc:	fa09 f303 	lsl.w	r3, r9, r3
 80057c0:	4313      	orrs	r3, r2
 80057c2:	46a2      	mov	sl, r4
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	e7d2      	b.n	800576e <_vfiprintf_r+0xc6>
 80057c8:	9b03      	ldr	r3, [sp, #12]
 80057ca:	1d19      	adds	r1, r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	9103      	str	r1, [sp, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bfbb      	ittet	lt
 80057d4:	425b      	neglt	r3, r3
 80057d6:	f042 0202 	orrlt.w	r2, r2, #2
 80057da:	9307      	strge	r3, [sp, #28]
 80057dc:	9307      	strlt	r3, [sp, #28]
 80057de:	bfb8      	it	lt
 80057e0:	9204      	strlt	r2, [sp, #16]
 80057e2:	7823      	ldrb	r3, [r4, #0]
 80057e4:	2b2e      	cmp	r3, #46	; 0x2e
 80057e6:	d10c      	bne.n	8005802 <_vfiprintf_r+0x15a>
 80057e8:	7863      	ldrb	r3, [r4, #1]
 80057ea:	2b2a      	cmp	r3, #42	; 0x2a
 80057ec:	d134      	bne.n	8005858 <_vfiprintf_r+0x1b0>
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	3402      	adds	r4, #2
 80057f2:	1d1a      	adds	r2, r3, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	9203      	str	r2, [sp, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bfb8      	it	lt
 80057fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005800:	9305      	str	r3, [sp, #20]
 8005802:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058cc <_vfiprintf_r+0x224>
 8005806:	2203      	movs	r2, #3
 8005808:	4650      	mov	r0, sl
 800580a:	7821      	ldrb	r1, [r4, #0]
 800580c:	f7fe fc35 	bl	800407a <memchr>
 8005810:	b138      	cbz	r0, 8005822 <_vfiprintf_r+0x17a>
 8005812:	2240      	movs	r2, #64	; 0x40
 8005814:	9b04      	ldr	r3, [sp, #16]
 8005816:	eba0 000a 	sub.w	r0, r0, sl
 800581a:	4082      	lsls	r2, r0
 800581c:	4313      	orrs	r3, r2
 800581e:	3401      	adds	r4, #1
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005826:	2206      	movs	r2, #6
 8005828:	4829      	ldr	r0, [pc, #164]	; (80058d0 <_vfiprintf_r+0x228>)
 800582a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800582e:	f7fe fc24 	bl	800407a <memchr>
 8005832:	2800      	cmp	r0, #0
 8005834:	d03f      	beq.n	80058b6 <_vfiprintf_r+0x20e>
 8005836:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <_vfiprintf_r+0x22c>)
 8005838:	bb1b      	cbnz	r3, 8005882 <_vfiprintf_r+0x1da>
 800583a:	9b03      	ldr	r3, [sp, #12]
 800583c:	3307      	adds	r3, #7
 800583e:	f023 0307 	bic.w	r3, r3, #7
 8005842:	3308      	adds	r3, #8
 8005844:	9303      	str	r3, [sp, #12]
 8005846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005848:	443b      	add	r3, r7
 800584a:	9309      	str	r3, [sp, #36]	; 0x24
 800584c:	e768      	b.n	8005720 <_vfiprintf_r+0x78>
 800584e:	460c      	mov	r4, r1
 8005850:	2001      	movs	r0, #1
 8005852:	fb0c 3202 	mla	r2, ip, r2, r3
 8005856:	e7a6      	b.n	80057a6 <_vfiprintf_r+0xfe>
 8005858:	2300      	movs	r3, #0
 800585a:	f04f 0c0a 	mov.w	ip, #10
 800585e:	4619      	mov	r1, r3
 8005860:	3401      	adds	r4, #1
 8005862:	9305      	str	r3, [sp, #20]
 8005864:	4620      	mov	r0, r4
 8005866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800586a:	3a30      	subs	r2, #48	; 0x30
 800586c:	2a09      	cmp	r2, #9
 800586e:	d903      	bls.n	8005878 <_vfiprintf_r+0x1d0>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0c6      	beq.n	8005802 <_vfiprintf_r+0x15a>
 8005874:	9105      	str	r1, [sp, #20]
 8005876:	e7c4      	b.n	8005802 <_vfiprintf_r+0x15a>
 8005878:	4604      	mov	r4, r0
 800587a:	2301      	movs	r3, #1
 800587c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005880:	e7f0      	b.n	8005864 <_vfiprintf_r+0x1bc>
 8005882:	ab03      	add	r3, sp, #12
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	462a      	mov	r2, r5
 8005888:	4630      	mov	r0, r6
 800588a:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <_vfiprintf_r+0x230>)
 800588c:	a904      	add	r1, sp, #16
 800588e:	f7fd fe9b 	bl	80035c8 <_printf_float>
 8005892:	4607      	mov	r7, r0
 8005894:	1c78      	adds	r0, r7, #1
 8005896:	d1d6      	bne.n	8005846 <_vfiprintf_r+0x19e>
 8005898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800589a:	07d9      	lsls	r1, r3, #31
 800589c:	d405      	bmi.n	80058aa <_vfiprintf_r+0x202>
 800589e:	89ab      	ldrh	r3, [r5, #12]
 80058a0:	059a      	lsls	r2, r3, #22
 80058a2:	d402      	bmi.n	80058aa <_vfiprintf_r+0x202>
 80058a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058a6:	f7fe fbe7 	bl	8004078 <__retarget_lock_release_recursive>
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	065b      	lsls	r3, r3, #25
 80058ae:	f53f af1d 	bmi.w	80056ec <_vfiprintf_r+0x44>
 80058b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058b4:	e71c      	b.n	80056f0 <_vfiprintf_r+0x48>
 80058b6:	ab03      	add	r3, sp, #12
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	462a      	mov	r2, r5
 80058bc:	4630      	mov	r0, r6
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <_vfiprintf_r+0x230>)
 80058c0:	a904      	add	r1, sp, #16
 80058c2:	f7fe f921 	bl	8003b08 <_printf_i>
 80058c6:	e7e4      	b.n	8005892 <_vfiprintf_r+0x1ea>
 80058c8:	0800607c 	.word	0x0800607c
 80058cc:	08006082 	.word	0x08006082
 80058d0:	08006086 	.word	0x08006086
 80058d4:	080035c9 	.word	0x080035c9
 80058d8:	08005683 	.word	0x08005683

080058dc <__sflush_r>:
 80058dc:	898a      	ldrh	r2, [r1, #12]
 80058de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e0:	4605      	mov	r5, r0
 80058e2:	0710      	lsls	r0, r2, #28
 80058e4:	460c      	mov	r4, r1
 80058e6:	d457      	bmi.n	8005998 <__sflush_r+0xbc>
 80058e8:	684b      	ldr	r3, [r1, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	dc04      	bgt.n	80058f8 <__sflush_r+0x1c>
 80058ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dc01      	bgt.n	80058f8 <__sflush_r+0x1c>
 80058f4:	2000      	movs	r0, #0
 80058f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	d0fa      	beq.n	80058f4 <__sflush_r+0x18>
 80058fe:	2300      	movs	r3, #0
 8005900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005904:	682f      	ldr	r7, [r5, #0]
 8005906:	6a21      	ldr	r1, [r4, #32]
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	d032      	beq.n	8005972 <__sflush_r+0x96>
 800590c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	075a      	lsls	r2, r3, #29
 8005912:	d505      	bpl.n	8005920 <__sflush_r+0x44>
 8005914:	6863      	ldr	r3, [r4, #4]
 8005916:	1ac0      	subs	r0, r0, r3
 8005918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800591a:	b10b      	cbz	r3, 8005920 <__sflush_r+0x44>
 800591c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800591e:	1ac0      	subs	r0, r0, r3
 8005920:	2300      	movs	r3, #0
 8005922:	4602      	mov	r2, r0
 8005924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005926:	4628      	mov	r0, r5
 8005928:	6a21      	ldr	r1, [r4, #32]
 800592a:	47b0      	blx	r6
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	d106      	bne.n	8005940 <__sflush_r+0x64>
 8005932:	6829      	ldr	r1, [r5, #0]
 8005934:	291d      	cmp	r1, #29
 8005936:	d82b      	bhi.n	8005990 <__sflush_r+0xb4>
 8005938:	4a28      	ldr	r2, [pc, #160]	; (80059dc <__sflush_r+0x100>)
 800593a:	410a      	asrs	r2, r1
 800593c:	07d6      	lsls	r6, r2, #31
 800593e:	d427      	bmi.n	8005990 <__sflush_r+0xb4>
 8005940:	2200      	movs	r2, #0
 8005942:	6062      	str	r2, [r4, #4]
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	04d9      	lsls	r1, r3, #19
 8005948:	6022      	str	r2, [r4, #0]
 800594a:	d504      	bpl.n	8005956 <__sflush_r+0x7a>
 800594c:	1c42      	adds	r2, r0, #1
 800594e:	d101      	bne.n	8005954 <__sflush_r+0x78>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b903      	cbnz	r3, 8005956 <__sflush_r+0x7a>
 8005954:	6560      	str	r0, [r4, #84]	; 0x54
 8005956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005958:	602f      	str	r7, [r5, #0]
 800595a:	2900      	cmp	r1, #0
 800595c:	d0ca      	beq.n	80058f4 <__sflush_r+0x18>
 800595e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005962:	4299      	cmp	r1, r3
 8005964:	d002      	beq.n	800596c <__sflush_r+0x90>
 8005966:	4628      	mov	r0, r5
 8005968:	f7ff fa02 	bl	8004d70 <_free_r>
 800596c:	2000      	movs	r0, #0
 800596e:	6360      	str	r0, [r4, #52]	; 0x34
 8005970:	e7c1      	b.n	80058f6 <__sflush_r+0x1a>
 8005972:	2301      	movs	r3, #1
 8005974:	4628      	mov	r0, r5
 8005976:	47b0      	blx	r6
 8005978:	1c41      	adds	r1, r0, #1
 800597a:	d1c8      	bne.n	800590e <__sflush_r+0x32>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0c5      	beq.n	800590e <__sflush_r+0x32>
 8005982:	2b1d      	cmp	r3, #29
 8005984:	d001      	beq.n	800598a <__sflush_r+0xae>
 8005986:	2b16      	cmp	r3, #22
 8005988:	d101      	bne.n	800598e <__sflush_r+0xb2>
 800598a:	602f      	str	r7, [r5, #0]
 800598c:	e7b2      	b.n	80058f4 <__sflush_r+0x18>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	e7ae      	b.n	80058f6 <__sflush_r+0x1a>
 8005998:	690f      	ldr	r7, [r1, #16]
 800599a:	2f00      	cmp	r7, #0
 800599c:	d0aa      	beq.n	80058f4 <__sflush_r+0x18>
 800599e:	0793      	lsls	r3, r2, #30
 80059a0:	bf18      	it	ne
 80059a2:	2300      	movne	r3, #0
 80059a4:	680e      	ldr	r6, [r1, #0]
 80059a6:	bf08      	it	eq
 80059a8:	694b      	ldreq	r3, [r1, #20]
 80059aa:	1bf6      	subs	r6, r6, r7
 80059ac:	600f      	str	r7, [r1, #0]
 80059ae:	608b      	str	r3, [r1, #8]
 80059b0:	2e00      	cmp	r6, #0
 80059b2:	dd9f      	ble.n	80058f4 <__sflush_r+0x18>
 80059b4:	4633      	mov	r3, r6
 80059b6:	463a      	mov	r2, r7
 80059b8:	4628      	mov	r0, r5
 80059ba:	6a21      	ldr	r1, [r4, #32]
 80059bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80059c0:	47e0      	blx	ip
 80059c2:	2800      	cmp	r0, #0
 80059c4:	dc06      	bgt.n	80059d4 <__sflush_r+0xf8>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	e790      	b.n	80058f6 <__sflush_r+0x1a>
 80059d4:	4407      	add	r7, r0
 80059d6:	1a36      	subs	r6, r6, r0
 80059d8:	e7ea      	b.n	80059b0 <__sflush_r+0xd4>
 80059da:	bf00      	nop
 80059dc:	dfbffffe 	.word	0xdfbffffe

080059e0 <_fflush_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	690b      	ldr	r3, [r1, #16]
 80059e4:	4605      	mov	r5, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	b913      	cbnz	r3, 80059f0 <_fflush_r+0x10>
 80059ea:	2500      	movs	r5, #0
 80059ec:	4628      	mov	r0, r5
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	b118      	cbz	r0, 80059fa <_fflush_r+0x1a>
 80059f2:	6a03      	ldr	r3, [r0, #32]
 80059f4:	b90b      	cbnz	r3, 80059fa <_fflush_r+0x1a>
 80059f6:	f7fe fa35 	bl	8003e64 <__sinit>
 80059fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f3      	beq.n	80059ea <_fflush_r+0xa>
 8005a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a04:	07d0      	lsls	r0, r2, #31
 8005a06:	d404      	bmi.n	8005a12 <_fflush_r+0x32>
 8005a08:	0599      	lsls	r1, r3, #22
 8005a0a:	d402      	bmi.n	8005a12 <_fflush_r+0x32>
 8005a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a0e:	f7fe fb32 	bl	8004076 <__retarget_lock_acquire_recursive>
 8005a12:	4628      	mov	r0, r5
 8005a14:	4621      	mov	r1, r4
 8005a16:	f7ff ff61 	bl	80058dc <__sflush_r>
 8005a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	07da      	lsls	r2, r3, #31
 8005a20:	d4e4      	bmi.n	80059ec <_fflush_r+0xc>
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	059b      	lsls	r3, r3, #22
 8005a26:	d4e1      	bmi.n	80059ec <_fflush_r+0xc>
 8005a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a2a:	f7fe fb25 	bl	8004078 <__retarget_lock_release_recursive>
 8005a2e:	e7dd      	b.n	80059ec <_fflush_r+0xc>

08005a30 <__swbuf_r>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	460e      	mov	r6, r1
 8005a34:	4614      	mov	r4, r2
 8005a36:	4605      	mov	r5, r0
 8005a38:	b118      	cbz	r0, 8005a42 <__swbuf_r+0x12>
 8005a3a:	6a03      	ldr	r3, [r0, #32]
 8005a3c:	b90b      	cbnz	r3, 8005a42 <__swbuf_r+0x12>
 8005a3e:	f7fe fa11 	bl	8003e64 <__sinit>
 8005a42:	69a3      	ldr	r3, [r4, #24]
 8005a44:	60a3      	str	r3, [r4, #8]
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	071a      	lsls	r2, r3, #28
 8005a4a:	d525      	bpl.n	8005a98 <__swbuf_r+0x68>
 8005a4c:	6923      	ldr	r3, [r4, #16]
 8005a4e:	b31b      	cbz	r3, 8005a98 <__swbuf_r+0x68>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	6922      	ldr	r2, [r4, #16]
 8005a54:	b2f6      	uxtb	r6, r6
 8005a56:	1a98      	subs	r0, r3, r2
 8005a58:	6963      	ldr	r3, [r4, #20]
 8005a5a:	4637      	mov	r7, r6
 8005a5c:	4283      	cmp	r3, r0
 8005a5e:	dc04      	bgt.n	8005a6a <__swbuf_r+0x3a>
 8005a60:	4621      	mov	r1, r4
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7ff ffbc 	bl	80059e0 <_fflush_r>
 8005a68:	b9e0      	cbnz	r0, 8005aa4 <__swbuf_r+0x74>
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	6022      	str	r2, [r4, #0]
 8005a76:	701e      	strb	r6, [r3, #0]
 8005a78:	6962      	ldr	r2, [r4, #20]
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d004      	beq.n	8005a8a <__swbuf_r+0x5a>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	07db      	lsls	r3, r3, #31
 8005a84:	d506      	bpl.n	8005a94 <__swbuf_r+0x64>
 8005a86:	2e0a      	cmp	r6, #10
 8005a88:	d104      	bne.n	8005a94 <__swbuf_r+0x64>
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f7ff ffa7 	bl	80059e0 <_fflush_r>
 8005a92:	b938      	cbnz	r0, 8005aa4 <__swbuf_r+0x74>
 8005a94:	4638      	mov	r0, r7
 8005a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 f806 	bl	8005aac <__swsetup_r>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d0d5      	beq.n	8005a50 <__swbuf_r+0x20>
 8005aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8005aa8:	e7f4      	b.n	8005a94 <__swbuf_r+0x64>
	...

08005aac <__swsetup_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <__swsetup_r+0xac>)
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	b118      	cbz	r0, 8005ac0 <__swsetup_r+0x14>
 8005ab8:	6a03      	ldr	r3, [r0, #32]
 8005aba:	b90b      	cbnz	r3, 8005ac0 <__swsetup_r+0x14>
 8005abc:	f7fe f9d2 	bl	8003e64 <__sinit>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac6:	0718      	lsls	r0, r3, #28
 8005ac8:	d422      	bmi.n	8005b10 <__swsetup_r+0x64>
 8005aca:	06d9      	lsls	r1, r3, #27
 8005acc:	d407      	bmi.n	8005ade <__swsetup_r+0x32>
 8005ace:	2309      	movs	r3, #9
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	e034      	b.n	8005b48 <__swsetup_r+0x9c>
 8005ade:	0758      	lsls	r0, r3, #29
 8005ae0:	d512      	bpl.n	8005b08 <__swsetup_r+0x5c>
 8005ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ae4:	b141      	cbz	r1, 8005af8 <__swsetup_r+0x4c>
 8005ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d002      	beq.n	8005af4 <__swsetup_r+0x48>
 8005aee:	4628      	mov	r0, r5
 8005af0:	f7ff f93e 	bl	8004d70 <_free_r>
 8005af4:	2300      	movs	r3, #0
 8005af6:	6363      	str	r3, [r4, #52]	; 0x34
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	2300      	movs	r3, #0
 8005b02:	6063      	str	r3, [r4, #4]
 8005b04:	6923      	ldr	r3, [r4, #16]
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f043 0308 	orr.w	r3, r3, #8
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	6923      	ldr	r3, [r4, #16]
 8005b12:	b94b      	cbnz	r3, 8005b28 <__swsetup_r+0x7c>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b1e:	d003      	beq.n	8005b28 <__swsetup_r+0x7c>
 8005b20:	4621      	mov	r1, r4
 8005b22:	4628      	mov	r0, r5
 8005b24:	f000 f8c1 	bl	8005caa <__smakebuf_r>
 8005b28:	89a0      	ldrh	r0, [r4, #12]
 8005b2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b2e:	f010 0301 	ands.w	r3, r0, #1
 8005b32:	d00a      	beq.n	8005b4a <__swsetup_r+0x9e>
 8005b34:	2300      	movs	r3, #0
 8005b36:	60a3      	str	r3, [r4, #8]
 8005b38:	6963      	ldr	r3, [r4, #20]
 8005b3a:	425b      	negs	r3, r3
 8005b3c:	61a3      	str	r3, [r4, #24]
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	b943      	cbnz	r3, 8005b54 <__swsetup_r+0xa8>
 8005b42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b46:	d1c4      	bne.n	8005ad2 <__swsetup_r+0x26>
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
 8005b4a:	0781      	lsls	r1, r0, #30
 8005b4c:	bf58      	it	pl
 8005b4e:	6963      	ldrpl	r3, [r4, #20]
 8005b50:	60a3      	str	r3, [r4, #8]
 8005b52:	e7f4      	b.n	8005b3e <__swsetup_r+0x92>
 8005b54:	2000      	movs	r0, #0
 8005b56:	e7f7      	b.n	8005b48 <__swsetup_r+0x9c>
 8005b58:	20000064 	.word	0x20000064

08005b5c <_sbrk_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	2300      	movs	r3, #0
 8005b60:	4d05      	ldr	r5, [pc, #20]	; (8005b78 <_sbrk_r+0x1c>)
 8005b62:	4604      	mov	r4, r0
 8005b64:	4608      	mov	r0, r1
 8005b66:	602b      	str	r3, [r5, #0]
 8005b68:	f7fb fc80 	bl	800146c <_sbrk>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d102      	bne.n	8005b76 <_sbrk_r+0x1a>
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	b103      	cbz	r3, 8005b76 <_sbrk_r+0x1a>
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
 8005b78:	200003d0 	.word	0x200003d0

08005b7c <memcpy>:
 8005b7c:	440a      	add	r2, r1
 8005b7e:	4291      	cmp	r1, r2
 8005b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b84:	d100      	bne.n	8005b88 <memcpy+0xc>
 8005b86:	4770      	bx	lr
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b8e:	4291      	cmp	r1, r2
 8005b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b94:	d1f9      	bne.n	8005b8a <memcpy+0xe>
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <__assert_func>:
 8005b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <__assert_func+0x2c>)
 8005ba0:	4605      	mov	r5, r0
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68d8      	ldr	r0, [r3, #12]
 8005ba6:	b14c      	cbz	r4, 8005bbc <__assert_func+0x24>
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <__assert_func+0x30>)
 8005baa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bae:	9100      	str	r1, [sp, #0]
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	4906      	ldr	r1, [pc, #24]	; (8005bcc <__assert_func+0x34>)
 8005bb4:	f000 f842 	bl	8005c3c <fiprintf>
 8005bb8:	f000 f8d6 	bl	8005d68 <abort>
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <__assert_func+0x38>)
 8005bbe:	461c      	mov	r4, r3
 8005bc0:	e7f3      	b.n	8005baa <__assert_func+0x12>
 8005bc2:	bf00      	nop
 8005bc4:	20000064 	.word	0x20000064
 8005bc8:	08006097 	.word	0x08006097
 8005bcc:	080060a4 	.word	0x080060a4
 8005bd0:	080060d2 	.word	0x080060d2

08005bd4 <_calloc_r>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	fba1 5402 	umull	r5, r4, r1, r2
 8005bda:	b934      	cbnz	r4, 8005bea <_calloc_r+0x16>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	f7ff f937 	bl	8004e50 <_malloc_r>
 8005be2:	4606      	mov	r6, r0
 8005be4:	b928      	cbnz	r0, 8005bf2 <_calloc_r+0x1e>
 8005be6:	4630      	mov	r0, r6
 8005be8:	bd70      	pop	{r4, r5, r6, pc}
 8005bea:	220c      	movs	r2, #12
 8005bec:	2600      	movs	r6, #0
 8005bee:	6002      	str	r2, [r0, #0]
 8005bf0:	e7f9      	b.n	8005be6 <_calloc_r+0x12>
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	f7fe f9c0 	bl	8003f7a <memset>
 8005bfa:	e7f4      	b.n	8005be6 <_calloc_r+0x12>

08005bfc <__ascii_mbtowc>:
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	b901      	cbnz	r1, 8005c02 <__ascii_mbtowc+0x6>
 8005c00:	a901      	add	r1, sp, #4
 8005c02:	b142      	cbz	r2, 8005c16 <__ascii_mbtowc+0x1a>
 8005c04:	b14b      	cbz	r3, 8005c1a <__ascii_mbtowc+0x1e>
 8005c06:	7813      	ldrb	r3, [r2, #0]
 8005c08:	600b      	str	r3, [r1, #0]
 8005c0a:	7812      	ldrb	r2, [r2, #0]
 8005c0c:	1e10      	subs	r0, r2, #0
 8005c0e:	bf18      	it	ne
 8005c10:	2001      	movne	r0, #1
 8005c12:	b002      	add	sp, #8
 8005c14:	4770      	bx	lr
 8005c16:	4610      	mov	r0, r2
 8005c18:	e7fb      	b.n	8005c12 <__ascii_mbtowc+0x16>
 8005c1a:	f06f 0001 	mvn.w	r0, #1
 8005c1e:	e7f8      	b.n	8005c12 <__ascii_mbtowc+0x16>

08005c20 <__ascii_wctomb>:
 8005c20:	4603      	mov	r3, r0
 8005c22:	4608      	mov	r0, r1
 8005c24:	b141      	cbz	r1, 8005c38 <__ascii_wctomb+0x18>
 8005c26:	2aff      	cmp	r2, #255	; 0xff
 8005c28:	d904      	bls.n	8005c34 <__ascii_wctomb+0x14>
 8005c2a:	228a      	movs	r2, #138	; 0x8a
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	4770      	bx	lr
 8005c34:	2001      	movs	r0, #1
 8005c36:	700a      	strb	r2, [r1, #0]
 8005c38:	4770      	bx	lr
	...

08005c3c <fiprintf>:
 8005c3c:	b40e      	push	{r1, r2, r3}
 8005c3e:	b503      	push	{r0, r1, lr}
 8005c40:	4601      	mov	r1, r0
 8005c42:	ab03      	add	r3, sp, #12
 8005c44:	4805      	ldr	r0, [pc, #20]	; (8005c5c <fiprintf+0x20>)
 8005c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	f7ff fd2b 	bl	80056a8 <_vfiprintf_r>
 8005c52:	b002      	add	sp, #8
 8005c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c58:	b003      	add	sp, #12
 8005c5a:	4770      	bx	lr
 8005c5c:	20000064 	.word	0x20000064

08005c60 <__swhatbuf_r>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	460c      	mov	r4, r1
 8005c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c68:	4615      	mov	r5, r2
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	461e      	mov	r6, r3
 8005c6e:	b096      	sub	sp, #88	; 0x58
 8005c70:	da0c      	bge.n	8005c8c <__swhatbuf_r+0x2c>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	2100      	movs	r1, #0
 8005c76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c7a:	bf0c      	ite	eq
 8005c7c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c80:	2340      	movne	r3, #64	; 0x40
 8005c82:	2000      	movs	r0, #0
 8005c84:	6031      	str	r1, [r6, #0]
 8005c86:	602b      	str	r3, [r5, #0]
 8005c88:	b016      	add	sp, #88	; 0x58
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	466a      	mov	r2, sp
 8005c8e:	f000 f849 	bl	8005d24 <_fstat_r>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	dbed      	blt.n	8005c72 <__swhatbuf_r+0x12>
 8005c96:	9901      	ldr	r1, [sp, #4]
 8005c98:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c9c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ca0:	4259      	negs	r1, r3
 8005ca2:	4159      	adcs	r1, r3
 8005ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca8:	e7eb      	b.n	8005c82 <__swhatbuf_r+0x22>

08005caa <__smakebuf_r>:
 8005caa:	898b      	ldrh	r3, [r1, #12]
 8005cac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cae:	079d      	lsls	r5, r3, #30
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	d507      	bpl.n	8005cc6 <__smakebuf_r+0x1c>
 8005cb6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	6123      	str	r3, [r4, #16]
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	6163      	str	r3, [r4, #20]
 8005cc2:	b002      	add	sp, #8
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
 8005cc6:	466a      	mov	r2, sp
 8005cc8:	ab01      	add	r3, sp, #4
 8005cca:	f7ff ffc9 	bl	8005c60 <__swhatbuf_r>
 8005cce:	9900      	ldr	r1, [sp, #0]
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f7ff f8bc 	bl	8004e50 <_malloc_r>
 8005cd8:	b948      	cbnz	r0, 8005cee <__smakebuf_r+0x44>
 8005cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cde:	059a      	lsls	r2, r3, #22
 8005ce0:	d4ef      	bmi.n	8005cc2 <__smakebuf_r+0x18>
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	f043 0302 	orr.w	r3, r3, #2
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	e7e3      	b.n	8005cb6 <__smakebuf_r+0xc>
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	6020      	str	r0, [r4, #0]
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf6:	81a3      	strh	r3, [r4, #12]
 8005cf8:	9b00      	ldr	r3, [sp, #0]
 8005cfa:	6120      	str	r0, [r4, #16]
 8005cfc:	6163      	str	r3, [r4, #20]
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	b15b      	cbz	r3, 8005d1a <__smakebuf_r+0x70>
 8005d02:	4630      	mov	r0, r6
 8005d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d08:	f000 f81e 	bl	8005d48 <_isatty_r>
 8005d0c:	b128      	cbz	r0, 8005d1a <__smakebuf_r+0x70>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	f023 0303 	bic.w	r3, r3, #3
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	431d      	orrs	r5, r3
 8005d1e:	81a5      	strh	r5, [r4, #12]
 8005d20:	e7cf      	b.n	8005cc2 <__smakebuf_r+0x18>
	...

08005d24 <_fstat_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	2300      	movs	r3, #0
 8005d28:	4d06      	ldr	r5, [pc, #24]	; (8005d44 <_fstat_r+0x20>)
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	f7fb fb75 	bl	8001420 <_fstat>
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d102      	bne.n	8005d40 <_fstat_r+0x1c>
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	b103      	cbz	r3, 8005d40 <_fstat_r+0x1c>
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	bf00      	nop
 8005d44:	200003d0 	.word	0x200003d0

08005d48 <_isatty_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	4d05      	ldr	r5, [pc, #20]	; (8005d64 <_isatty_r+0x1c>)
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	f7fb fb73 	bl	800143e <_isatty>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_isatty_r+0x1a>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_isatty_r+0x1a>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	200003d0 	.word	0x200003d0

08005d68 <abort>:
 8005d68:	2006      	movs	r0, #6
 8005d6a:	b508      	push	{r3, lr}
 8005d6c:	f000 f82c 	bl	8005dc8 <raise>
 8005d70:	2001      	movs	r0, #1
 8005d72:	f7fb fb23 	bl	80013bc <_exit>

08005d76 <_raise_r>:
 8005d76:	291f      	cmp	r1, #31
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	460d      	mov	r5, r1
 8005d7e:	d904      	bls.n	8005d8a <_raise_r+0x14>
 8005d80:	2316      	movs	r3, #22
 8005d82:	6003      	str	r3, [r0, #0]
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	bd38      	pop	{r3, r4, r5, pc}
 8005d8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005d8c:	b112      	cbz	r2, 8005d94 <_raise_r+0x1e>
 8005d8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d92:	b94b      	cbnz	r3, 8005da8 <_raise_r+0x32>
 8005d94:	4620      	mov	r0, r4
 8005d96:	f000 f831 	bl	8005dfc <_getpid_r>
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	4601      	mov	r1, r0
 8005d9e:	4620      	mov	r0, r4
 8005da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da4:	f000 b818 	b.w	8005dd8 <_kill_r>
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d00a      	beq.n	8005dc2 <_raise_r+0x4c>
 8005dac:	1c59      	adds	r1, r3, #1
 8005dae:	d103      	bne.n	8005db8 <_raise_r+0x42>
 8005db0:	2316      	movs	r3, #22
 8005db2:	6003      	str	r3, [r0, #0]
 8005db4:	2001      	movs	r0, #1
 8005db6:	e7e7      	b.n	8005d88 <_raise_r+0x12>
 8005db8:	2400      	movs	r4, #0
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dc0:	4798      	blx	r3
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	e7e0      	b.n	8005d88 <_raise_r+0x12>
	...

08005dc8 <raise>:
 8005dc8:	4b02      	ldr	r3, [pc, #8]	; (8005dd4 <raise+0xc>)
 8005dca:	4601      	mov	r1, r0
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f7ff bfd2 	b.w	8005d76 <_raise_r>
 8005dd2:	bf00      	nop
 8005dd4:	20000064 	.word	0x20000064

08005dd8 <_kill_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d06      	ldr	r5, [pc, #24]	; (8005df8 <_kill_r+0x20>)
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	f7fb fad9 	bl	800139c <_kill>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	d102      	bne.n	8005df4 <_kill_r+0x1c>
 8005dee:	682b      	ldr	r3, [r5, #0]
 8005df0:	b103      	cbz	r3, 8005df4 <_kill_r+0x1c>
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	bf00      	nop
 8005df8:	200003d0 	.word	0x200003d0

08005dfc <_getpid_r>:
 8005dfc:	f7fb bac7 	b.w	800138e <_getpid>

08005e00 <_init>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr

08005e0c <_fini>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr
